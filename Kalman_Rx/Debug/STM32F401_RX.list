
STM32F401_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014a4  08009e30  08009e30  00019e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2d4  0800b2d4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2d4  0800b2d4  0001b2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2dc  0800b2dc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2dc  0800b2dc  0001b2dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2e0  0800b2e0  0001b2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b2e4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  200001f0  0800b4d4  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  0800b4d4  00020874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f38  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002868  00000000  00000000  00031158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000339c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  000347e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a89  00000000  00000000  00035508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b2b  00000000  00000000  0004cf91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b38a  00000000  00000000  0005dabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8e46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e10  00000000  00000000  000e8e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e18 	.word	0x08009e18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08009e18 	.word	0x08009e18

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <NRF24_DelayMicroSeconds+0x3c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <NRF24_DelayMicroSeconds+0x40>)
 800100e:	fba2 2303 	umull	r2, r3, r2, r3
 8001012:	0c9a      	lsrs	r2, r3, #18
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	fb02 f303 	mul.w	r3, r2, r3
 800101a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800101c:	bf00      	nop
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	60fa      	str	r2, [r7, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1fa      	bne.n	800101e <NRF24_DelayMicroSeconds+0x22>
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000010 	.word	0x20000010
 800103c:	165e9f81 	.word	0x165e9f81

08001040 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d008      	beq.n	8001060 <NRF24_csn+0x20>
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <NRF24_csn+0x38>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <NRF24_csn+0x3c>)
 8001054:	8811      	ldrh	r1, [r2, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fba5 	bl	80037a8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800105e:	e007      	b.n	8001070 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <NRF24_csn+0x38>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <NRF24_csn+0x3c>)
 8001066:	8811      	ldrh	r1, [r2, #0]
 8001068:	2200      	movs	r2, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fb9c 	bl	80037a8 <HAL_GPIO_WritePin>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000021c 	.word	0x2000021c
 800107c:	20000220 	.word	0x20000220

08001080 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d008      	beq.n	80010a0 <NRF24_ce+0x20>
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <NRF24_ce+0x38>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <NRF24_ce+0x3c>)
 8001094:	8811      	ldrh	r1, [r2, #0]
 8001096:	2201      	movs	r2, #1
 8001098:	4618      	mov	r0, r3
 800109a:	f002 fb85 	bl	80037a8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800109e:	e007      	b.n	80010b0 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <NRF24_ce+0x38>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a05      	ldr	r2, [pc, #20]	; (80010bc <NRF24_ce+0x3c>)
 80010a6:	8811      	ldrh	r1, [r2, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fb7c 	bl	80037a8 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000021c 	.word	0x2000021c
 80010bc:	20000222 	.word	0x20000222

080010c0 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ffb8 	bl	8001040 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80010da:	f107 010c 	add.w	r1, r7, #12
 80010de:	2364      	movs	r3, #100	; 0x64
 80010e0:	2201      	movs	r2, #1
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <NRF24_read_register+0x4c>)
 80010e4:	f003 fcc1 	bl	8004a6a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	1c59      	adds	r1, r3, #1
 80010ee:	2364      	movs	r3, #100	; 0x64
 80010f0:	2201      	movs	r2, #1
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <NRF24_read_register+0x4c>)
 80010f4:	f003 fdf5 	bl	8004ce2 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff ff9f 	bl	8001040 <NRF24_csn>
	return retData;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000224 	.word	0x20000224

08001110 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ff8d 	bl	8001040 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	b2db      	uxtb	r3, r3
 800112e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001130:	f107 010c 	add.w	r1, r7, #12
 8001134:	2364      	movs	r3, #100	; 0x64
 8001136:	2201      	movs	r2, #1
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <NRF24_read_registerN+0x4c>)
 800113a:	f003 fc96 	bl	8004a6a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	b29a      	uxth	r2, r3
 8001142:	2364      	movs	r3, #100	; 0x64
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <NRF24_read_registerN+0x4c>)
 8001148:	f003 fdcb 	bl	8004ce2 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ff77 	bl	8001040 <NRF24_csn>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000224 	.word	0x20000224

08001160 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff ff65 	bl	8001040 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	b2db      	uxtb	r3, r3
 800117e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001184:	f107 010c 	add.w	r1, r7, #12
 8001188:	2364      	movs	r3, #100	; 0x64
 800118a:	2202      	movs	r2, #2
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <NRF24_write_register+0x40>)
 800118e:	f003 fc6c 	bl	8004a6a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff ff54 	bl	8001040 <NRF24_csn>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000224 	.word	0x20000224

080011a4 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff ff43 	bl	8001040 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80011c4:	f107 010c 	add.w	r1, r7, #12
 80011c8:	2364      	movs	r3, #100	; 0x64
 80011ca:	2201      	movs	r2, #1
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <NRF24_write_registerN+0x4c>)
 80011ce:	f003 fc4c 	bl	8004a6a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <NRF24_write_registerN+0x4c>)
 80011dc:	f003 fc45 	bl	8004a6a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff ff2d 	bl	8001040 <NRF24_csn>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000224 	.word	0x20000224

080011f4 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001200:	f000 fa0a 	bl	8001618 <NRF24_getPayloadSize>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	4293      	cmp	r3, r2
 800120c:	d303      	bcc.n	8001216 <NRF24_read_payload+0x22>
 800120e:	f000 fa03 	bl	8001618 <NRF24_getPayloadSize>
 8001212:	4603      	mov	r3, r0
 8001214:	e000      	b.n	8001218 <NRF24_read_payload+0x24>
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff ff10 	bl	8001040 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001220:	2361      	movs	r3, #97	; 0x61
 8001222:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001224:	f107 010e 	add.w	r1, r7, #14
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	2201      	movs	r2, #1
 800122c:	4808      	ldr	r0, [pc, #32]	; (8001250 <NRF24_read_payload+0x5c>)
 800122e:	f003 fc1c 	bl	8004a6a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	b29a      	uxth	r2, r3
 8001236:	2364      	movs	r3, #100	; 0x64
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <NRF24_read_payload+0x5c>)
 800123c:	f003 fd51 	bl	8004ce2 <HAL_SPI_Receive>
	NRF24_csn(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f7ff fefd 	bl	8001040 <NRF24_csn>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000224 	.word	0x20000224

08001254 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001258:	21ff      	movs	r1, #255	; 0xff
 800125a:	20e1      	movs	r0, #225	; 0xe1
 800125c:	f7ff ff80 	bl	8001160 <NRF24_write_register>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001268:	21ff      	movs	r1, #255	; 0xff
 800126a:	20e2      	movs	r0, #226	; 0xe2
 800126c:	f7ff ff78 	bl	8001160 <NRF24_write_register>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800127a:	2007      	movs	r0, #7
 800127c:	f7ff ff20 	bl	80010c0 <NRF24_read_register>
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001284:	79fb      	ldrb	r3, [r7, #7]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001290:	b082      	sub	sp, #8
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
 80012a0:	4613      	mov	r3, r2
 80012a2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80012a4:	4b66      	ldr	r3, [pc, #408]	; (8001440 <NRF24_begin+0x1b0>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2258      	movs	r2, #88	; 0x58
 80012ae:	4619      	mov	r1, r3
 80012b0:	f004 fc1a 	bl	8005ae8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80012b4:	4a63      	ldr	r2, [pc, #396]	; (8001444 <NRF24_begin+0x1b4>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80012ba:	4a63      	ldr	r2, [pc, #396]	; (8001448 <NRF24_begin+0x1b8>)
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80012c0:	4a62      	ldr	r2, [pc, #392]	; (800144c <NRF24_begin+0x1bc>)
 80012c2:	883b      	ldrh	r3, [r7, #0]
 80012c4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff feba 	bl	8001040 <NRF24_csn>
	NRF24_ce(0);
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff fed7 	bl	8001080 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80012d2:	2005      	movs	r0, #5
 80012d4:	f001 ffda 	bl	800328c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80012d8:	2108      	movs	r1, #8
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff ff40 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80012e0:	213f      	movs	r1, #63	; 0x3f
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff ff3c 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80012e8:	2103      	movs	r1, #3
 80012ea:	2002      	movs	r0, #2
 80012ec:	f7ff ff38 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80012f0:	2103      	movs	r1, #3
 80012f2:	2003      	movs	r0, #3
 80012f4:	f7ff ff34 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80012f8:	2103      	movs	r1, #3
 80012fa:	2004      	movs	r0, #4
 80012fc:	f7ff ff30 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001300:	2102      	movs	r1, #2
 8001302:	2005      	movs	r0, #5
 8001304:	f7ff ff2c 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001308:	210f      	movs	r1, #15
 800130a:	2006      	movs	r0, #6
 800130c:	f7ff ff28 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001310:	210e      	movs	r1, #14
 8001312:	2007      	movs	r0, #7
 8001314:	f7ff ff24 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001318:	2100      	movs	r1, #0
 800131a:	2008      	movs	r0, #8
 800131c:	f7ff ff20 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001320:	2100      	movs	r1, #0
 8001322:	2009      	movs	r0, #9
 8001324:	f7ff ff1c 	bl	8001160 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001328:	23e7      	movs	r3, #231	; 0xe7
 800132a:	733b      	strb	r3, [r7, #12]
 800132c:	23e7      	movs	r3, #231	; 0xe7
 800132e:	72fb      	strb	r3, [r7, #11]
 8001330:	23e7      	movs	r3, #231	; 0xe7
 8001332:	72bb      	strb	r3, [r7, #10]
 8001334:	23e7      	movs	r3, #231	; 0xe7
 8001336:	727b      	strb	r3, [r7, #9]
 8001338:	23e7      	movs	r3, #231	; 0xe7
 800133a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	2205      	movs	r2, #5
 8001342:	4619      	mov	r1, r3
 8001344:	200a      	movs	r0, #10
 8001346:	f7ff ff2d 	bl	80011a4 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800134a:	23c2      	movs	r3, #194	; 0xc2
 800134c:	733b      	strb	r3, [r7, #12]
 800134e:	23c2      	movs	r3, #194	; 0xc2
 8001350:	72fb      	strb	r3, [r7, #11]
 8001352:	23c2      	movs	r3, #194	; 0xc2
 8001354:	72bb      	strb	r3, [r7, #10]
 8001356:	23c2      	movs	r3, #194	; 0xc2
 8001358:	727b      	strb	r3, [r7, #9]
 800135a:	23c2      	movs	r3, #194	; 0xc2
 800135c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2205      	movs	r2, #5
 8001364:	4619      	mov	r1, r3
 8001366:	200b      	movs	r0, #11
 8001368:	f7ff ff1c 	bl	80011a4 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800136c:	21c3      	movs	r1, #195	; 0xc3
 800136e:	200c      	movs	r0, #12
 8001370:	f7ff fef6 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001374:	21c4      	movs	r1, #196	; 0xc4
 8001376:	200d      	movs	r0, #13
 8001378:	f7ff fef2 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800137c:	21c5      	movs	r1, #197	; 0xc5
 800137e:	200e      	movs	r0, #14
 8001380:	f7ff feee 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001384:	21c6      	movs	r1, #198	; 0xc6
 8001386:	200f      	movs	r0, #15
 8001388:	f7ff feea 	bl	8001160 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800138c:	23e7      	movs	r3, #231	; 0xe7
 800138e:	733b      	strb	r3, [r7, #12]
 8001390:	23e7      	movs	r3, #231	; 0xe7
 8001392:	72fb      	strb	r3, [r7, #11]
 8001394:	23e7      	movs	r3, #231	; 0xe7
 8001396:	72bb      	strb	r3, [r7, #10]
 8001398:	23e7      	movs	r3, #231	; 0xe7
 800139a:	727b      	strb	r3, [r7, #9]
 800139c:	23e7      	movs	r3, #231	; 0xe7
 800139e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	2205      	movs	r2, #5
 80013a6:	4619      	mov	r1, r3
 80013a8:	2010      	movs	r0, #16
 80013aa:	f7ff fefb 	bl	80011a4 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80013ae:	2100      	movs	r1, #0
 80013b0:	2011      	movs	r0, #17
 80013b2:	f7ff fed5 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80013b6:	2100      	movs	r1, #0
 80013b8:	2012      	movs	r0, #18
 80013ba:	f7ff fed1 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80013be:	2100      	movs	r1, #0
 80013c0:	2013      	movs	r0, #19
 80013c2:	f7ff fecd 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80013c6:	2100      	movs	r1, #0
 80013c8:	2014      	movs	r0, #20
 80013ca:	f7ff fec9 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	2015      	movs	r0, #21
 80013d2:	f7ff fec5 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80013d6:	2100      	movs	r1, #0
 80013d8:	2016      	movs	r0, #22
 80013da:	f7ff fec1 	bl	8001160 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80013de:	f000 fa4b 	bl	8001878 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80013e2:	2100      	movs	r1, #0
 80013e4:	201c      	movs	r0, #28
 80013e6:	f7ff febb 	bl	8001160 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80013ea:	2100      	movs	r1, #0
 80013ec:	201d      	movs	r0, #29
 80013ee:	f7ff feb7 	bl	8001160 <NRF24_write_register>
	printRadioSettings();
 80013f2:	f000 fa5b 	bl	80018ac <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80013f6:	210f      	movs	r1, #15
 80013f8:	200f      	movs	r0, #15
 80013fa:	f000 f8c5 	bl	8001588 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80013fe:	2003      	movs	r0, #3
 8001400:	f000 f94b 	bl	800169a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8001404:	2001      	movs	r0, #1
 8001406:	f000 f981 	bl	800170c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800140a:	2002      	movs	r0, #2
 800140c:	f000 f9c4 	bl	8001798 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8001410:	f000 f916 	bl	8001640 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001414:	2020      	movs	r0, #32
 8001416:	f000 f8e7 	bl	80015e8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800141a:	f000 fa24 	bl	8001866 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800141e:	204c      	movs	r0, #76	; 0x4c
 8001420:	f000 f8cd 	bl	80015be <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001424:	f7ff ff16 	bl	8001254 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001428:	f7ff ff1c 	bl	8001264 <NRF24_flush_rx>
	
	NRF24_powerDown();
 800142c:	f000 f9dc 	bl	80017e8 <NRF24_powerDown>
	
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800143a:	b002      	add	sp, #8
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000224 	.word	0x20000224
 8001444:	2000021c 	.word	0x2000021c
 8001448:	20000220 	.word	0x20000220
 800144c:	20000222 	.word	0x20000222

08001450 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fe33 	bl	80010c0 <NRF24_read_register>
 800145a:	4603      	mov	r3, r0
 800145c:	f043 0303 	orr.w	r3, r3, #3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4619      	mov	r1, r3
 8001464:	2000      	movs	r0, #0
 8001466:	f7ff fe7b 	bl	8001160 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <NRF24_startListening+0x48>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	4313      	orrs	r3, r2
 8001472:	d004      	beq.n	800147e <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8001474:	2205      	movs	r2, #5
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <NRF24_startListening+0x48>)
 8001478:	200a      	movs	r0, #10
 800147a:	f7ff fe93 	bl	80011a4 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 800147e:	f7ff fee9 	bl	8001254 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001482:	f7ff feef 	bl	8001264 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff fdfa 	bl	8001080 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 800148c:	2096      	movs	r0, #150	; 0x96
 800148e:	f7ff fdb5 	bl	8000ffc <NRF24_DelayMicroSeconds>
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000210 	.word	0x20000210

0800149c <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 f9b0 	bl	8001806 <NRF24_availablePipe>
 80014a6:	4603      	mov	r3, r0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}

080014ac <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	4619      	mov	r1, r3
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fe99 	bl	80011f4 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80014c2:	2017      	movs	r0, #23
 80014c4:	f7ff fdfc 	bl	80010c0 <NRF24_read_register>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80014d0:	f7ff fec8 	bl	8001264 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80014d4:	f000 f8ac 	bl	8001630 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf14      	ite	ne
 80014de:	2301      	movne	r3, #1
 80014e0:	2300      	moveq	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4601      	mov	r1, r0
 80014f4:	e9c7 2300 	strd	r2, r3, [r7]
 80014f8:	460b      	mov	r3, r1
 80014fa:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d104      	bne.n	800150c <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001502:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001506:	491c      	ldr	r1, [pc, #112]	; (8001578 <NRF24_openReadingPipe+0x8c>)
 8001508:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	2b06      	cmp	r3, #6
 8001510:	d82d      	bhi.n	800156e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d808      	bhi.n	800152a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	4a18      	ldr	r2, [pc, #96]	; (800157c <NRF24_openReadingPipe+0x90>)
 800151c:	5cd3      	ldrb	r3, [r2, r3]
 800151e:	4639      	mov	r1, r7
 8001520:	2205      	movs	r2, #5
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fe3e 	bl	80011a4 <NRF24_write_registerN>
 8001528:	e007      	b.n	800153a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	4a13      	ldr	r2, [pc, #76]	; (800157c <NRF24_openReadingPipe+0x90>)
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	4639      	mov	r1, r7
 8001532:	2201      	movs	r2, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fe35 	bl	80011a4 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	4a10      	ldr	r2, [pc, #64]	; (8001580 <NRF24_openReadingPipe+0x94>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <NRF24_openReadingPipe+0x98>)
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fe0a 	bl	8001160 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800154c:	2002      	movs	r0, #2
 800154e:	f7ff fdb7 	bl	80010c0 <NRF24_read_register>
 8001552:	4603      	mov	r3, r0
 8001554:	b25a      	sxtb	r2, r3
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	2101      	movs	r1, #1
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	b25b      	sxtb	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b25b      	sxtb	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	2002      	movs	r0, #2
 800156a:	f7ff fdf9 	bl	8001160 <NRF24_write_register>
	}
	
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000210 	.word	0x20000210
 800157c:	0800a39c 	.word	0x0800a39c
 8001580:	0800a3a4 	.word	0x0800a3a4
 8001584:	20000218 	.word	0x20000218

08001588 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	460a      	mov	r2, r1
 8001592:	71fb      	strb	r3, [r7, #7]
 8001594:	4613      	mov	r3, r2
 8001596:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	b25a      	sxtb	r2, r3
 800159e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	2004      	movs	r0, #4
 80015b2:	f7ff fdd5 	bl	8001160 <NRF24_write_register>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80015c8:	237f      	movs	r3, #127	; 0x7f
 80015ca:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4293      	cmp	r3, r2
 80015d2:	bf28      	it	cs
 80015d4:	4613      	movcs	r3, r2
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4619      	mov	r1, r3
 80015da:	2005      	movs	r0, #5
 80015dc:	f7ff fdc0 	bl	8001160 <NRF24_write_register>
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80015f2:	2320      	movs	r3, #32
 80015f4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	4293      	cmp	r3, r2
 80015fc:	bf28      	it	cs
 80015fe:	4613      	movcs	r3, r2
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <NRF24_setPayloadSize+0x2c>)
 8001604:	701a      	strb	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000218 	.word	0x20000218

08001618 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	return payload_size;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <NRF24_getPayloadSize+0x14>)
 800161e:	781b      	ldrb	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000218 	.word	0x20000218

08001630 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001634:	2060      	movs	r0, #96	; 0x60
 8001636:	f7ff fd43 	bl	80010c0 <NRF24_read_register>
 800163a:	4603      	mov	r3, r0
}
 800163c:	4618      	mov	r0, r3
 800163e:	bd80      	pop	{r7, pc}

08001640 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001644:	201d      	movs	r0, #29
 8001646:	f7ff fd3b 	bl	80010c0 <NRF24_read_register>
 800164a:	4603      	mov	r3, r0
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4619      	mov	r1, r3
 8001654:	201d      	movs	r0, #29
 8001656:	f7ff fd83 	bl	8001160 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800165a:	2100      	movs	r1, #0
 800165c:	201c      	movs	r0, #28
 800165e:	f7ff fd7f 	bl	8001160 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001662:	4b02      	ldr	r3, [pc, #8]	; (800166c <NRF24_disableDynamicPayloads+0x2c>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000219 	.word	0x20000219

08001670 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001680:	213f      	movs	r1, #63	; 0x3f
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff fd6c 	bl	8001160 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001688:	e003      	b.n	8001692 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800168a:	2100      	movs	r1, #0
 800168c:	2001      	movs	r0, #1
 800168e:	f7ff fd67 	bl	8001160 <NRF24_write_register>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80016a4:	2006      	movs	r0, #6
 80016a6:	f7ff fd0b 	bl	80010c0 <NRF24_read_register>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	f023 0306 	bic.w	r3, r3, #6
 80016b4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d104      	bne.n	80016c6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	f043 0306 	orr.w	r3, r3, #6
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e019      	b.n	80016fa <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d104      	bne.n	80016d6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e011      	b.n	80016fa <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d104      	bne.n	80016e6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e009      	b.n	80016fa <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d103      	bne.n	80016fa <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	f043 0306 	orr.w	r3, r3, #6
 80016f8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	4619      	mov	r1, r3
 80016fe:	2006      	movs	r0, #6
 8001700:	f7ff fd2e 	bl	8001160 <NRF24_write_register>
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800171a:	2006      	movs	r0, #6
 800171c:	f7ff fcd0 	bl	80010c0 <NRF24_read_register>
 8001720:	4603      	mov	r3, r0
 8001722:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <NRF24_setDataRate+0x88>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001730:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d107      	bne.n	8001748 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <NRF24_setDataRate+0x88>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	f043 0320 	orr.w	r3, r3, #32
 8001744:	73bb      	strb	r3, [r7, #14]
 8001746:	e00d      	b.n	8001764 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <NRF24_setDataRate+0x88>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001754:	7bbb      	ldrb	r3, [r7, #14]
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	73bb      	strb	r3, [r7, #14]
 800175c:	e002      	b.n	8001764 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <NRF24_setDataRate+0x88>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001764:	7bbb      	ldrb	r3, [r7, #14]
 8001766:	4619      	mov	r1, r3
 8001768:	2006      	movs	r0, #6
 800176a:	f7ff fcf9 	bl	8001160 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800176e:	2006      	movs	r0, #6
 8001770:	f7ff fca6 	bl	80010c0 <NRF24_read_register>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	4293      	cmp	r3, r2
 800177c:	d102      	bne.n	8001784 <NRF24_setDataRate+0x78>
  {
    result = true;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e002      	b.n	800178a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001784:	4b03      	ldr	r3, [pc, #12]	; (8001794 <NRF24_setDataRate+0x88>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2000021a 	.word	0x2000021a

08001798 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fc8c 	bl	80010c0 <NRF24_read_register>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f023 030c 	bic.w	r3, r3, #12
 80017ae:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00f      	beq.n	80017d6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d104      	bne.n	80017c6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e007      	b.n	80017d6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	4619      	mov	r1, r3
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff fcc0 	bl	8001160 <NRF24_write_register>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff fc67 	bl	80010c0 <NRF24_read_register>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f023 0302 	bic.w	r3, r3, #2
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff fcaf 	bl	8001160 <NRF24_write_register>
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}

08001806 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800180e:	f7ff fd31 	bl	8001274 <NRF24_get_status>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d017      	beq.n	800185c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	b2da      	uxtb	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001842:	2140      	movs	r1, #64	; 0x40
 8001844:	2007      	movs	r0, #7
 8001846:	f7ff fc8b 	bl	8001160 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001854:	2120      	movs	r1, #32
 8001856:	2007      	movs	r0, #7
 8001858:	f7ff fc82 	bl	8001160 <NRF24_write_register>
    }
  }
  return result;
 800185c:	7bbb      	ldrb	r3, [r7, #14]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800186a:	2170      	movs	r1, #112	; 0x70
 800186c:	2007      	movs	r0, #7
 800186e:	f7ff fc77 	bl	8001160 <NRF24_write_register>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fbde 	bl	8001040 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001884:	2350      	movs	r3, #80	; 0x50
 8001886:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001888:	2373      	movs	r3, #115	; 0x73
 800188a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800188c:	1d39      	adds	r1, r7, #4
 800188e:	2364      	movs	r3, #100	; 0x64
 8001890:	2202      	movs	r2, #2
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <NRF24_ACTIVATE_cmd+0x30>)
 8001894:	f003 f8e9 	bl	8004a6a <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff fbd1 	bl	8001040 <NRF24_csn>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000224 	.word	0x20000224

080018ac <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	b0a1      	sub	sp, #132	; 0x84
 80018b0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	49c3      	ldr	r1, [pc, #780]	; (8001bc4 <printRadioSettings+0x318>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f004 fd95 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fc8c 	bl	80001e0 <strlen>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	f107 0108 	add.w	r1, r7, #8
 80018d0:	230a      	movs	r3, #10
 80018d2:	48bd      	ldr	r0, [pc, #756]	; (8001bc8 <printRadioSettings+0x31c>)
 80018d4:	f003 fe35 	bl	8005542 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff fbf1 	bl	80010c0 <NRF24_read_register>
 80018de:	4603      	mov	r3, r0
 80018e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80018e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80018f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <printRadioSettings+0x5e>
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	49b2      	ldr	r1, [pc, #712]	; (8001bcc <printRadioSettings+0x320>)
 8001902:	4618      	mov	r0, r3
 8001904:	f004 fd70 	bl	80063e8 <siprintf>
 8001908:	e00c      	b.n	8001924 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	49b0      	ldr	r1, [pc, #704]	; (8001bd0 <printRadioSettings+0x324>)
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fd69 	bl	80063e8 <siprintf>
 8001916:	e005      	b.n	8001924 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	49ad      	ldr	r1, [pc, #692]	; (8001bd4 <printRadioSettings+0x328>)
 800191e:	4618      	mov	r0, r3
 8001920:	f004 fd62 	bl	80063e8 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fc59 	bl	80001e0 <strlen>
 800192e:	4603      	mov	r3, r0
 8001930:	b29a      	uxth	r2, r3
 8001932:	f107 0108 	add.w	r1, r7, #8
 8001936:	230a      	movs	r3, #10
 8001938:	48a3      	ldr	r0, [pc, #652]	; (8001bc8 <printRadioSettings+0x31c>)
 800193a:	f003 fe02 	bl	8005542 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff fbbe 	bl	80010c0 <NRF24_read_register>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800194a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800194e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001952:	2b00      	cmp	r3, #0
 8001954:	bfcc      	ite	gt
 8001956:	2301      	movgt	r3, #1
 8001958:	2300      	movle	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800195e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001962:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001966:	2b00      	cmp	r3, #0
 8001968:	bfcc      	ite	gt
 800196a:	2301      	movgt	r3, #1
 800196c:	2300      	movle	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001972:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001976:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800197a:	2b00      	cmp	r3, #0
 800197c:	bfcc      	ite	gt
 800197e:	2301      	movgt	r3, #1
 8001980:	2300      	movle	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001986:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800198a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800198e:	2b00      	cmp	r3, #0
 8001990:	bfcc      	ite	gt
 8001992:	2301      	movgt	r3, #1
 8001994:	2300      	movle	r3, #0
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800199a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800199e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bfcc      	ite	gt
 80019a6:	2301      	movgt	r3, #1
 80019a8:	2300      	movle	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019b2:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bfcc      	ite	gt
 80019ba:	2301      	movgt	r3, #1
 80019bc:	2300      	movle	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f107 0008 	add.w	r0, r7, #8
 80019c4:	9303      	str	r3, [sp, #12]
 80019c6:	9402      	str	r4, [sp, #8]
 80019c8:	9101      	str	r1, [sp, #4]
 80019ca:	9200      	str	r2, [sp, #0]
 80019cc:	4633      	mov	r3, r6
 80019ce:	462a      	mov	r2, r5
 80019d0:	4981      	ldr	r1, [pc, #516]	; (8001bd8 <printRadioSettings+0x32c>)
 80019d2:	f004 fd09 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fc00 	bl	80001e0 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	f107 0108 	add.w	r1, r7, #8
 80019e8:	230a      	movs	r3, #10
 80019ea:	4877      	ldr	r0, [pc, #476]	; (8001bc8 <printRadioSettings+0x31c>)
 80019ec:	f003 fda9 	bl	8005542 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80019f0:	2002      	movs	r0, #2
 80019f2:	f7ff fb65 	bl	80010c0 <NRF24_read_register>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a00:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bfcc      	ite	gt
 8001a08:	2301      	movgt	r3, #1
 8001a0a:	2300      	movle	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a14:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bfcc      	ite	gt
 8001a1c:	2301      	movgt	r3, #1
 8001a1e:	2300      	movle	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a28:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bfcc      	ite	gt
 8001a30:	2301      	movgt	r3, #1
 8001a32:	2300      	movle	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a3c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bfcc      	ite	gt
 8001a44:	2301      	movgt	r3, #1
 8001a46:	2300      	movle	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a50:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bfcc      	ite	gt
 8001a58:	2301      	movgt	r3, #1
 8001a5a:	2300      	movle	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a64:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bfcc      	ite	gt
 8001a6c:	2301      	movgt	r3, #1
 8001a6e:	2300      	movle	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f107 0008 	add.w	r0, r7, #8
 8001a76:	9303      	str	r3, [sp, #12]
 8001a78:	9402      	str	r4, [sp, #8]
 8001a7a:	9101      	str	r1, [sp, #4]
 8001a7c:	9200      	str	r2, [sp, #0]
 8001a7e:	4633      	mov	r3, r6
 8001a80:	462a      	mov	r2, r5
 8001a82:	4956      	ldr	r1, [pc, #344]	; (8001bdc <printRadioSettings+0x330>)
 8001a84:	f004 fcb0 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fba7 	bl	80001e0 <strlen>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f107 0108 	add.w	r1, r7, #8
 8001a9a:	230a      	movs	r3, #10
 8001a9c:	484a      	ldr	r0, [pc, #296]	; (8001bc8 <printRadioSettings+0x31c>)
 8001a9e:	f003 fd50 	bl	8005542 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001aa2:	2003      	movs	r0, #3
 8001aa4:	f7ff fb0c 	bl	80010c0 <NRF24_read_register>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001ab2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001abc:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	4946      	ldr	r1, [pc, #280]	; (8001be0 <printRadioSettings+0x334>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 fc8e 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fb85 	bl	80001e0 <strlen>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	f107 0108 	add.w	r1, r7, #8
 8001ade:	230a      	movs	r3, #10
 8001ae0:	4839      	ldr	r0, [pc, #228]	; (8001bc8 <printRadioSettings+0x31c>)
 8001ae2:	f003 fd2e 	bl	8005542 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001ae6:	2005      	movs	r0, #5
 8001ae8:	f7ff faea 	bl	80010c0 <NRF24_read_register>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001af2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	4939      	ldr	r1, [pc, #228]	; (8001be4 <printRadioSettings+0x338>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 fc71 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fb68 	bl	80001e0 <strlen>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	f107 0108 	add.w	r1, r7, #8
 8001b18:	230a      	movs	r3, #10
 8001b1a:	482b      	ldr	r0, [pc, #172]	; (8001bc8 <printRadioSettings+0x31c>)
 8001b1c:	f003 fd11 	bl	8005542 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001b20:	2006      	movs	r0, #6
 8001b22:	f7ff facd 	bl	80010c0 <NRF24_read_register>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001b2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <printRadioSettings+0x29a>
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	492a      	ldr	r1, [pc, #168]	; (8001be8 <printRadioSettings+0x33c>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fc52 	bl	80063e8 <siprintf>
 8001b44:	e005      	b.n	8001b52 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4928      	ldr	r1, [pc, #160]	; (8001bec <printRadioSettings+0x340>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 fc4b 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fb42 	bl	80001e0 <strlen>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	f107 0108 	add.w	r1, r7, #8
 8001b64:	230a      	movs	r3, #10
 8001b66:	4818      	ldr	r0, [pc, #96]	; (8001bc8 <printRadioSettings+0x31c>)
 8001b68:	f003 fceb 	bl	8005542 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001b6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b70:	f003 0306 	and.w	r3, r3, #6
 8001b74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001b78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001b82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <printRadioSettings+0x2ec>
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4918      	ldr	r1, [pc, #96]	; (8001bf0 <printRadioSettings+0x344>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f004 fc29 	bl	80063e8 <siprintf>
 8001b96:	e03b      	b.n	8001c10 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001b98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <printRadioSettings+0x302>
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	4913      	ldr	r1, [pc, #76]	; (8001bf4 <printRadioSettings+0x348>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 fc1e 	bl	80063e8 <siprintf>
 8001bac:	e030      	b.n	8001c10 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001bae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d122      	bne.n	8001bfc <printRadioSettings+0x350>
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	490f      	ldr	r1, [pc, #60]	; (8001bf8 <printRadioSettings+0x34c>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f004 fc13 	bl	80063e8 <siprintf>
 8001bc2:	e025      	b.n	8001c10 <printRadioSettings+0x364>
 8001bc4:	08009e30 	.word	0x08009e30
 8001bc8:	2000027c 	.word	0x2000027c
 8001bcc:	08009e64 	.word	0x08009e64
 8001bd0:	08009e80 	.word	0x08009e80
 8001bd4:	08009e9c 	.word	0x08009e9c
 8001bd8:	08009eb0 	.word	0x08009eb0
 8001bdc:	08009ef4 	.word	0x08009ef4
 8001be0:	08009f40 	.word	0x08009f40
 8001be4:	08009f5c 	.word	0x08009f5c
 8001be8:	08009f70 	.word	0x08009f70
 8001bec:	08009f88 	.word	0x08009f88
 8001bf0:	08009fa0 	.word	0x08009fa0
 8001bf4:	08009fb4 	.word	0x08009fb4
 8001bf8:	08009fc8 	.word	0x08009fc8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001bfc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d105      	bne.n	8001c10 <printRadioSettings+0x364>
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	49d7      	ldr	r1, [pc, #860]	; (8001f68 <printRadioSettings+0x6bc>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 fbec 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fae3 	bl	80001e0 <strlen>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	f107 0108 	add.w	r1, r7, #8
 8001c22:	230a      	movs	r3, #10
 8001c24:	48d1      	ldr	r0, [pc, #836]	; (8001f6c <printRadioSettings+0x6c0>)
 8001c26:	f003 fc8c 	bl	8005542 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2205      	movs	r2, #5
 8001c2e:	4619      	mov	r1, r3
 8001c30:	200a      	movs	r0, #10
 8001c32:	f7ff fa6d 	bl	8001110 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001c36:	793b      	ldrb	r3, [r7, #4]
 8001c38:	461c      	mov	r4, r3
 8001c3a:	78fb      	ldrb	r3, [r7, #3]
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	78bb      	ldrb	r3, [r7, #2]
 8001c40:	787a      	ldrb	r2, [r7, #1]
 8001c42:	7839      	ldrb	r1, [r7, #0]
 8001c44:	f107 0008 	add.w	r0, r7, #8
 8001c48:	9102      	str	r1, [sp, #8]
 8001c4a:	9201      	str	r2, [sp, #4]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	4622      	mov	r2, r4
 8001c52:	49c7      	ldr	r1, [pc, #796]	; (8001f70 <printRadioSettings+0x6c4>)
 8001c54:	f004 fbc8 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fabf 	bl	80001e0 <strlen>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	f107 0108 	add.w	r1, r7, #8
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	48bf      	ldr	r0, [pc, #764]	; (8001f6c <printRadioSettings+0x6c0>)
 8001c6e:	f003 fc68 	bl	8005542 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001c72:	463b      	mov	r3, r7
 8001c74:	2205      	movs	r2, #5
 8001c76:	4619      	mov	r1, r3
 8001c78:	200b      	movs	r0, #11
 8001c7a:	f7ff fa49 	bl	8001110 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001c7e:	793b      	ldrb	r3, [r7, #4]
 8001c80:	461c      	mov	r4, r3
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	461d      	mov	r5, r3
 8001c86:	78bb      	ldrb	r3, [r7, #2]
 8001c88:	787a      	ldrb	r2, [r7, #1]
 8001c8a:	7839      	ldrb	r1, [r7, #0]
 8001c8c:	f107 0008 	add.w	r0, r7, #8
 8001c90:	9102      	str	r1, [sp, #8]
 8001c92:	9201      	str	r2, [sp, #4]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	462b      	mov	r3, r5
 8001c98:	4622      	mov	r2, r4
 8001c9a:	49b6      	ldr	r1, [pc, #728]	; (8001f74 <printRadioSettings+0x6c8>)
 8001c9c:	f004 fba4 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fa9b 	bl	80001e0 <strlen>
 8001caa:	4603      	mov	r3, r0
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	f107 0108 	add.w	r1, r7, #8
 8001cb2:	230a      	movs	r3, #10
 8001cb4:	48ad      	ldr	r0, [pc, #692]	; (8001f6c <printRadioSettings+0x6c0>)
 8001cb6:	f003 fc44 	bl	8005542 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	200c      	movs	r0, #12
 8001cc2:	f7ff fa25 	bl	8001110 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001cc6:	783b      	ldrb	r3, [r7, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f107 0308 	add.w	r3, r7, #8
 8001cce:	49aa      	ldr	r1, [pc, #680]	; (8001f78 <printRadioSettings+0x6cc>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 fb89 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fa80 	bl	80001e0 <strlen>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	f107 0108 	add.w	r1, r7, #8
 8001ce8:	230a      	movs	r3, #10
 8001cea:	48a0      	ldr	r0, [pc, #640]	; (8001f6c <printRadioSettings+0x6c0>)
 8001cec:	f003 fc29 	bl	8005542 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	200d      	movs	r0, #13
 8001cf8:	f7ff fa0a 	bl	8001110 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001cfc:	783b      	ldrb	r3, [r7, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	499d      	ldr	r1, [pc, #628]	; (8001f7c <printRadioSettings+0x6d0>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 fb6e 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fa65 	bl	80001e0 <strlen>
 8001d16:	4603      	mov	r3, r0
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	f107 0108 	add.w	r1, r7, #8
 8001d1e:	230a      	movs	r3, #10
 8001d20:	4892      	ldr	r0, [pc, #584]	; (8001f6c <printRadioSettings+0x6c0>)
 8001d22:	f003 fc0e 	bl	8005542 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001d26:	463b      	mov	r3, r7
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	200e      	movs	r0, #14
 8001d2e:	f7ff f9ef 	bl	8001110 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001d32:	783b      	ldrb	r3, [r7, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	4991      	ldr	r1, [pc, #580]	; (8001f80 <printRadioSettings+0x6d4>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f004 fb53 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa4a 	bl	80001e0 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f107 0108 	add.w	r1, r7, #8
 8001d54:	230a      	movs	r3, #10
 8001d56:	4885      	ldr	r0, [pc, #532]	; (8001f6c <printRadioSettings+0x6c0>)
 8001d58:	f003 fbf3 	bl	8005542 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4619      	mov	r1, r3
 8001d62:	200f      	movs	r0, #15
 8001d64:	f7ff f9d4 	bl	8001110 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001d68:	783b      	ldrb	r3, [r7, #0]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f107 0308 	add.w	r3, r7, #8
 8001d70:	4984      	ldr	r1, [pc, #528]	; (8001f84 <printRadioSettings+0x6d8>)
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 fb38 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fa2f 	bl	80001e0 <strlen>
 8001d82:	4603      	mov	r3, r0
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	f107 0108 	add.w	r1, r7, #8
 8001d8a:	230a      	movs	r3, #10
 8001d8c:	4877      	ldr	r0, [pc, #476]	; (8001f6c <printRadioSettings+0x6c0>)
 8001d8e:	f003 fbd8 	bl	8005542 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001d92:	463b      	mov	r3, r7
 8001d94:	2205      	movs	r2, #5
 8001d96:	4619      	mov	r1, r3
 8001d98:	2010      	movs	r0, #16
 8001d9a:	f7ff f9b9 	bl	8001110 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001d9e:	793b      	ldrb	r3, [r7, #4]
 8001da0:	461c      	mov	r4, r3
 8001da2:	78fb      	ldrb	r3, [r7, #3]
 8001da4:	461d      	mov	r5, r3
 8001da6:	78bb      	ldrb	r3, [r7, #2]
 8001da8:	787a      	ldrb	r2, [r7, #1]
 8001daa:	7839      	ldrb	r1, [r7, #0]
 8001dac:	f107 0008 	add.w	r0, r7, #8
 8001db0:	9102      	str	r1, [sp, #8]
 8001db2:	9201      	str	r2, [sp, #4]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	462b      	mov	r3, r5
 8001db8:	4622      	mov	r2, r4
 8001dba:	4973      	ldr	r1, [pc, #460]	; (8001f88 <printRadioSettings+0x6dc>)
 8001dbc:	f004 fb14 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001dc0:	f107 0308 	add.w	r3, r7, #8
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fa0b 	bl	80001e0 <strlen>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	f107 0108 	add.w	r1, r7, #8
 8001dd2:	230a      	movs	r3, #10
 8001dd4:	4865      	ldr	r0, [pc, #404]	; (8001f6c <printRadioSettings+0x6c0>)
 8001dd6:	f003 fbb4 	bl	8005542 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001dda:	2011      	movs	r0, #17
 8001ddc:	f7ff f970 	bl	80010c0 <NRF24_read_register>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001de6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4966      	ldr	r1, [pc, #408]	; (8001f8c <printRadioSettings+0x6e0>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f004 faf7 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe f9ee 	bl	80001e0 <strlen>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	f107 0108 	add.w	r1, r7, #8
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	4857      	ldr	r0, [pc, #348]	; (8001f6c <printRadioSettings+0x6c0>)
 8001e10:	f003 fb97 	bl	8005542 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001e14:	2012      	movs	r0, #18
 8001e16:	f7ff f953 	bl	80010c0 <NRF24_read_register>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001e20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	4958      	ldr	r1, [pc, #352]	; (8001f90 <printRadioSettings+0x6e4>)
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 fada 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe f9d1 	bl	80001e0 <strlen>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	f107 0108 	add.w	r1, r7, #8
 8001e46:	230a      	movs	r3, #10
 8001e48:	4848      	ldr	r0, [pc, #288]	; (8001f6c <printRadioSettings+0x6c0>)
 8001e4a:	f003 fb7a 	bl	8005542 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001e4e:	2013      	movs	r0, #19
 8001e50:	f7ff f936 	bl	80010c0 <NRF24_read_register>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001e5a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	494b      	ldr	r1, [pc, #300]	; (8001f94 <printRadioSettings+0x6e8>)
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 fabd 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe f9b4 	bl	80001e0 <strlen>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f107 0108 	add.w	r1, r7, #8
 8001e80:	230a      	movs	r3, #10
 8001e82:	483a      	ldr	r0, [pc, #232]	; (8001f6c <printRadioSettings+0x6c0>)
 8001e84:	f003 fb5d 	bl	8005542 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001e88:	2014      	movs	r0, #20
 8001e8a:	f7ff f919 	bl	80010c0 <NRF24_read_register>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001e94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	493d      	ldr	r1, [pc, #244]	; (8001f98 <printRadioSettings+0x6ec>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 faa0 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe f997 	bl	80001e0 <strlen>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	f107 0108 	add.w	r1, r7, #8
 8001eba:	230a      	movs	r3, #10
 8001ebc:	482b      	ldr	r0, [pc, #172]	; (8001f6c <printRadioSettings+0x6c0>)
 8001ebe:	f003 fb40 	bl	8005542 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001ec2:	2015      	movs	r0, #21
 8001ec4:	f7ff f8fc 	bl	80010c0 <NRF24_read_register>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ece:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4930      	ldr	r1, [pc, #192]	; (8001f9c <printRadioSettings+0x6f0>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f004 fa83 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe f97a 	bl	80001e0 <strlen>
 8001eec:	4603      	mov	r3, r0
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f107 0108 	add.w	r1, r7, #8
 8001ef4:	230a      	movs	r3, #10
 8001ef6:	481d      	ldr	r0, [pc, #116]	; (8001f6c <printRadioSettings+0x6c0>)
 8001ef8:	f003 fb23 	bl	8005542 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001efc:	2016      	movs	r0, #22
 8001efe:	f7ff f8df 	bl	80010c0 <NRF24_read_register>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001f08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	4922      	ldr	r1, [pc, #136]	; (8001fa0 <printRadioSettings+0x6f4>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 fa66 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe f95d 	bl	80001e0 <strlen>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	f107 0108 	add.w	r1, r7, #8
 8001f2e:	230a      	movs	r3, #10
 8001f30:	480e      	ldr	r0, [pc, #56]	; (8001f6c <printRadioSettings+0x6c0>)
 8001f32:	f003 fb06 	bl	8005542 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001f36:	201c      	movs	r0, #28
 8001f38:	f7ff f8c2 	bl	80010c0 <NRF24_read_register>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001f42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f46:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bfcc      	ite	gt
 8001f4e:	2301      	movgt	r3, #1
 8001f50:	2300      	movle	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001f56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f5a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bfcc      	ite	gt
 8001f62:	2301      	movgt	r3, #1
 8001f64:	2300      	movle	r3, #0
 8001f66:	e01d      	b.n	8001fa4 <printRadioSettings+0x6f8>
 8001f68:	08009fdc 	.word	0x08009fdc
 8001f6c:	2000027c 	.word	0x2000027c
 8001f70:	08009ff0 	.word	0x08009ff0
 8001f74:	0800a020 	.word	0x0800a020
 8001f78:	0800a050 	.word	0x0800a050
 8001f7c:	0800a078 	.word	0x0800a078
 8001f80:	0800a0a0 	.word	0x0800a0a0
 8001f84:	0800a0c8 	.word	0x0800a0c8
 8001f88:	0800a0f0 	.word	0x0800a0f0
 8001f8c:	0800a11c 	.word	0x0800a11c
 8001f90:	0800a138 	.word	0x0800a138
 8001f94:	0800a154 	.word	0x0800a154
 8001f98:	0800a170 	.word	0x0800a170
 8001f9c:	0800a18c 	.word	0x0800a18c
 8001fa0:	0800a1a8 	.word	0x0800a1a8
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001fa8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fac:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bfcc      	ite	gt
 8001fb4:	2301      	movgt	r3, #1
 8001fb6:	2300      	movle	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001fbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fc0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bfcc      	ite	gt
 8001fc8:	2301      	movgt	r3, #1
 8001fca:	2300      	movle	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001fd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fd4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bfcc      	ite	gt
 8001fdc:	2301      	movgt	r3, #1
 8001fde:	2300      	movle	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001fe4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fe8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bfcc      	ite	gt
 8001ff0:	2301      	movgt	r3, #1
 8001ff2:	2300      	movle	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f107 0008 	add.w	r0, r7, #8
 8001ffa:	9303      	str	r3, [sp, #12]
 8001ffc:	9402      	str	r4, [sp, #8]
 8001ffe:	9101      	str	r1, [sp, #4]
 8002000:	9200      	str	r2, [sp, #0]
 8002002:	4633      	mov	r3, r6
 8002004:	462a      	mov	r2, r5
 8002006:	4936      	ldr	r1, [pc, #216]	; (80020e0 <printRadioSettings+0x834>)
 8002008:	f004 f9ee 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe f8e5 	bl	80001e0 <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	b29a      	uxth	r2, r3
 800201a:	f107 0108 	add.w	r1, r7, #8
 800201e:	230a      	movs	r3, #10
 8002020:	4830      	ldr	r0, [pc, #192]	; (80020e4 <printRadioSettings+0x838>)
 8002022:	f003 fa8e 	bl	8005542 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002026:	201d      	movs	r0, #29
 8002028:	f7ff f84a 	bl	80010c0 <NRF24_read_register>
 800202c:	4603      	mov	r3, r0
 800202e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002032:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <printRadioSettings+0x7a0>
 800203e:	f107 0308 	add.w	r3, r7, #8
 8002042:	4929      	ldr	r1, [pc, #164]	; (80020e8 <printRadioSettings+0x83c>)
 8002044:	4618      	mov	r0, r3
 8002046:	f004 f9cf 	bl	80063e8 <siprintf>
 800204a:	e005      	b.n	8002058 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	4926      	ldr	r1, [pc, #152]	; (80020ec <printRadioSettings+0x840>)
 8002052:	4618      	mov	r0, r3
 8002054:	f004 f9c8 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002058:	f107 0308 	add.w	r3, r7, #8
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe f8bf 	bl	80001e0 <strlen>
 8002062:	4603      	mov	r3, r0
 8002064:	b29a      	uxth	r2, r3
 8002066:	f107 0108 	add.w	r1, r7, #8
 800206a:	230a      	movs	r3, #10
 800206c:	481d      	ldr	r0, [pc, #116]	; (80020e4 <printRadioSettings+0x838>)
 800206e:	f003 fa68 	bl	8005542 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002072:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <printRadioSettings+0x7e0>
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	491b      	ldr	r1, [pc, #108]	; (80020f0 <printRadioSettings+0x844>)
 8002084:	4618      	mov	r0, r3
 8002086:	f004 f9af 	bl	80063e8 <siprintf>
 800208a:	e005      	b.n	8002098 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4918      	ldr	r1, [pc, #96]	; (80020f4 <printRadioSettings+0x848>)
 8002092:	4618      	mov	r0, r3
 8002094:	f004 f9a8 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe f89f 	bl	80001e0 <strlen>
 80020a2:	4603      	mov	r3, r0
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	f107 0108 	add.w	r1, r7, #8
 80020aa:	230a      	movs	r3, #10
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <printRadioSettings+0x838>)
 80020ae:	f003 fa48 	bl	8005542 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80020b2:	f107 0308 	add.w	r3, r7, #8
 80020b6:	4910      	ldr	r1, [pc, #64]	; (80020f8 <printRadioSettings+0x84c>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 f995 	bl	80063e8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020be:	f107 0308 	add.w	r3, r7, #8
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe f88c 	bl	80001e0 <strlen>
 80020c8:	4603      	mov	r3, r0
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	f107 0108 	add.w	r1, r7, #8
 80020d0:	230a      	movs	r3, #10
 80020d2:	4804      	ldr	r0, [pc, #16]	; (80020e4 <printRadioSettings+0x838>)
 80020d4:	f003 fa35 	bl	8005542 <HAL_UART_Transmit>
}
 80020d8:	bf00      	nop
 80020da:	3774      	adds	r7, #116	; 0x74
 80020dc:	46bd      	mov	sp, r7
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	0800a1c4 	.word	0x0800a1c4
 80020e4:	2000027c 	.word	0x2000027c
 80020e8:	0800a210 	.word	0x0800a210
 80020ec:	0800a228 	.word	0x0800a228
 80020f0:	0800a240 	.word	0x0800a240
 80020f4:	0800a25c 	.word	0x0800a25c
 80020f8:	08009e30 	.word	0x08009e30

080020fc <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80020fc:	b084      	sub	sp, #16
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0
 8002102:	f107 0c08 	add.w	ip, r7, #8
 8002106:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <nrf24_DebugUART_Init+0x2c>)
 800210c:	4618      	mov	r0, r3
 800210e:	f107 0308 	add.w	r3, r7, #8
 8002112:	2244      	movs	r2, #68	; 0x44
 8002114:	4619      	mov	r1, r3
 8002116:	f003 fce7 	bl	8005ae8 <memcpy>
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002122:	b004      	add	sp, #16
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	2000027c 	.word	0x2000027c

0800212c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <MX_GPIO_Init+0x110>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a3c      	ldr	r2, [pc, #240]	; (800223c <MX_GPIO_Init+0x110>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b3a      	ldr	r3, [pc, #232]	; (800223c <MX_GPIO_Init+0x110>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <MX_GPIO_Init+0x110>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a35      	ldr	r2, [pc, #212]	; (800223c <MX_GPIO_Init+0x110>)
 8002168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b33      	ldr	r3, [pc, #204]	; (800223c <MX_GPIO_Init+0x110>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <MX_GPIO_Init+0x110>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a2e      	ldr	r2, [pc, #184]	; (800223c <MX_GPIO_Init+0x110>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b2c      	ldr	r3, [pc, #176]	; (800223c <MX_GPIO_Init+0x110>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b28      	ldr	r3, [pc, #160]	; (800223c <MX_GPIO_Init+0x110>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a27      	ldr	r2, [pc, #156]	; (800223c <MX_GPIO_Init+0x110>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <MX_GPIO_Init+0x110>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021b8:	4821      	ldr	r0, [pc, #132]	; (8002240 <MX_GPIO_Init+0x114>)
 80021ba:	f001 faf5 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24L01_CS_Pin|NRFL24L01_CSN_Pin, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	2118      	movs	r1, #24
 80021c2:	4820      	ldr	r0, [pc, #128]	; (8002244 <MX_GPIO_Init+0x118>)
 80021c4:	f001 faf0 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	4817      	ldr	r0, [pc, #92]	; (8002240 <MX_GPIO_Init+0x114>)
 80021e2:	f001 f95d 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24L01_IRQ_Pin;
 80021e6:	2304      	movs	r3, #4
 80021e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24L01_IRQ_GPIO_Port, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4812      	ldr	r0, [pc, #72]	; (8002244 <MX_GPIO_Init+0x118>)
 80021fa:	f001 f951 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NRF24L01_CS_Pin|NRFL24L01_CSN_Pin;
 80021fe:	2318      	movs	r3, #24
 8002200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002202:	2301      	movs	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <MX_GPIO_Init+0x118>)
 8002216:	f001 f943 	bl	80034a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 800221a:	2320      	movs	r3, #32
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4806      	ldr	r0, [pc, #24]	; (8002248 <MX_GPIO_Init+0x11c>)
 800222e:	f001 f937 	bl	80034a0 <HAL_GPIO_Init>

}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40020800 	.word	0x40020800
 8002244:	40020000 	.word	0x40020000
 8002248:	40020400 	.word	0x40020400

0800224c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_I2C1_Init+0x50>)
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <MX_I2C1_Init+0x54>)
 8002254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_I2C1_Init+0x50>)
 8002258:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <MX_I2C1_Init+0x58>)
 800225a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_I2C1_Init+0x50>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_I2C1_Init+0x50>)
 8002264:	2200      	movs	r2, #0
 8002266:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_I2C1_Init+0x50>)
 800226a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800226e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <MX_I2C1_Init+0x50>)
 8002272:	2200      	movs	r2, #0
 8002274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_I2C1_Init+0x50>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <MX_I2C1_Init+0x50>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_I2C1_Init+0x50>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_I2C1_Init+0x50>)
 800228a:	f001 fac1 	bl	8003810 <HAL_I2C_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002294:	f000 fa92 	bl	80027bc <Error_Handler>
  }

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2000072c 	.word	0x2000072c
 80022a0:	40005400 	.word	0x40005400
 80022a4:	00061a80 	.word	0x00061a80

080022a8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_I2C3_Init+0x50>)
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <MX_I2C3_Init+0x54>)
 80022b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_I2C3_Init+0x50>)
 80022b4:	4a12      	ldr	r2, [pc, #72]	; (8002300 <MX_I2C3_Init+0x58>)
 80022b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_I2C3_Init+0x50>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_I2C3_Init+0x50>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_I2C3_Init+0x50>)
 80022c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <MX_I2C3_Init+0x50>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_I2C3_Init+0x50>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <MX_I2C3_Init+0x50>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_I2C3_Init+0x50>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <MX_I2C3_Init+0x50>)
 80022e6:	f001 fa93 	bl	8003810 <HAL_I2C_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80022f0:	f000 fa64 	bl	80027bc <Error_Handler>
  }

}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	200006d8 	.word	0x200006d8
 80022fc:	40005c00 	.word	0x40005c00
 8002300:	000186a0 	.word	0x000186a0

08002304 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08c      	sub	sp, #48	; 0x30
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a41      	ldr	r2, [pc, #260]	; (8002428 <HAL_I2C_MspInit+0x124>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d12c      	bne.n	8002380 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	4b40      	ldr	r3, [pc, #256]	; (800242c <HAL_I2C_MspInit+0x128>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a3f      	ldr	r2, [pc, #252]	; (800242c <HAL_I2C_MspInit+0x128>)
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_I2C_MspInit+0x128>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002342:	23c0      	movs	r3, #192	; 0xc0
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002346:	2312      	movs	r3, #18
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800234a:	2301      	movs	r3, #1
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002352:	2304      	movs	r3, #4
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	4834      	ldr	r0, [pc, #208]	; (8002430 <HAL_I2C_MspInit+0x12c>)
 800235e:	f001 f89f 	bl	80034a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	4b31      	ldr	r3, [pc, #196]	; (800242c <HAL_I2C_MspInit+0x128>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a30      	ldr	r2, [pc, #192]	; (800242c <HAL_I2C_MspInit+0x128>)
 800236c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
 8002372:	4b2e      	ldr	r3, [pc, #184]	; (800242c <HAL_I2C_MspInit+0x128>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800237e:	e04f      	b.n	8002420 <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2b      	ldr	r2, [pc, #172]	; (8002434 <HAL_I2C_MspInit+0x130>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d14a      	bne.n	8002420 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_I2C_MspInit+0x128>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a26      	ldr	r2, [pc, #152]	; (800242c <HAL_I2C_MspInit+0x128>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_I2C_MspInit+0x128>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_I2C_MspInit+0x128>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a1f      	ldr	r2, [pc, #124]	; (800242c <HAL_I2C_MspInit+0x128>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_I2C_MspInit+0x128>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c8:	2312      	movs	r3, #18
 80023ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023d4:	2304      	movs	r3, #4
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	4816      	ldr	r0, [pc, #88]	; (8002438 <HAL_I2C_MspInit+0x134>)
 80023e0:	f001 f85e 	bl	80034a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023e4:	2310      	movs	r3, #16
 80023e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e8:	2312      	movs	r3, #18
 80023ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80023f4:	2309      	movs	r3, #9
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f8:	f107 031c 	add.w	r3, r7, #28
 80023fc:	4619      	mov	r1, r3
 80023fe:	480c      	ldr	r0, [pc, #48]	; (8002430 <HAL_I2C_MspInit+0x12c>)
 8002400:	f001 f84e 	bl	80034a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_I2C_MspInit+0x128>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	4a07      	ldr	r2, [pc, #28]	; (800242c <HAL_I2C_MspInit+0x128>)
 800240e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002412:	6413      	str	r3, [r2, #64]	; 0x40
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_I2C_MspInit+0x128>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
}
 8002420:	bf00      	nop
 8002422:	3730      	adds	r7, #48	; 0x30
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40005400 	.word	0x40005400
 800242c:	40023800 	.word	0x40023800
 8002430:	40020400 	.word	0x40020400
 8002434:	40005c00 	.word	0x40005c00
 8002438:	40020000 	.word	0x40020000

0800243c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800243c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243e:	b099      	sub	sp, #100	; 0x64
 8002440:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002442:	f000 feb1 	bl	80031a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002446:	f000 f94f 	bl	80026e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800244a:	f7ff fe6f 	bl	800212c <MX_GPIO_Init>
  MX_I2C1_Init();
 800244e:	f7ff fefd 	bl	800224c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002452:	f7ff ff29 	bl	80022a8 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002456:	f000 f9b9 	bl	80027cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800245a:	f000 fe09 	bl	8003070 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

/*********OLED init************/
ssd1306_Init(&hi2c3);
 800245e:	488f      	ldr	r0, [pc, #572]	; (800269c <main+0x260>)
 8002460:	f000 fa4a 	bl	80028f8 <ssd1306_Init>

/***********NRF Ayarlari****************/
NRF24_begin(GPIOA, NRFL24L01_CSN_Pin, NRF24L01_CS_Pin, hspi1);
 8002464:	4c8e      	ldr	r4, [pc, #568]	; (80026a0 <main+0x264>)
 8002466:	4668      	mov	r0, sp
 8002468:	1d23      	adds	r3, r4, #4
 800246a:	2254      	movs	r2, #84	; 0x54
 800246c:	4619      	mov	r1, r3
 800246e:	f003 fb3b 	bl	8005ae8 <memcpy>
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	2208      	movs	r2, #8
 8002476:	2110      	movs	r1, #16
 8002478:	488a      	ldr	r0, [pc, #552]	; (80026a4 <main+0x268>)
 800247a:	f7fe ff09 	bl	8001290 <NRF24_begin>
nrf24_DebugUART_Init(huart1);
 800247e:	4e8a      	ldr	r6, [pc, #552]	; (80026a8 <main+0x26c>)
 8002480:	466d      	mov	r5, sp
 8002482:	f106 0410 	add.w	r4, r6, #16
 8002486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800248e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	602b      	str	r3, [r5, #0]
 8002496:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800249a:	f7ff fe2f 	bl	80020fc <nrf24_DebugUART_Init>
NRF24_setAutoAck(false);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7ff f8e6 	bl	8001670 <NRF24_setAutoAck>
NRF24_setChannel(34);
 80024a4:	2022      	movs	r0, #34	; 0x22
 80024a6:	f7ff f88a 	bl	80015be <NRF24_setChannel>
NRF24_openReadingPipe(1, RxpipeAddrs);
 80024aa:	4b80      	ldr	r3, [pc, #512]	; (80026ac <main+0x270>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	2001      	movs	r0, #1
 80024b2:	f7ff f81b 	bl	80014ec <NRF24_openReadingPipe>
NRF24_startListening();
 80024b6:	f7fe ffcb 	bl	8001450 <NRF24_startListening>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(NRF24_available())
 80024ba:	f7fe ffef 	bl	800149c <NRF24_available>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d02f      	beq.n	8002524 <main+0xe8>
	  {
		  NRF24_read(RxData, 32);
 80024c4:	2120      	movs	r1, #32
 80024c6:	487a      	ldr	r0, [pc, #488]	; (80026b0 <main+0x274>)
 80024c8:	f7fe fff0 	bl	80014ac <NRF24_read>
	  	  HAL_UART_Transmit(&huart1, (uint8_t *)RxData, 32, 10);
 80024cc:	230a      	movs	r3, #10
 80024ce:	2220      	movs	r2, #32
 80024d0:	4977      	ldr	r1, [pc, #476]	; (80026b0 <main+0x274>)
 80024d2:	4875      	ldr	r0, [pc, #468]	; (80026a8 <main+0x26c>)
 80024d4:	f003 f835 	bl	8005542 <HAL_UART_Transmit>

	  	  if(RxData[1] == 0xFF && RxData[10] == 0XFF)
 80024d8:	4b75      	ldr	r3, [pc, #468]	; (80026b0 <main+0x274>)
 80024da:	785b      	ldrb	r3, [r3, #1]
 80024dc:	2bff      	cmp	r3, #255	; 0xff
 80024de:	d121      	bne.n	8002524 <main+0xe8>
 80024e0:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <main+0x274>)
 80024e2:	7a9b      	ldrb	r3, [r3, #10]
 80024e4:	2bff      	cmp	r3, #255	; 0xff
 80024e6:	d11d      	bne.n	8002524 <main+0xe8>
	  	  {
	  		  for(uint8_t i = 1 ; i<11 ; i++)
 80024e8:	2301      	movs	r3, #1
 80024ea:	71fb      	strb	r3, [r7, #7]
 80024ec:	e00b      	b.n	8002506 <main+0xca>
	  		  {
	  			  RX_Check = RX_Check + RxData[i];
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	4a6f      	ldr	r2, [pc, #444]	; (80026b0 <main+0x274>)
 80024f2:	5cd2      	ldrb	r2, [r2, r3]
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <main+0x278>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <main+0x278>)
 80024fe:	701a      	strb	r2, [r3, #0]
	  		  for(uint8_t i = 1 ; i<11 ; i++)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	3301      	adds	r3, #1
 8002504:	71fb      	strb	r3, [r7, #7]
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b0a      	cmp	r3, #10
 800250a:	d9f0      	bls.n	80024ee <main+0xb2>
	  		  }
	  		  if(RX_Check == RxData[0])
 800250c:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <main+0x274>)
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <main+0x278>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d105      	bne.n	8002524 <main+0xe8>
	  		  {
	  			  Data_Correct = true ;
 8002518:	4b67      	ldr	r3, [pc, #412]	; (80026b8 <main+0x27c>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
	  			  RX_Check     = 0    ;
 800251e:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <main+0x278>)
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }

	  }
	  if(Data_Correct == true) /*if the RX data is suitable for data structure */
 8002524:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <main+0x27c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0c6      	beq.n	80024ba <main+0x7e>
	  {
		  /****SET THE RX data to relevant buffer*****/
		  buff_pitch[0] = RxData[2] ;
 800252c:	4b60      	ldr	r3, [pc, #384]	; (80026b0 <main+0x274>)
 800252e:	789a      	ldrb	r2, [r3, #2]
 8002530:	4b62      	ldr	r3, [pc, #392]	; (80026bc <main+0x280>)
 8002532:	701a      	strb	r2, [r3, #0]
		  buff_pitch[1] = RxData[3] ;
 8002534:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <main+0x274>)
 8002536:	78da      	ldrb	r2, [r3, #3]
 8002538:	4b60      	ldr	r3, [pc, #384]	; (80026bc <main+0x280>)
 800253a:	705a      	strb	r2, [r3, #1]
		  buff_pitch[2] = RxData[4] ;
 800253c:	4b5c      	ldr	r3, [pc, #368]	; (80026b0 <main+0x274>)
 800253e:	791a      	ldrb	r2, [r3, #4]
 8002540:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <main+0x280>)
 8002542:	709a      	strb	r2, [r3, #2]
		  buff_pitch[3] = RxData[5] ;
 8002544:	4b5a      	ldr	r3, [pc, #360]	; (80026b0 <main+0x274>)
 8002546:	795a      	ldrb	r2, [r3, #5]
 8002548:	4b5c      	ldr	r3, [pc, #368]	; (80026bc <main+0x280>)
 800254a:	70da      	strb	r2, [r3, #3]

		  buff_roll[0]  = RxData[6] ;
 800254c:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <main+0x274>)
 800254e:	799a      	ldrb	r2, [r3, #6]
 8002550:	4b5b      	ldr	r3, [pc, #364]	; (80026c0 <main+0x284>)
 8002552:	701a      	strb	r2, [r3, #0]
		  buff_roll[1]  = RxData[7] ;
 8002554:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <main+0x274>)
 8002556:	79da      	ldrb	r2, [r3, #7]
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <main+0x284>)
 800255a:	705a      	strb	r2, [r3, #1]
		  buff_roll[2]  = RxData[8] ;
 800255c:	4b54      	ldr	r3, [pc, #336]	; (80026b0 <main+0x274>)
 800255e:	7a1a      	ldrb	r2, [r3, #8]
 8002560:	4b57      	ldr	r3, [pc, #348]	; (80026c0 <main+0x284>)
 8002562:	709a      	strb	r2, [r3, #2]
		  buff_roll[3]  = RxData[9] ;
 8002564:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <main+0x274>)
 8002566:	7a5a      	ldrb	r2, [r3, #9]
 8002568:	4b55      	ldr	r3, [pc, #340]	; (80026c0 <main+0x284>)
 800256a:	70da      	strb	r2, [r3, #3]

		  Pitch = atof(buff_pitch) ;
 800256c:	4853      	ldr	r0, [pc, #332]	; (80026bc <main+0x280>)
 800256e:	f003 fa8d 	bl	8005a8c <atof>
 8002572:	ec53 2b10 	vmov	r2, r3, d0
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	f7fe fb3d 	bl	8000bf8 <__aeabi_d2f>
 800257e:	4603      	mov	r3, r0
 8002580:	4a50      	ldr	r2, [pc, #320]	; (80026c4 <main+0x288>)
 8002582:	6013      	str	r3, [r2, #0]
		  Roll  = atof(buff_roll)  ;
 8002584:	484e      	ldr	r0, [pc, #312]	; (80026c0 <main+0x284>)
 8002586:	f003 fa81 	bl	8005a8c <atof>
 800258a:	ec53 2b10 	vmov	r2, r3, d0
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	f7fe fb31 	bl	8000bf8 <__aeabi_d2f>
 8002596:	4603      	mov	r3, r0
 8002598:	4a4b      	ldr	r2, [pc, #300]	; (80026c8 <main+0x28c>)
 800259a:	6013      	str	r3, [r2, #0]

		  /*****write the data to OLED*******/
		  ssd1306_Fill(Black);
 800259c:	2000      	movs	r0, #0
 800259e:	f000 facb 	bl	8002b38 <ssd1306_Fill>
		  ssd1306_SetCursor(0, 0);
 80025a2:	2100      	movs	r1, #0
 80025a4:	2000      	movs	r0, #0
 80025a6:	f000 fc23 	bl	8002df0 <ssd1306_SetCursor>
		  ssd1306_WriteString("ON  :", Font_10x14, White);
 80025aa:	4a48      	ldr	r2, [pc, #288]	; (80026cc <main+0x290>)
 80025ac:	2301      	movs	r3, #1
 80025ae:	ca06      	ldmia	r2, {r1, r2}
 80025b0:	4847      	ldr	r0, [pc, #284]	; (80026d0 <main+0x294>)
 80025b2:	f000 fbf7 	bl	8002da4 <ssd1306_WriteString>
		  ssd1306_SetCursor(0, 16);
 80025b6:	2110      	movs	r1, #16
 80025b8:	2000      	movs	r0, #0
 80025ba:	f000 fc19 	bl	8002df0 <ssd1306_SetCursor>
		  ssd1306_WriteString("ARKA:", Font_10x14, White);
 80025be:	4a43      	ldr	r2, [pc, #268]	; (80026cc <main+0x290>)
 80025c0:	2301      	movs	r3, #1
 80025c2:	ca06      	ldmia	r2, {r1, r2}
 80025c4:	4843      	ldr	r0, [pc, #268]	; (80026d4 <main+0x298>)
 80025c6:	f000 fbed 	bl	8002da4 <ssd1306_WriteString>
		  ssd1306_SetCursor(0, 32);
 80025ca:	2120      	movs	r1, #32
 80025cc:	2000      	movs	r0, #0
 80025ce:	f000 fc0f 	bl	8002df0 <ssd1306_SetCursor>
		  ssd1306_WriteString("SAG :", Font_10x14, White);
 80025d2:	4a3e      	ldr	r2, [pc, #248]	; (80026cc <main+0x290>)
 80025d4:	2301      	movs	r3, #1
 80025d6:	ca06      	ldmia	r2, {r1, r2}
 80025d8:	483f      	ldr	r0, [pc, #252]	; (80026d8 <main+0x29c>)
 80025da:	f000 fbe3 	bl	8002da4 <ssd1306_WriteString>
		  ssd1306_SetCursor(0, 48);
 80025de:	2130      	movs	r1, #48	; 0x30
 80025e0:	2000      	movs	r0, #0
 80025e2:	f000 fc05 	bl	8002df0 <ssd1306_SetCursor>
		  ssd1306_WriteString("SOL :", Font_10x14, White);
 80025e6:	4a39      	ldr	r2, [pc, #228]	; (80026cc <main+0x290>)
 80025e8:	2301      	movs	r3, #1
 80025ea:	ca06      	ldmia	r2, {r1, r2}
 80025ec:	483b      	ldr	r0, [pc, #236]	; (80026dc <main+0x2a0>)
 80025ee:	f000 fbd9 	bl	8002da4 <ssd1306_WriteString>

		  ssd1306_SetCursor(78, 0);
 80025f2:	2100      	movs	r1, #0
 80025f4:	204e      	movs	r0, #78	; 0x4e
 80025f6:	f000 fbfb 	bl	8002df0 <ssd1306_SetCursor>
		  ssd1306_WriteString(buff_pitch, Font_10x14, White);
 80025fa:	4a34      	ldr	r2, [pc, #208]	; (80026cc <main+0x290>)
 80025fc:	2301      	movs	r3, #1
 80025fe:	ca06      	ldmia	r2, {r1, r2}
 8002600:	482e      	ldr	r0, [pc, #184]	; (80026bc <main+0x280>)
 8002602:	f000 fbcf 	bl	8002da4 <ssd1306_WriteString>
		  sprintf(buff_pitch,"%0.0f",(Pitch*-1.0F));
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <main+0x288>)
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	eef1 7a67 	vneg.f32	s15, s15
 8002610:	ee17 3a90 	vmov	r3, s15
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ff9f 	bl	8000558 <__aeabi_f2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4930      	ldr	r1, [pc, #192]	; (80026e0 <main+0x2a4>)
 8002620:	4826      	ldr	r0, [pc, #152]	; (80026bc <main+0x280>)
 8002622:	f003 fee1 	bl	80063e8 <siprintf>
		  ssd1306_SetCursor(78, 16);
 8002626:	2110      	movs	r1, #16
 8002628:	204e      	movs	r0, #78	; 0x4e
 800262a:	f000 fbe1 	bl	8002df0 <ssd1306_SetCursor>
		  ssd1306_WriteString(buff_pitch, Font_10x14, White);
 800262e:	4a27      	ldr	r2, [pc, #156]	; (80026cc <main+0x290>)
 8002630:	2301      	movs	r3, #1
 8002632:	ca06      	ldmia	r2, {r1, r2}
 8002634:	4821      	ldr	r0, [pc, #132]	; (80026bc <main+0x280>)
 8002636:	f000 fbb5 	bl	8002da4 <ssd1306_WriteString>


		  ssd1306_SetCursor(78, 32);
 800263a:	2120      	movs	r1, #32
 800263c:	204e      	movs	r0, #78	; 0x4e
 800263e:	f000 fbd7 	bl	8002df0 <ssd1306_SetCursor>
		  ssd1306_WriteString(buff_roll, Font_10x14, White);
 8002642:	4a22      	ldr	r2, [pc, #136]	; (80026cc <main+0x290>)
 8002644:	2301      	movs	r3, #1
 8002646:	ca06      	ldmia	r2, {r1, r2}
 8002648:	481d      	ldr	r0, [pc, #116]	; (80026c0 <main+0x284>)
 800264a:	f000 fbab 	bl	8002da4 <ssd1306_WriteString>

		  Roll = Roll * (-1.0f);
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <main+0x28c>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	eef1 7a67 	vneg.f32	s15, s15
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <main+0x28c>)
 800265a:	edc3 7a00 	vstr	s15, [r3]
		  sprintf(buff_roll,"%0.0f",Roll);
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <main+0x28c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff78 	bl	8000558 <__aeabi_f2d>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	491c      	ldr	r1, [pc, #112]	; (80026e0 <main+0x2a4>)
 800266e:	4814      	ldr	r0, [pc, #80]	; (80026c0 <main+0x284>)
 8002670:	f003 feba 	bl	80063e8 <siprintf>
		  ssd1306_SetCursor(78, 48);
 8002674:	2130      	movs	r1, #48	; 0x30
 8002676:	204e      	movs	r0, #78	; 0x4e
 8002678:	f000 fbba 	bl	8002df0 <ssd1306_SetCursor>
		  ssd1306_WriteString(buff_roll, Font_10x14, White);
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <main+0x290>)
 800267e:	2301      	movs	r3, #1
 8002680:	ca06      	ldmia	r2, {r1, r2}
 8002682:	480f      	ldr	r0, [pc, #60]	; (80026c0 <main+0x284>)
 8002684:	f000 fb8e 	bl	8002da4 <ssd1306_WriteString>



		  ssd1306_UpdateScreen(&hi2c3);
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <main+0x260>)
 800268a:	f000 fa79 	bl	8002b80 <ssd1306_UpdateScreen>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800268e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002692:	4814      	ldr	r0, [pc, #80]	; (80026e4 <main+0x2a8>)
 8002694:	f001 f8a1 	bl	80037da <HAL_GPIO_TogglePin>
	  if(NRF24_available())
 8002698:	e70f      	b.n	80024ba <main+0x7e>
 800269a:	bf00      	nop
 800269c:	200006d8 	.word	0x200006d8
 80026a0:	200007c4 	.word	0x200007c4
 80026a4:	40020000 	.word	0x40020000
 80026a8:	2000081c 	.word	0x2000081c
 80026ac:	20000008 	.word	0x20000008
 80026b0:	20000788 	.word	0x20000788
 80026b4:	200002c0 	.word	0x200002c0
 80026b8:	200002c1 	.word	0x200002c1
 80026bc:	200007bc 	.word	0x200007bc
 80026c0:	20000784 	.word	0x20000784
 80026c4:	200007c0 	.word	0x200007c0
 80026c8:	20000780 	.word	0x20000780
 80026cc:	20000000 	.word	0x20000000
 80026d0:	0800a374 	.word	0x0800a374
 80026d4:	0800a37c 	.word	0x0800a37c
 80026d8:	0800a384 	.word	0x0800a384
 80026dc:	0800a38c 	.word	0x0800a38c
 80026e0:	0800a394 	.word	0x0800a394
 80026e4:	40020800 	.word	0x40020800

080026e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b094      	sub	sp, #80	; 0x50
 80026ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ee:	f107 0320 	add.w	r3, r7, #32
 80026f2:	2230      	movs	r2, #48	; 0x30
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 fa04 	bl	8005b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <SystemClock_Config+0xcc>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <SystemClock_Config+0xcc>)
 8002716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271a:	6413      	str	r3, [r2, #64]	; 0x40
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <SystemClock_Config+0xcc>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <SystemClock_Config+0xd0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002734:	4a20      	ldr	r2, [pc, #128]	; (80027b8 <SystemClock_Config+0xd0>)
 8002736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <SystemClock_Config+0xd0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002748:	2301      	movs	r3, #1
 800274a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800274c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002752:	2302      	movs	r3, #2
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800275c:	2319      	movs	r3, #25
 800275e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002760:	23a8      	movs	r3, #168	; 0xa8
 8002762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002764:	2302      	movs	r3, #2
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002768:	2304      	movs	r3, #4
 800276a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800276c:	f107 0320 	add.w	r3, r7, #32
 8002770:	4618      	mov	r0, r3
 8002772:	f001 fca9 	bl	80040c8 <HAL_RCC_OscConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800277c:	f000 f81e 	bl	80027bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002780:	230f      	movs	r3, #15
 8002782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002784:	2302      	movs	r3, #2
 8002786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800278c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002796:	f107 030c 	add.w	r3, r7, #12
 800279a:	2102      	movs	r1, #2
 800279c:	4618      	mov	r0, r3
 800279e:	f001 ff0b 	bl	80045b8 <HAL_RCC_ClockConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80027a8:	f000 f808 	bl	80027bc <Error_Handler>
  }
}
 80027ac:	bf00      	nop
 80027ae:	3750      	adds	r7, #80	; 0x50
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40007000 	.word	0x40007000

080027bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <MX_SPI1_Init+0x64>)
 80027d2:	4a18      	ldr	r2, [pc, #96]	; (8002834 <MX_SPI1_Init+0x68>)
 80027d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <MX_SPI1_Init+0x64>)
 80027d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <MX_SPI1_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027e4:	4b12      	ldr	r3, [pc, #72]	; (8002830 <MX_SPI1_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <MX_SPI1_Init+0x64>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <MX_SPI1_Init+0x64>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <MX_SPI1_Init+0x64>)
 80027f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <MX_SPI1_Init+0x64>)
 8002800:	2230      	movs	r2, #48	; 0x30
 8002802:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <MX_SPI1_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <MX_SPI1_Init+0x64>)
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <MX_SPI1_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <MX_SPI1_Init+0x64>)
 8002818:	220a      	movs	r2, #10
 800281a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <MX_SPI1_Init+0x64>)
 800281e:	f002 f89b 	bl	8004958 <HAL_SPI_Init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002828:	f7ff ffc8 	bl	80027bc <Error_Handler>
  }

}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200007c4 	.word	0x200007c4
 8002834:	40013000 	.word	0x40013000

08002838 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a19      	ldr	r2, [pc, #100]	; (80028bc <HAL_SPI_MspInit+0x84>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d12b      	bne.n	80028b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b18      	ldr	r3, [pc, #96]	; (80028c0 <HAL_SPI_MspInit+0x88>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <HAL_SPI_MspInit+0x88>)
 8002864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_SPI_MspInit+0x88>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_SPI_MspInit+0x88>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a10      	ldr	r2, [pc, #64]	; (80028c0 <HAL_SPI_MspInit+0x88>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_SPI_MspInit+0x88>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002892:	23e0      	movs	r3, #224	; 0xe0
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289e:	2303      	movs	r3, #3
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028a2:	2305      	movs	r3, #5
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	; (80028c4 <HAL_SPI_MspInit+0x8c>)
 80028ae:	f000 fdf7 	bl	80034a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028b2:	bf00      	nop
 80028b4:	3728      	adds	r7, #40	; 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40013000 	.word	0x40013000
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020000 	.word	0x40020000

080028c8 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af04      	add	r7, sp, #16
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80028d4:	230a      	movs	r3, #10
 80028d6:	9302      	str	r3, [sp, #8]
 80028d8:	2301      	movs	r3, #1
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	1cfb      	adds	r3, r7, #3
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2301      	movs	r3, #1
 80028e2:	2200      	movs	r2, #0
 80028e4:	2178      	movs	r1, #120	; 0x78
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f001 f8d6 	bl	8003a98 <HAL_I2C_Mem_Write>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	f000 fcc3 	bl	800328c <HAL_Delay>
    int status = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800290a:	21ae      	movs	r1, #174	; 0xae
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ffdb 	bl	80028c8 <ssd1306_WriteCommand>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 800291c:	2120      	movs	r1, #32
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ffd2 	bl	80028c8 <ssd1306_WriteCommand>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800292e:	2110      	movs	r1, #16
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ffc9 	bl	80028c8 <ssd1306_WriteCommand>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8002940:	21b0      	movs	r1, #176	; 0xb0
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ffc0 	bl	80028c8 <ssd1306_WriteCommand>
 8002948:	4603      	mov	r3, r0
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8002952:	21c8      	movs	r1, #200	; 0xc8
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ffb7 	bl	80028c8 <ssd1306_WriteCommand>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4413      	add	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8002964:	2100      	movs	r1, #0
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ffae 	bl	80028c8 <ssd1306_WriteCommand>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8002976:	2110      	movs	r1, #16
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ffa5 	bl	80028c8 <ssd1306_WriteCommand>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4413      	add	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8002988:	2140      	movs	r1, #64	; 0x40
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff9c 	bl	80028c8 <ssd1306_WriteCommand>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800299a:	2181      	movs	r1, #129	; 0x81
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff93 	bl	80028c8 <ssd1306_WriteCommand>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 80029ac:	21ff      	movs	r1, #255	; 0xff
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff8a 	bl	80028c8 <ssd1306_WriteCommand>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 80029be:	21a1      	movs	r1, #161	; 0xa1
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff ff81 	bl	80028c8 <ssd1306_WriteCommand>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4413      	add	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80029d0:	21a6      	movs	r1, #166	; 0xa6
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ff78 	bl	80028c8 <ssd1306_WriteCommand>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4413      	add	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80029e2:	21a8      	movs	r1, #168	; 0xa8
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff6f 	bl	80028c8 <ssd1306_WriteCommand>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80029f4:	213f      	movs	r1, #63	; 0x3f
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff ff66 	bl	80028c8 <ssd1306_WriteCommand>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a06:	21a4      	movs	r1, #164	; 0xa4
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff5d 	bl	80028c8 <ssd1306_WriteCommand>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4413      	add	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8002a18:	21d3      	movs	r1, #211	; 0xd3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ff54 	bl	80028c8 <ssd1306_WriteCommand>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ff4b 	bl	80028c8 <ssd1306_WriteCommand>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461a      	mov	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4413      	add	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8002a3c:	21d5      	movs	r1, #213	; 0xd5
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ff42 	bl	80028c8 <ssd1306_WriteCommand>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8002a4e:	21f0      	movs	r1, #240	; 0xf0
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff39 	bl	80028c8 <ssd1306_WriteCommand>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8002a60:	21d9      	movs	r1, #217	; 0xd9
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ff30 	bl	80028c8 <ssd1306_WriteCommand>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8002a72:	2122      	movs	r1, #34	; 0x22
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff27 	bl	80028c8 <ssd1306_WriteCommand>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4413      	add	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8002a84:	21da      	movs	r1, #218	; 0xda
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff ff1e 	bl	80028c8 <ssd1306_WriteCommand>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8002a96:	2112      	movs	r1, #18
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff15 	bl	80028c8 <ssd1306_WriteCommand>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8002aa8:	21db      	movs	r1, #219	; 0xdb
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ff0c 	bl	80028c8 <ssd1306_WriteCommand>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8002aba:	2120      	movs	r1, #32
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff03 	bl	80028c8 <ssd1306_WriteCommand>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4413      	add	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8002acc:	218d      	movs	r1, #141	; 0x8d
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fefa 	bl	80028c8 <ssd1306_WriteCommand>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8002ade:	2114      	movs	r1, #20
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff fef1 	bl	80028c8 <ssd1306_WriteCommand>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4413      	add	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8002af0:	21af      	movs	r1, #175	; 0xaf
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff fee8 	bl	80028c8 <ssd1306_WriteCommand>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <ssd1306_Init+0x214>
        return 1;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e00f      	b.n	8002b2c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f000 f813 	bl	8002b38 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f834 	bl	8002b80 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <ssd1306_Init+0x23c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <ssd1306_Init+0x23c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <ssd1306_Init+0x23c>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	715a      	strb	r2, [r3, #5]

    return 0;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	200006c4 	.word	0x200006c4

08002b38 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	e00d      	b.n	8002b64 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <ssd1306_Fill+0x1a>
 8002b4e:	2100      	movs	r1, #0
 8002b50:	e000      	b.n	8002b54 <ssd1306_Fill+0x1c>
 8002b52:	21ff      	movs	r1, #255	; 0xff
 8002b54:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <ssd1306_Fill+0x44>)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	460a      	mov	r2, r1
 8002b5c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3301      	adds	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6a:	d3ed      	bcc.n	8002b48 <ssd1306_Fill+0x10>
    }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200002c4 	.word	0x200002c4

08002b80 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af04      	add	r7, sp, #16
 8002b86:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	e020      	b.n	8002bd0 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	3b50      	subs	r3, #80	; 0x50
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fe96 	bl	80028c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fe92 	bl	80028c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fe8e 	bl	80028c8 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	01db      	lsls	r3, r3, #7
 8002bb0:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <ssd1306_UpdateScreen+0x60>)
 8002bb2:	4413      	add	r3, r2
 8002bb4:	2264      	movs	r2, #100	; 0x64
 8002bb6:	9202      	str	r2, [sp, #8]
 8002bb8:	2280      	movs	r2, #128	; 0x80
 8002bba:	9201      	str	r2, [sp, #4]
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	2178      	movs	r1, #120	; 0x78
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 ff67 	bl	8003a98 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b07      	cmp	r3, #7
 8002bd4:	d9db      	bls.n	8002b8e <ssd1306_UpdateScreen+0xe>
    }
}
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200002c4 	.word	0x200002c4

08002be4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	71bb      	strb	r3, [r7, #6]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db48      	blt.n	8002c90 <ssd1306_DrawPixel+0xac>
 8002bfe:	79bb      	ldrb	r3, [r7, #6]
 8002c00:	2b3f      	cmp	r3, #63	; 0x3f
 8002c02:	d845      	bhi.n	8002c90 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <ssd1306_DrawPixel+0xb8>)
 8002c06:	791b      	ldrb	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8002c0c:	797b      	ldrb	r3, [r7, #5]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8002c1a:	797b      	ldrb	r3, [r7, #5]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d11a      	bne.n	8002c56 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002c20:	79fa      	ldrb	r2, [r7, #7]
 8002c22:	79bb      	ldrb	r3, [r7, #6]
 8002c24:	08db      	lsrs	r3, r3, #3
 8002c26:	b2d8      	uxtb	r0, r3
 8002c28:	4603      	mov	r3, r0
 8002c2a:	01db      	lsls	r3, r3, #7
 8002c2c:	4413      	add	r3, r2
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <ssd1306_DrawPixel+0xbc>)
 8002c30:	5cd3      	ldrb	r3, [r2, r3]
 8002c32:	b25a      	sxtb	r2, r3
 8002c34:	79bb      	ldrb	r3, [r7, #6]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	b259      	sxtb	r1, r3
 8002c46:	79fa      	ldrb	r2, [r7, #7]
 8002c48:	4603      	mov	r3, r0
 8002c4a:	01db      	lsls	r3, r3, #7
 8002c4c:	4413      	add	r3, r2
 8002c4e:	b2c9      	uxtb	r1, r1
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <ssd1306_DrawPixel+0xbc>)
 8002c52:	54d1      	strb	r1, [r2, r3]
 8002c54:	e01d      	b.n	8002c92 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002c56:	79fa      	ldrb	r2, [r7, #7]
 8002c58:	79bb      	ldrb	r3, [r7, #6]
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	b2d8      	uxtb	r0, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	01db      	lsls	r3, r3, #7
 8002c62:	4413      	add	r3, r2
 8002c64:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <ssd1306_DrawPixel+0xbc>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	b25a      	sxtb	r2, r3
 8002c6a:	79bb      	ldrb	r3, [r7, #6]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	b25b      	sxtb	r3, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	b259      	sxtb	r1, r3
 8002c80:	79fa      	ldrb	r2, [r7, #7]
 8002c82:	4603      	mov	r3, r0
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	4413      	add	r3, r2
 8002c88:	b2c9      	uxtb	r1, r1
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <ssd1306_DrawPixel+0xbc>)
 8002c8c:	54d1      	strb	r1, [r2, r3]
 8002c8e:	e000      	b.n	8002c92 <ssd1306_DrawPixel+0xae>
        return;
 8002c90:	bf00      	nop
    }
}
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	200006c4 	.word	0x200006c4
 8002ca0:	200002c4 	.word	0x200002c4

08002ca4 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4604      	mov	r4, r0
 8002cac:	1d38      	adds	r0, r7, #4
 8002cae:	e880 0006 	stmia.w	r0, {r1, r2}
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002cbc:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <ssd1306_WriteChar+0xfc>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	793b      	ldrb	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8002cc8:	dc06      	bgt.n	8002cd8 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002cca:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <ssd1306_WriteChar+0xfc>)
 8002ccc:	885b      	ldrh	r3, [r3, #2]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	797b      	ldrb	r3, [r7, #5]
 8002cd2:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002cd4:	2b3f      	cmp	r3, #63	; 0x3f
 8002cd6:	dd01      	ble.n	8002cdc <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e05d      	b.n	8002d98 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	e04c      	b.n	8002d7c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	3b20      	subs	r3, #32
 8002ce8:	7979      	ldrb	r1, [r7, #5]
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4619      	mov	r1, r3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	440b      	add	r3, r1
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e034      	b.n	8002d6c <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d012      	beq.n	8002d38 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002d12:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <ssd1306_WriteChar+0xfc>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	b2d8      	uxtb	r0, r3
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <ssd1306_WriteChar+0xfc>)
 8002d22:	885b      	ldrh	r3, [r3, #2]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	7bba      	ldrb	r2, [r7, #14]
 8002d30:	4619      	mov	r1, r3
 8002d32:	f7ff ff57 	bl	8002be4 <ssd1306_DrawPixel>
 8002d36:	e016      	b.n	8002d66 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <ssd1306_WriteChar+0xfc>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	b2d8      	uxtb	r0, r3
 8002d46:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <ssd1306_WriteChar+0xfc>)
 8002d48:	885b      	ldrh	r3, [r3, #2]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	b2d9      	uxtb	r1, r3
 8002d54:	7bbb      	ldrb	r3, [r7, #14]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	f7ff ff3f 	bl	8002be4 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	793b      	ldrb	r3, [r7, #4]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d3c5      	bcc.n	8002d02 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	797b      	ldrb	r3, [r7, #5]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d3ad      	bcc.n	8002ce2 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <ssd1306_WriteChar+0xfc>)
 8002d88:	881a      	ldrh	r2, [r3, #0]
 8002d8a:	793b      	ldrb	r3, [r7, #4]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <ssd1306_WriteChar+0xfc>)
 8002d94:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3724      	adds	r7, #36	; 0x24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd90      	pop	{r4, r7, pc}
 8002da0:	200006c4 	.word	0x200006c4

08002da4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	1d38      	adds	r0, r7, #4
 8002dae:	e880 0006 	stmia.w	r0, {r1, r2}
 8002db2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8002db4:	e012      	b.n	8002ddc <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	7818      	ldrb	r0, [r3, #0]
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	1d3a      	adds	r2, r7, #4
 8002dbe:	ca06      	ldmia	r2, {r1, r2}
 8002dc0:	f7ff ff70 	bl	8002ca4 <ssd1306_WriteChar>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d002      	beq.n	8002dd6 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	e008      	b.n	8002de8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
    while (*str)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e8      	bne.n	8002db6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	781b      	ldrb	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	460a      	mov	r2, r1
 8002dfa:	71fb      	strb	r3, [r7, #7]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <ssd1306_SetCursor+0x2c>)
 8002e06:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002e08:	79bb      	ldrb	r3, [r7, #6]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <ssd1306_SetCursor+0x2c>)
 8002e0e:	805a      	strh	r2, [r3, #2]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	200006c4 	.word	0x200006c4

08002e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	4a0f      	ldr	r2, [pc, #60]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e34:	6453      	str	r3, [r2, #68]	; 0x44
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a08      	ldr	r2, [pc, #32]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_MspInit+0x4c>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800

08002e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e82:	e7fe      	b.n	8002e82 <HardFault_Handler+0x4>

08002e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <MemManage_Handler+0x4>

08002e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e8e:	e7fe      	b.n	8002e8e <BusFault_Handler+0x4>

08002e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <UsageFault_Handler+0x4>

08002e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec4:	f000 f9c2 	bl	800324c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
	return 1;
 8002ed0:	2301      	movs	r3, #1
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_kill>:

int _kill(int pid, int sig)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ee6:	f002 fdd5 	bl	8005a94 <__errno>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2216      	movs	r2, #22
 8002eee:	601a      	str	r2, [r3, #0]
	return -1;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_exit>:

void _exit (int status)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ffe7 	bl	8002edc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f0e:	e7fe      	b.n	8002f0e <_exit+0x12>

08002f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	e00a      	b.n	8002f38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f22:	f3af 8000 	nop.w
 8002f26:	4601      	mov	r1, r0
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	60ba      	str	r2, [r7, #8]
 8002f2e:	b2ca      	uxtb	r2, r1
 8002f30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3301      	adds	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	dbf0      	blt.n	8002f22 <_read+0x12>
	}

return len;
 8002f40:	687b      	ldr	r3, [r7, #4]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e009      	b.n	8002f70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60ba      	str	r2, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	dbf1      	blt.n	8002f5c <_write+0x12>
	}
	return len;
 8002f78:	687b      	ldr	r3, [r7, #4]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_close>:

int _close(int file)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
	return -1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002faa:	605a      	str	r2, [r3, #4]
	return 0;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <_isatty>:

int _isatty(int file)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8002fc2:	2301      	movs	r3, #1
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
	return 0;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ff4:	4b11      	ldr	r3, [pc, #68]	; (800303c <_sbrk+0x50>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <_sbrk+0x16>
		heap_end = &end;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <_sbrk+0x50>)
 8002ffe:	4a10      	ldr	r2, [pc, #64]	; (8003040 <_sbrk+0x54>)
 8003000:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <_sbrk+0x50>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <_sbrk+0x50>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	466a      	mov	r2, sp
 8003012:	4293      	cmp	r3, r2
 8003014:	d907      	bls.n	8003026 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003016:	f002 fd3d 	bl	8005a94 <__errno>
 800301a:	4603      	mov	r3, r0
 800301c:	220c      	movs	r2, #12
 800301e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
 8003024:	e006      	b.n	8003034 <_sbrk+0x48>
	}

	heap_end += incr;
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <_sbrk+0x50>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	4a03      	ldr	r2, [pc, #12]	; (800303c <_sbrk+0x50>)
 8003030:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200006cc 	.word	0x200006cc
 8003040:	20000878 	.word	0x20000878

08003044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <SystemInit+0x28>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	4a07      	ldr	r2, [pc, #28]	; (800306c <SystemInit+0x28>)
 8003050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <SystemInit+0x28>)
 800305a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800305e:	609a      	str	r2, [r3, #8]
#endif
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003074:	4b11      	ldr	r3, [pc, #68]	; (80030bc <MX_USART1_UART_Init+0x4c>)
 8003076:	4a12      	ldr	r2, [pc, #72]	; (80030c0 <MX_USART1_UART_Init+0x50>)
 8003078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <MX_USART1_UART_Init+0x4c>)
 800307c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <MX_USART1_UART_Init+0x4c>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <MX_USART1_UART_Init+0x4c>)
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <MX_USART1_UART_Init+0x4c>)
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003094:	4b09      	ldr	r3, [pc, #36]	; (80030bc <MX_USART1_UART_Init+0x4c>)
 8003096:	220c      	movs	r2, #12
 8003098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309a:	4b08      	ldr	r3, [pc, #32]	; (80030bc <MX_USART1_UART_Init+0x4c>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <MX_USART1_UART_Init+0x4c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030a6:	4805      	ldr	r0, [pc, #20]	; (80030bc <MX_USART1_UART_Init+0x4c>)
 80030a8:	f002 f9fe 	bl	80054a8 <HAL_UART_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030b2:	f7ff fb83 	bl	80027bc <Error_Handler>
  }

}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	2000081c 	.word	0x2000081c
 80030c0:	40011000 	.word	0x40011000

080030c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a19      	ldr	r2, [pc, #100]	; (8003148 <HAL_UART_MspInit+0x84>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d12c      	bne.n	8003140 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_UART_MspInit+0x88>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <HAL_UART_MspInit+0x88>)
 80030f0:	f043 0310 	orr.w	r3, r3, #16
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_UART_MspInit+0x88>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_UART_MspInit+0x88>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_UART_MspInit+0x88>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_UART_MspInit+0x88>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800311e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003128:	2301      	movs	r3, #1
 800312a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003130:	2307      	movs	r3, #7
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4619      	mov	r1, r3
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <HAL_UART_MspInit+0x8c>)
 800313c:	f000 f9b0 	bl	80034a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003140:	bf00      	nop
 8003142:	3728      	adds	r7, #40	; 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40011000 	.word	0x40011000
 800314c:	40023800 	.word	0x40023800
 8003150:	40020000 	.word	0x40020000

08003154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800318c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003158:	480d      	ldr	r0, [pc, #52]	; (8003190 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800315a:	490e      	ldr	r1, [pc, #56]	; (8003194 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800315c:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003160:	e002      	b.n	8003168 <LoopCopyDataInit>

08003162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003166:	3304      	adds	r3, #4

08003168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800316a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800316c:	d3f9      	bcc.n	8003162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316e:	4a0b      	ldr	r2, [pc, #44]	; (800319c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003170:	4c0b      	ldr	r4, [pc, #44]	; (80031a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003174:	e001      	b.n	800317a <LoopFillZerobss>

08003176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003178:	3204      	adds	r2, #4

0800317a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800317a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800317c:	d3fb      	bcc.n	8003176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800317e:	f7ff ff61 	bl	8003044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003182:	f002 fc8d 	bl	8005aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003186:	f7ff f959 	bl	800243c <main>
  bx  lr    
 800318a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800318c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003194:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003198:	0800b2e4 	.word	0x0800b2e4
  ldr r2, =_sbss
 800319c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80031a0:	20000874 	.word	0x20000874

080031a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a4:	e7fe      	b.n	80031a4 <ADC_IRQHandler>
	...

080031a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <HAL_Init+0x40>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a0d      	ldr	r2, [pc, #52]	; (80031e8 <HAL_Init+0x40>)
 80031b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_Init+0x40>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <HAL_Init+0x40>)
 80031be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_Init+0x40>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_Init+0x40>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d0:	2003      	movs	r0, #3
 80031d2:	f000 f931 	bl	8003438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d6:	2000      	movs	r0, #0
 80031d8:	f000 f808 	bl	80031ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031dc:	f7ff fe20 	bl	8002e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023c00 	.word	0x40023c00

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_InitTick+0x54>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <HAL_InitTick+0x58>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003202:	fbb3 f3f1 	udiv	r3, r3, r1
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f93b 	bl	8003486 <HAL_SYSTICK_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00e      	b.n	8003238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d80a      	bhi.n	8003236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003220:	2200      	movs	r2, #0
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f000 f911 	bl	800344e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800322c:	4a06      	ldr	r2, [pc, #24]	; (8003248 <HAL_InitTick+0x5c>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000010 	.word	0x20000010
 8003244:	20000018 	.word	0x20000018
 8003248:	20000014 	.word	0x20000014

0800324c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_IncTick+0x20>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_IncTick+0x24>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <HAL_IncTick+0x24>)
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000018 	.word	0x20000018
 8003270:	20000860 	.word	0x20000860

08003274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return uwTick;
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_GetTick+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000860 	.word	0x20000860

0800328c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003294:	f7ff ffee 	bl	8003274 <HAL_GetTick>
 8003298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d005      	beq.n	80032b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_Delay+0x44>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032b2:	bf00      	nop
 80032b4:	f7ff ffde 	bl	8003274 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d8f7      	bhi.n	80032b4 <HAL_Delay+0x28>
  {
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000018 	.word	0x20000018

080032d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f0:	4013      	ands	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003306:	4a04      	ldr	r2, [pc, #16]	; (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <__NVIC_GetPriorityGrouping+0x18>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 0307 	and.w	r3, r3, #7
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db0a      	blt.n	8003362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	490c      	ldr	r1, [pc, #48]	; (8003384 <__NVIC_SetPriority+0x4c>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	440b      	add	r3, r1
 800335c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003360:	e00a      	b.n	8003378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4908      	ldr	r1, [pc, #32]	; (8003388 <__NVIC_SetPriority+0x50>)
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3b04      	subs	r3, #4
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	440b      	add	r3, r1
 8003376:	761a      	strb	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000e100 	.word	0xe000e100
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	; 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f1c3 0307 	rsb	r3, r3, #7
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	bf28      	it	cs
 80033aa:	2304      	movcs	r3, #4
 80033ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d902      	bls.n	80033bc <NVIC_EncodePriority+0x30>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3b03      	subs	r3, #3
 80033ba:	e000      	b.n	80033be <NVIC_EncodePriority+0x32>
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	401a      	ands	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	43d9      	mvns	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	4313      	orrs	r3, r2
         );
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	; 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003404:	d301      	bcc.n	800340a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003406:	2301      	movs	r3, #1
 8003408:	e00f      	b.n	800342a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <SysTick_Config+0x40>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003412:	210f      	movs	r1, #15
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	f7ff ff8e 	bl	8003338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <SysTick_Config+0x40>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <SysTick_Config+0x40>)
 8003424:	2207      	movs	r2, #7
 8003426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	e000e010 	.word	0xe000e010

08003438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff47 	bl	80032d4 <__NVIC_SetPriorityGrouping>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003460:	f7ff ff5c 	bl	800331c <__NVIC_GetPriorityGrouping>
 8003464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	6978      	ldr	r0, [r7, #20]
 800346c:	f7ff ff8e 	bl	800338c <NVIC_EncodePriority>
 8003470:	4602      	mov	r2, r0
 8003472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ff5d 	bl	8003338 <__NVIC_SetPriority>
}
 800347e:	bf00      	nop
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ffb0 	bl	80033f4 <SysTick_Config>
 8003494:	4603      	mov	r3, r0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	e159      	b.n	8003770 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034bc:	2201      	movs	r2, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f040 8148 	bne.w	800376a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d005      	beq.n	80034f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d130      	bne.n	8003554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003528:	2201      	movs	r2, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 0201 	and.w	r2, r3, #1
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b03      	cmp	r3, #3
 800355e:	d017      	beq.n	8003590 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d123      	bne.n	80035e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	08da      	lsrs	r2, r3, #3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3208      	adds	r2, #8
 80035a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	220f      	movs	r2, #15
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	08da      	lsrs	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3208      	adds	r2, #8
 80035de:	69b9      	ldr	r1, [r7, #24]
 80035e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0203 	and.w	r2, r3, #3
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80a2 	beq.w	800376a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	4b57      	ldr	r3, [pc, #348]	; (8003788 <HAL_GPIO_Init+0x2e8>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	4a56      	ldr	r2, [pc, #344]	; (8003788 <HAL_GPIO_Init+0x2e8>)
 8003630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003634:	6453      	str	r3, [r2, #68]	; 0x44
 8003636:	4b54      	ldr	r3, [pc, #336]	; (8003788 <HAL_GPIO_Init+0x2e8>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003642:	4a52      	ldr	r2, [pc, #328]	; (800378c <HAL_GPIO_Init+0x2ec>)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	3302      	adds	r3, #2
 800364a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	220f      	movs	r2, #15
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a49      	ldr	r2, [pc, #292]	; (8003790 <HAL_GPIO_Init+0x2f0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d019      	beq.n	80036a2 <HAL_GPIO_Init+0x202>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a48      	ldr	r2, [pc, #288]	; (8003794 <HAL_GPIO_Init+0x2f4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_GPIO_Init+0x1fe>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a47      	ldr	r2, [pc, #284]	; (8003798 <HAL_GPIO_Init+0x2f8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00d      	beq.n	800369a <HAL_GPIO_Init+0x1fa>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a46      	ldr	r2, [pc, #280]	; (800379c <HAL_GPIO_Init+0x2fc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <HAL_GPIO_Init+0x1f6>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a45      	ldr	r2, [pc, #276]	; (80037a0 <HAL_GPIO_Init+0x300>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_GPIO_Init+0x1f2>
 800368e:	2304      	movs	r3, #4
 8003690:	e008      	b.n	80036a4 <HAL_GPIO_Init+0x204>
 8003692:	2307      	movs	r3, #7
 8003694:	e006      	b.n	80036a4 <HAL_GPIO_Init+0x204>
 8003696:	2303      	movs	r3, #3
 8003698:	e004      	b.n	80036a4 <HAL_GPIO_Init+0x204>
 800369a:	2302      	movs	r3, #2
 800369c:	e002      	b.n	80036a4 <HAL_GPIO_Init+0x204>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_GPIO_Init+0x204>
 80036a2:	2300      	movs	r3, #0
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	f002 0203 	and.w	r2, r2, #3
 80036aa:	0092      	lsls	r2, r2, #2
 80036ac:	4093      	lsls	r3, r2
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036b4:	4935      	ldr	r1, [pc, #212]	; (800378c <HAL_GPIO_Init+0x2ec>)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	3302      	adds	r3, #2
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c2:	4b38      	ldr	r3, [pc, #224]	; (80037a4 <HAL_GPIO_Init+0x304>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e6:	4a2f      	ldr	r2, [pc, #188]	; (80037a4 <HAL_GPIO_Init+0x304>)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036ec:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <HAL_GPIO_Init+0x304>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003710:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <HAL_GPIO_Init+0x304>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003716:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <HAL_GPIO_Init+0x304>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800373a:	4a1a      	ldr	r2, [pc, #104]	; (80037a4 <HAL_GPIO_Init+0x304>)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003740:	4b18      	ldr	r3, [pc, #96]	; (80037a4 <HAL_GPIO_Init+0x304>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003764:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <HAL_GPIO_Init+0x304>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3301      	adds	r3, #1
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b0f      	cmp	r3, #15
 8003774:	f67f aea2 	bls.w	80034bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3724      	adds	r7, #36	; 0x24
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800
 800378c:	40013800 	.word	0x40013800
 8003790:	40020000 	.word	0x40020000
 8003794:	40020400 	.word	0x40020400
 8003798:	40020800 	.word	0x40020800
 800379c:	40020c00 	.word	0x40020c00
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40013c00 	.word	0x40013c00

080037a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
 80037b4:	4613      	mov	r3, r2
 80037b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b8:	787b      	ldrb	r3, [r7, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c4:	e003      	b.n	80037ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037c6:	887b      	ldrh	r3, [r7, #2]
 80037c8:	041a      	lsls	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	619a      	str	r2, [r3, #24]
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	460b      	mov	r3, r1
 80037e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037ec:	887a      	ldrh	r2, [r7, #2]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4013      	ands	r3, r2
 80037f2:	041a      	lsls	r2, r3, #16
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	43d9      	mvns	r1, r3
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	400b      	ands	r3, r1
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	619a      	str	r2, [r3, #24]
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e12b      	b.n	8003a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe fd64 	bl	8002304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003874:	f001 f848 	bl	8004908 <HAL_RCC_GetPCLK1Freq>
 8003878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4a81      	ldr	r2, [pc, #516]	; (8003a84 <HAL_I2C_Init+0x274>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d807      	bhi.n	8003894 <HAL_I2C_Init+0x84>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a80      	ldr	r2, [pc, #512]	; (8003a88 <HAL_I2C_Init+0x278>)
 8003888:	4293      	cmp	r3, r2
 800388a:	bf94      	ite	ls
 800388c:	2301      	movls	r3, #1
 800388e:	2300      	movhi	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e006      	b.n	80038a2 <HAL_I2C_Init+0x92>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4a7d      	ldr	r2, [pc, #500]	; (8003a8c <HAL_I2C_Init+0x27c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	bf94      	ite	ls
 800389c:	2301      	movls	r3, #1
 800389e:	2300      	movhi	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0e7      	b.n	8003a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a78      	ldr	r2, [pc, #480]	; (8003a90 <HAL_I2C_Init+0x280>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	0c9b      	lsrs	r3, r3, #18
 80038b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a6a      	ldr	r2, [pc, #424]	; (8003a84 <HAL_I2C_Init+0x274>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d802      	bhi.n	80038e4 <HAL_I2C_Init+0xd4>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	3301      	adds	r3, #1
 80038e2:	e009      	b.n	80038f8 <HAL_I2C_Init+0xe8>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	4a69      	ldr	r2, [pc, #420]	; (8003a94 <HAL_I2C_Init+0x284>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	3301      	adds	r3, #1
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800390a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	495c      	ldr	r1, [pc, #368]	; (8003a84 <HAL_I2C_Init+0x274>)
 8003914:	428b      	cmp	r3, r1
 8003916:	d819      	bhi.n	800394c <HAL_I2C_Init+0x13c>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1e59      	subs	r1, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	fbb1 f3f3 	udiv	r3, r1, r3
 8003926:	1c59      	adds	r1, r3, #1
 8003928:	f640 73fc 	movw	r3, #4092	; 0xffc
 800392c:	400b      	ands	r3, r1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_I2C_Init+0x138>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1e59      	subs	r1, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003940:	3301      	adds	r3, #1
 8003942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003946:	e051      	b.n	80039ec <HAL_I2C_Init+0x1dc>
 8003948:	2304      	movs	r3, #4
 800394a:	e04f      	b.n	80039ec <HAL_I2C_Init+0x1dc>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d111      	bne.n	8003978 <HAL_I2C_Init+0x168>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e58      	subs	r0, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	440b      	add	r3, r1
 8003962:	fbb0 f3f3 	udiv	r3, r0, r3
 8003966:	3301      	adds	r3, #1
 8003968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e012      	b.n	800399e <HAL_I2C_Init+0x18e>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1e58      	subs	r0, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	0099      	lsls	r1, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	fbb0 f3f3 	udiv	r3, r0, r3
 800398e:	3301      	adds	r3, #1
 8003990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf0c      	ite	eq
 8003998:	2301      	moveq	r3, #1
 800399a:	2300      	movne	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_I2C_Init+0x196>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e022      	b.n	80039ec <HAL_I2C_Init+0x1dc>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10e      	bne.n	80039cc <HAL_I2C_Init+0x1bc>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1e58      	subs	r0, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	440b      	add	r3, r1
 80039bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c0:	3301      	adds	r3, #1
 80039c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ca:	e00f      	b.n	80039ec <HAL_I2C_Init+0x1dc>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e58      	subs	r0, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	0099      	lsls	r1, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	6809      	ldr	r1, [r1, #0]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69da      	ldr	r2, [r3, #28]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6911      	ldr	r1, [r2, #16]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68d2      	ldr	r2, [r2, #12]
 8003a26:	4311      	orrs	r1, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	000186a0 	.word	0x000186a0
 8003a88:	001e847f 	.word	0x001e847f
 8003a8c:	003d08ff 	.word	0x003d08ff
 8003a90:	431bde83 	.word	0x431bde83
 8003a94:	10624dd3 	.word	0x10624dd3

08003a98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	813b      	strh	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab2:	f7ff fbdf 	bl	8003274 <HAL_GetTick>
 8003ab6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	f040 80d9 	bne.w	8003c78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	2319      	movs	r3, #25
 8003acc:	2201      	movs	r2, #1
 8003ace:	496d      	ldr	r1, [pc, #436]	; (8003c84 <HAL_I2C_Mem_Write+0x1ec>)
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f971 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
 8003ade:	e0cc      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_I2C_Mem_Write+0x56>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0c5      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d007      	beq.n	8003b14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2221      	movs	r2, #33	; 0x21
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a4d      	ldr	r2, [pc, #308]	; (8003c88 <HAL_I2C_Mem_Write+0x1f0>)
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b56:	88f8      	ldrh	r0, [r7, #6]
 8003b58:	893a      	ldrh	r2, [r7, #8]
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	4603      	mov	r3, r0
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f890 	bl	8003c8c <I2C_RequestMemoryWrite>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d052      	beq.n	8003c18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e081      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f9f2 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d107      	bne.n	8003b9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e06b      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d11b      	bne.n	8003c18 <HAL_I2C_Mem_Write+0x180>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d017      	beq.n	8003c18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1aa      	bne.n	8003b76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f9de 	bl	8003fe6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d107      	bne.n	8003c48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e016      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	00100002 	.word	0x00100002
 8003c88:	ffff0000 	.word	0xffff0000

08003c8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	4608      	mov	r0, r1
 8003c96:	4611      	mov	r1, r2
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	817b      	strh	r3, [r7, #10]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	813b      	strh	r3, [r7, #8]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f878 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00d      	beq.n	8003cea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cdc:	d103      	bne.n	8003ce6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e05f      	b.n	8003daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	6a3a      	ldr	r2, [r7, #32]
 8003cfe:	492d      	ldr	r1, [pc, #180]	; (8003db4 <I2C_RequestMemoryWrite+0x128>)
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f8b0 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e04c      	b.n	8003daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	6a39      	ldr	r1, [r7, #32]
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f91a 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d107      	bne.n	8003d4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e02b      	b.n	8003daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	611a      	str	r2, [r3, #16]
 8003d62:	e021      	b.n	8003da8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d64:	893b      	ldrh	r3, [r7, #8]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	6a39      	ldr	r1, [r7, #32]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f8f4 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d107      	bne.n	8003d9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e005      	b.n	8003daa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d9e:	893b      	ldrh	r3, [r7, #8]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	00010002 	.word	0x00010002

08003db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc8:	e025      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d021      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7ff fa4f 	bl	8003274 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d116      	bne.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e023      	b.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10d      	bne.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	e00c      	b.n	8003e56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	43da      	mvns	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d0b6      	beq.n	8003dca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e74:	e051      	b.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e84:	d123      	bne.n	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f043 0204 	orr.w	r2, r3, #4
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e046      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d021      	beq.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7ff f9cd 	bl	8003274 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d116      	bne.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e020      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d10c      	bne.n	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e00b      	b.n	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	43da      	mvns	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d18d      	bne.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f70:	e02d      	b.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f878 	bl	8004068 <I2C_IsAcknowledgeFailed>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e02d      	b.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d021      	beq.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7ff f973 	bl	8003274 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d116      	bne.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e007      	b.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d1ca      	bne.n	8003f72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff2:	e02d      	b.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f837 	bl	8004068 <I2C_IsAcknowledgeFailed>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e02d      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d021      	beq.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400c:	f7ff f932 	bl	8003274 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d116      	bne.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e007      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b04      	cmp	r3, #4
 800405c:	d1ca      	bne.n	8003ff4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407e:	d11b      	bne.n	80040b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004088:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f043 0204 	orr.w	r2, r3, #4
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e264      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d075      	beq.n	80041d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040e6:	4ba3      	ldr	r3, [pc, #652]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d00c      	beq.n	800410c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f2:	4ba0      	ldr	r3, [pc, #640]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d112      	bne.n	8004124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fe:	4b9d      	ldr	r3, [pc, #628]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410a:	d10b      	bne.n	8004124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410c:	4b99      	ldr	r3, [pc, #612]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d05b      	beq.n	80041d0 <HAL_RCC_OscConfig+0x108>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d157      	bne.n	80041d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e23f      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412c:	d106      	bne.n	800413c <HAL_RCC_OscConfig+0x74>
 800412e:	4b91      	ldr	r3, [pc, #580]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a90      	ldr	r2, [pc, #576]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e01d      	b.n	8004178 <HAL_RCC_OscConfig+0xb0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0x98>
 8004146:	4b8b      	ldr	r3, [pc, #556]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a8a      	ldr	r2, [pc, #552]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 800414c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b88      	ldr	r3, [pc, #544]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a87      	ldr	r2, [pc, #540]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0xb0>
 8004160:	4b84      	ldr	r3, [pc, #528]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a83      	ldr	r2, [pc, #524]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	4b81      	ldr	r3, [pc, #516]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a80      	ldr	r2, [pc, #512]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7ff f878 	bl	8003274 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004188:	f7ff f874 	bl	8003274 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e204      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b76      	ldr	r3, [pc, #472]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0xc0>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7ff f864 	bl	8003274 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b0:	f7ff f860 	bl	8003274 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e1f0      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	4b6c      	ldr	r3, [pc, #432]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0xe8>
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d063      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041de:	4b65      	ldr	r3, [pc, #404]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ea:	4b62      	ldr	r3, [pc, #392]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d11c      	bne.n	8004230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f6:	4b5f      	ldr	r3, [pc, #380]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d116      	bne.n	8004230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	4b5c      	ldr	r3, [pc, #368]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x152>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1c4      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421a:	4b56      	ldr	r3, [pc, #344]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4952      	ldr	r1, [pc, #328]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	e03a      	b.n	80042a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004238:	4b4f      	ldr	r3, [pc, #316]	; (8004378 <HAL_RCC_OscConfig+0x2b0>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7ff f819 	bl	8003274 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004246:	f7ff f815 	bl	8003274 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e1a5      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	4b46      	ldr	r3, [pc, #280]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b43      	ldr	r3, [pc, #268]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4940      	ldr	r1, [pc, #256]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	e015      	b.n	80042a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b3f      	ldr	r3, [pc, #252]	; (8004378 <HAL_RCC_OscConfig+0x2b0>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fe fff8 	bl	8003274 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004288:	f7fe fff4 	bl	8003274 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e184      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	4b36      	ldr	r3, [pc, #216]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d030      	beq.n	8004314 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ba:	4b30      	ldr	r3, [pc, #192]	; (800437c <HAL_RCC_OscConfig+0x2b4>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fe ffd8 	bl	8003274 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c8:	f7fe ffd4 	bl	8003274 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e164      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x200>
 80042e6:	e015      	b.n	8004314 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_RCC_OscConfig+0x2b4>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ee:	f7fe ffc1 	bl	8003274 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f6:	f7fe ffbd 	bl	8003274 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e14d      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 800430a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80a0 	beq.w	8004462 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004322:	2300      	movs	r3, #0
 8004324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004326:	4b13      	ldr	r3, [pc, #76]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10f      	bne.n	8004352 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004340:	6413      	str	r3, [r2, #64]	; 0x40
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_OscConfig+0x2b8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d121      	bne.n	80043a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_RCC_OscConfig+0x2b8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a07      	ldr	r2, [pc, #28]	; (8004380 <HAL_RCC_OscConfig+0x2b8>)
 8004364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436a:	f7fe ff83 	bl	8003274 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004370:	e011      	b.n	8004396 <HAL_RCC_OscConfig+0x2ce>
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800
 8004378:	42470000 	.word	0x42470000
 800437c:	42470e80 	.word	0x42470e80
 8004380:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004384:	f7fe ff76 	bl	8003274 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e106      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004396:	4b85      	ldr	r3, [pc, #532]	; (80045ac <HAL_RCC_OscConfig+0x4e4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d106      	bne.n	80043b8 <HAL_RCC_OscConfig+0x2f0>
 80043aa:	4b81      	ldr	r3, [pc, #516]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a80      	ldr	r2, [pc, #512]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
 80043b6:	e01c      	b.n	80043f2 <HAL_RCC_OscConfig+0x32a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b05      	cmp	r3, #5
 80043be:	d10c      	bne.n	80043da <HAL_RCC_OscConfig+0x312>
 80043c0:	4b7b      	ldr	r3, [pc, #492]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	4a7a      	ldr	r2, [pc, #488]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80043c6:	f043 0304 	orr.w	r3, r3, #4
 80043ca:	6713      	str	r3, [r2, #112]	; 0x70
 80043cc:	4b78      	ldr	r3, [pc, #480]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	4a77      	ldr	r2, [pc, #476]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6713      	str	r3, [r2, #112]	; 0x70
 80043d8:	e00b      	b.n	80043f2 <HAL_RCC_OscConfig+0x32a>
 80043da:	4b75      	ldr	r3, [pc, #468]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	4a74      	ldr	r2, [pc, #464]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	6713      	str	r3, [r2, #112]	; 0x70
 80043e6:	4b72      	ldr	r3, [pc, #456]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a71      	ldr	r2, [pc, #452]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80043ec:	f023 0304 	bic.w	r3, r3, #4
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d015      	beq.n	8004426 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fa:	f7fe ff3b 	bl	8003274 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fe ff37 	bl	8003274 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e0c5      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004418:	4b65      	ldr	r3, [pc, #404]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0ee      	beq.n	8004402 <HAL_RCC_OscConfig+0x33a>
 8004424:	e014      	b.n	8004450 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004426:	f7fe ff25 	bl	8003274 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442c:	e00a      	b.n	8004444 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800442e:	f7fe ff21 	bl	8003274 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f241 3288 	movw	r2, #5000	; 0x1388
 800443c:	4293      	cmp	r3, r2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e0af      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004444:	4b5a      	ldr	r3, [pc, #360]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1ee      	bne.n	800442e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d105      	bne.n	8004462 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004456:	4b56      	ldr	r3, [pc, #344]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	4a55      	ldr	r2, [pc, #340]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 800445c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004460:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 809b 	beq.w	80045a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800446c:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b08      	cmp	r3, #8
 8004476:	d05c      	beq.n	8004532 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d141      	bne.n	8004504 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004480:	4b4c      	ldr	r3, [pc, #304]	; (80045b4 <HAL_RCC_OscConfig+0x4ec>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004486:	f7fe fef5 	bl	8003274 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448e:	f7fe fef1 	bl	8003274 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e081      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a0:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f0      	bne.n	800448e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	019b      	lsls	r3, r3, #6
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	3b01      	subs	r3, #1
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	061b      	lsls	r3, r3, #24
 80044d0:	4937      	ldr	r1, [pc, #220]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCC_OscConfig+0x4ec>)
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe feca 	bl	8003274 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fe fec6 	bl	8003274 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e056      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f6:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x41c>
 8004502:	e04e      	b.n	80045a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004504:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <HAL_RCC_OscConfig+0x4ec>)
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450a:	f7fe feb3 	bl	8003274 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004512:	f7fe feaf 	bl	8003274 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e03f      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004524:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x44a>
 8004530:	e037      	b.n	80045a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e032      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800453e:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <HAL_RCC_OscConfig+0x4e8>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d028      	beq.n	800459e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004556:	429a      	cmp	r2, r3
 8004558:	d121      	bne.n	800459e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d11a      	bne.n	800459e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800456e:	4013      	ands	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004574:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004576:	4293      	cmp	r3, r2
 8004578:	d111      	bne.n	800459e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	085b      	lsrs	r3, r3, #1
 8004586:	3b01      	subs	r3, #1
 8004588:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800458a:	429a      	cmp	r2, r3
 800458c:	d107      	bne.n	800459e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40007000 	.word	0x40007000
 80045b0:	40023800 	.word	0x40023800
 80045b4:	42470060 	.word	0x42470060

080045b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0cc      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045cc:	4b68      	ldr	r3, [pc, #416]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d90c      	bls.n	80045f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b65      	ldr	r3, [pc, #404]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b63      	ldr	r3, [pc, #396]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0b8      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800460c:	4b59      	ldr	r3, [pc, #356]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4a58      	ldr	r2, [pc, #352]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004624:	4b53      	ldr	r3, [pc, #332]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	4a52      	ldr	r2, [pc, #328]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800462e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004630:	4b50      	ldr	r3, [pc, #320]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	494d      	ldr	r1, [pc, #308]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d044      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b47      	ldr	r3, [pc, #284]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d119      	bne.n	8004696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e07f      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d003      	beq.n	8004676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004672:	2b03      	cmp	r3, #3
 8004674:	d107      	bne.n	8004686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004676:	4b3f      	ldr	r3, [pc, #252]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e06f      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004686:	4b3b      	ldr	r3, [pc, #236]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e067      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004696:	4b37      	ldr	r3, [pc, #220]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4934      	ldr	r1, [pc, #208]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a8:	f7fe fde4 	bl	8003274 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b0:	f7fe fde0 	bl	8003274 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e04f      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c6:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 020c 	and.w	r2, r3, #12
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d1eb      	bne.n	80046b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d8:	4b25      	ldr	r3, [pc, #148]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d20c      	bcs.n	8004700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e6:	4b22      	ldr	r3, [pc, #136]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e032      	b.n	8004766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4916      	ldr	r1, [pc, #88]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	490e      	ldr	r1, [pc, #56]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800473e:	f000 f821 	bl	8004784 <HAL_RCC_GetSysClockFreq>
 8004742:	4602      	mov	r2, r0
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	490a      	ldr	r1, [pc, #40]	; (8004778 <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	5ccb      	ldrb	r3, [r1, r3]
 8004752:	fa22 f303 	lsr.w	r3, r2, r3
 8004756:	4a09      	ldr	r2, [pc, #36]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fd44 	bl	80031ec <HAL_InitTick>

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40023c00 	.word	0x40023c00
 8004774:	40023800 	.word	0x40023800
 8004778:	0800ae10 	.word	0x0800ae10
 800477c:	20000010 	.word	0x20000010
 8004780:	20000014 	.word	0x20000014

08004784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004784:	b5b0      	push	{r4, r5, r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800478a:	2100      	movs	r1, #0
 800478c:	6079      	str	r1, [r7, #4]
 800478e:	2100      	movs	r1, #0
 8004790:	60f9      	str	r1, [r7, #12]
 8004792:	2100      	movs	r1, #0
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004796:	2100      	movs	r1, #0
 8004798:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800479a:	4952      	ldr	r1, [pc, #328]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800479c:	6889      	ldr	r1, [r1, #8]
 800479e:	f001 010c 	and.w	r1, r1, #12
 80047a2:	2908      	cmp	r1, #8
 80047a4:	d00d      	beq.n	80047c2 <HAL_RCC_GetSysClockFreq+0x3e>
 80047a6:	2908      	cmp	r1, #8
 80047a8:	f200 8094 	bhi.w	80048d4 <HAL_RCC_GetSysClockFreq+0x150>
 80047ac:	2900      	cmp	r1, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0x32>
 80047b0:	2904      	cmp	r1, #4
 80047b2:	d003      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x38>
 80047b4:	e08e      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b6:	4b4c      	ldr	r3, [pc, #304]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80047b8:	60bb      	str	r3, [r7, #8]
       break;
 80047ba:	e08e      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047bc:	4b4b      	ldr	r3, [pc, #300]	; (80048ec <HAL_RCC_GetSysClockFreq+0x168>)
 80047be:	60bb      	str	r3, [r7, #8]
      break;
 80047c0:	e08b      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c2:	4948      	ldr	r1, [pc, #288]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80047c4:	6849      	ldr	r1, [r1, #4]
 80047c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80047ca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047cc:	4945      	ldr	r1, [pc, #276]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80047ce:	6849      	ldr	r1, [r1, #4]
 80047d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80047d4:	2900      	cmp	r1, #0
 80047d6:	d024      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d8:	4942      	ldr	r1, [pc, #264]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80047da:	6849      	ldr	r1, [r1, #4]
 80047dc:	0989      	lsrs	r1, r1, #6
 80047de:	4608      	mov	r0, r1
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80047e8:	f04f 0500 	mov.w	r5, #0
 80047ec:	ea00 0204 	and.w	r2, r0, r4
 80047f0:	ea01 0305 	and.w	r3, r1, r5
 80047f4:	493d      	ldr	r1, [pc, #244]	; (80048ec <HAL_RCC_GetSysClockFreq+0x168>)
 80047f6:	fb01 f003 	mul.w	r0, r1, r3
 80047fa:	2100      	movs	r1, #0
 80047fc:	fb01 f102 	mul.w	r1, r1, r2
 8004800:	1844      	adds	r4, r0, r1
 8004802:	493a      	ldr	r1, [pc, #232]	; (80048ec <HAL_RCC_GetSysClockFreq+0x168>)
 8004804:	fba2 0101 	umull	r0, r1, r2, r1
 8004808:	1863      	adds	r3, r4, r1
 800480a:	4619      	mov	r1, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	461a      	mov	r2, r3
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	f7fc fa40 	bl	8000c98 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4613      	mov	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	e04a      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004822:	4b30      	ldr	r3, [pc, #192]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	099b      	lsrs	r3, r3, #6
 8004828:	461a      	mov	r2, r3
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004832:	f04f 0100 	mov.w	r1, #0
 8004836:	ea02 0400 	and.w	r4, r2, r0
 800483a:	ea03 0501 	and.w	r5, r3, r1
 800483e:	4620      	mov	r0, r4
 8004840:	4629      	mov	r1, r5
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	014b      	lsls	r3, r1, #5
 800484c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004850:	0142      	lsls	r2, r0, #5
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	1b00      	subs	r0, r0, r4
 8004858:	eb61 0105 	sbc.w	r1, r1, r5
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	018b      	lsls	r3, r1, #6
 8004866:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800486a:	0182      	lsls	r2, r0, #6
 800486c:	1a12      	subs	r2, r2, r0
 800486e:	eb63 0301 	sbc.w	r3, r3, r1
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f04f 0100 	mov.w	r1, #0
 800487a:	00d9      	lsls	r1, r3, #3
 800487c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004880:	00d0      	lsls	r0, r2, #3
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	1912      	adds	r2, r2, r4
 8004888:	eb45 0303 	adc.w	r3, r5, r3
 800488c:	f04f 0000 	mov.w	r0, #0
 8004890:	f04f 0100 	mov.w	r1, #0
 8004894:	0299      	lsls	r1, r3, #10
 8004896:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800489a:	0290      	lsls	r0, r2, #10
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4610      	mov	r0, r2
 80048a2:	4619      	mov	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	f7fc f9f4 	bl	8000c98 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4613      	mov	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	3301      	adds	r3, #1
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	60bb      	str	r3, [r7, #8]
      break;
 80048d2:	e002      	b.n	80048da <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80048d6:	60bb      	str	r3, [r7, #8]
      break;
 80048d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048da:	68bb      	ldr	r3, [r7, #8]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bdb0      	pop	{r4, r5, r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	017d7840 	.word	0x017d7840

080048f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f4:	4b03      	ldr	r3, [pc, #12]	; (8004904 <HAL_RCC_GetHCLKFreq+0x14>)
 80048f6:	681b      	ldr	r3, [r3, #0]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000010 	.word	0x20000010

08004908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800490c:	f7ff fff0 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004910:	4602      	mov	r2, r0
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	0a9b      	lsrs	r3, r3, #10
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	4903      	ldr	r1, [pc, #12]	; (800492c <HAL_RCC_GetPCLK1Freq+0x24>)
 800491e:	5ccb      	ldrb	r3, [r1, r3]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	0800ae20 	.word	0x0800ae20

08004930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004934:	f7ff ffdc 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	0b5b      	lsrs	r3, r3, #13
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4903      	ldr	r1, [pc, #12]	; (8004954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004946:	5ccb      	ldrb	r3, [r1, r3]
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40023800 	.word	0x40023800
 8004954:	0800ae20 	.word	0x0800ae20

08004958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e07b      	b.n	8004a62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	2b00      	cmp	r3, #0
 8004970:	d108      	bne.n	8004984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497a:	d009      	beq.n	8004990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	61da      	str	r2, [r3, #28]
 8004982:	e005      	b.n	8004990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fd ff44 	bl	8002838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a14:	ea42 0103 	orr.w	r1, r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	f003 0104 	and.w	r1, r3, #4
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	f003 0210 	and.w	r2, r3, #16
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b088      	sub	sp, #32
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	603b      	str	r3, [r7, #0]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_SPI_Transmit+0x22>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e126      	b.n	8004cda <HAL_SPI_Transmit+0x270>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a94:	f7fe fbee 	bl	8003274 <HAL_GetTick>
 8004a98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d002      	beq.n	8004ab0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004aae:	e10b      	b.n	8004cc8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_SPI_Transmit+0x52>
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ac0:	e102      	b.n	8004cc8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	88fa      	ldrh	r2, [r7, #6]
 8004ada:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b08:	d10f      	bne.n	8004b2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b34:	2b40      	cmp	r3, #64	; 0x40
 8004b36:	d007      	beq.n	8004b48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b50:	d14b      	bne.n	8004bea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_SPI_Transmit+0xf6>
 8004b5a:	8afb      	ldrh	r3, [r7, #22]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d13e      	bne.n	8004bde <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	1c9a      	adds	r2, r3, #2
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b84:	e02b      	b.n	8004bde <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d112      	bne.n	8004bba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	881a      	ldrh	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	1c9a      	adds	r2, r3, #2
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bb8:	e011      	b.n	8004bde <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bba:	f7fe fb5b 	bl	8003274 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d803      	bhi.n	8004bd2 <HAL_SPI_Transmit+0x168>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d102      	bne.n	8004bd8 <HAL_SPI_Transmit+0x16e>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bdc:	e074      	b.n	8004cc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ce      	bne.n	8004b86 <HAL_SPI_Transmit+0x11c>
 8004be8:	e04c      	b.n	8004c84 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_SPI_Transmit+0x18e>
 8004bf2:	8afb      	ldrh	r3, [r7, #22]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d140      	bne.n	8004c7a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	330c      	adds	r3, #12
 8004c02:	7812      	ldrb	r2, [r2, #0]
 8004c04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c1e:	e02c      	b.n	8004c7a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d113      	bne.n	8004c56 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	7812      	ldrb	r2, [r2, #0]
 8004c3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c54:	e011      	b.n	8004c7a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c56:	f7fe fb0d 	bl	8003274 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d803      	bhi.n	8004c6e <HAL_SPI_Transmit+0x204>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d102      	bne.n	8004c74 <HAL_SPI_Transmit+0x20a>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c78:	e026      	b.n	8004cc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1cd      	bne.n	8004c20 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	6839      	ldr	r1, [r7, #0]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fbcb 	bl	8005424 <SPI_EndRxTxTransaction>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e000      	b.n	8004cc8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b088      	sub	sp, #32
 8004ce6:	af02      	add	r7, sp, #8
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfe:	d112      	bne.n	8004d26 <HAL_SPI_Receive+0x44>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10e      	bne.n	8004d26 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f8f1 	bl	8004f04 <HAL_SPI_TransmitReceive>
 8004d22:	4603      	mov	r3, r0
 8004d24:	e0ea      	b.n	8004efc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_SPI_Receive+0x52>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e0e3      	b.n	8004efc <HAL_SPI_Receive+0x21a>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d3c:	f7fe fa9a 	bl	8003274 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d002      	beq.n	8004d54 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
 8004d50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d52:	e0ca      	b.n	8004eea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_SPI_Receive+0x7e>
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d64:	e0c1      	b.n	8004eea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2204      	movs	r2, #4
 8004d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	88fa      	ldrh	r2, [r7, #6]
 8004d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dac:	d10f      	bne.n	8004dce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dcc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d007      	beq.n	8004dec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d162      	bne.n	8004eba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004df4:	e02e      	b.n	8004e54 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d115      	bne.n	8004e30 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f103 020c 	add.w	r2, r3, #12
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e2e:	e011      	b.n	8004e54 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e30:	f7fe fa20 	bl	8003274 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d803      	bhi.n	8004e48 <HAL_SPI_Receive+0x166>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d102      	bne.n	8004e4e <HAL_SPI_Receive+0x16c>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e52:	e04a      	b.n	8004eea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1cb      	bne.n	8004df6 <HAL_SPI_Receive+0x114>
 8004e5e:	e031      	b.n	8004ec4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d113      	bne.n	8004e96 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	b292      	uxth	r2, r2
 8004e7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	1c9a      	adds	r2, r3, #2
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e94:	e011      	b.n	8004eba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e96:	f7fe f9ed 	bl	8003274 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d803      	bhi.n	8004eae <HAL_SPI_Receive+0x1cc>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eac:	d102      	bne.n	8004eb4 <HAL_SPI_Receive+0x1d2>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004eb8:	e017      	b.n	8004eea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1cd      	bne.n	8004e60 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	6839      	ldr	r1, [r7, #0]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fa45 	bl	8005358 <SPI_EndRxTransaction>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	75fb      	strb	r3, [r7, #23]
 8004ee6:	e000      	b.n	8004eea <HAL_SPI_Receive+0x208>
  }

error :
 8004ee8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08c      	sub	sp, #48	; 0x30
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f12:	2301      	movs	r3, #1
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x26>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e18a      	b.n	8005240 <HAL_SPI_TransmitReceive+0x33c>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f32:	f7fe f99f 	bl	8003274 <HAL_GetTick>
 8004f36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f48:	887b      	ldrh	r3, [r7, #2]
 8004f4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d00f      	beq.n	8004f74 <HAL_SPI_TransmitReceive+0x70>
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5a:	d107      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d103      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x68>
 8004f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d003      	beq.n	8004f74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f72:	e15b      	b.n	800522c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_SPI_TransmitReceive+0x82>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SPI_TransmitReceive+0x82>
 8004f80:	887b      	ldrh	r3, [r7, #2]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f8c:	e14e      	b.n	800522c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d003      	beq.n	8004fa2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2205      	movs	r2, #5
 8004f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	887a      	ldrh	r2, [r7, #2]
 8004fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	887a      	ldrh	r2, [r7, #2]
 8004fb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	887a      	ldrh	r2, [r7, #2]
 8004fc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	887a      	ldrh	r2, [r7, #2]
 8004fca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d007      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ff4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffe:	d178      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_SPI_TransmitReceive+0x10a>
 8005008:	8b7b      	ldrh	r3, [r7, #26]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d166      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	881a      	ldrh	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	1c9a      	adds	r2, r3, #2
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005032:	e053      	b.n	80050dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d11b      	bne.n	800507a <HAL_SPI_TransmitReceive+0x176>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d016      	beq.n	800507a <HAL_SPI_TransmitReceive+0x176>
 800504c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d113      	bne.n	800507a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	881a      	ldrh	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	1c9a      	adds	r2, r3, #2
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b01      	cmp	r3, #1
 8005086:	d119      	bne.n	80050bc <HAL_SPI_TransmitReceive+0x1b8>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d014      	beq.n	80050bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	b292      	uxth	r2, r2
 800509e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	1c9a      	adds	r2, r3, #2
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050b8:	2301      	movs	r3, #1
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050bc:	f7fe f8da 	bl	8003274 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d807      	bhi.n	80050dc <HAL_SPI_TransmitReceive+0x1d8>
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d003      	beq.n	80050dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050da:	e0a7      	b.n	800522c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1a6      	bne.n	8005034 <HAL_SPI_TransmitReceive+0x130>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1a1      	bne.n	8005034 <HAL_SPI_TransmitReceive+0x130>
 80050f0:	e07c      	b.n	80051ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_SPI_TransmitReceive+0x1fc>
 80050fa:	8b7b      	ldrh	r3, [r7, #26]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d16b      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	7812      	ldrb	r2, [r2, #0]
 800510c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005126:	e057      	b.n	80051d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b02      	cmp	r3, #2
 8005134:	d11c      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x26c>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d017      	beq.n	8005170 <HAL_SPI_TransmitReceive+0x26c>
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d114      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	7812      	ldrb	r2, [r2, #0]
 8005152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	d119      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x2ae>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d014      	beq.n	80051b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051ae:	2301      	movs	r3, #1
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051b2:	f7fe f85f 	bl	8003274 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051be:	429a      	cmp	r2, r3
 80051c0:	d803      	bhi.n	80051ca <HAL_SPI_TransmitReceive+0x2c6>
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d102      	bne.n	80051d0 <HAL_SPI_TransmitReceive+0x2cc>
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d103      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051d6:	e029      	b.n	800522c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1a2      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x224>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d19d      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f917 	bl	8005424 <SPI_EndRxTxTransaction>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d006      	beq.n	800520a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005208:	e010      	b.n	800522c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10b      	bne.n	800522a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	e000      	b.n	800522c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800522a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800523c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005240:	4618      	mov	r0, r3
 8005242:	3730      	adds	r7, #48	; 0x30
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005258:	f7fe f80c 	bl	8003274 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	1a9b      	subs	r3, r3, r2
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	4413      	add	r3, r2
 8005266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005268:	f7fe f804 	bl	8003274 <HAL_GetTick>
 800526c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800526e:	4b39      	ldr	r3, [pc, #228]	; (8005354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	015b      	lsls	r3, r3, #5
 8005274:	0d1b      	lsrs	r3, r3, #20
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800527e:	e054      	b.n	800532a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005286:	d050      	beq.n	800532a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005288:	f7fd fff4 	bl	8003274 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	429a      	cmp	r2, r3
 8005296:	d902      	bls.n	800529e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d13d      	bne.n	800531a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052b6:	d111      	bne.n	80052dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c0:	d004      	beq.n	80052cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ca:	d107      	bne.n	80052dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e4:	d10f      	bne.n	8005306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e017      	b.n	800534a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3b01      	subs	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4013      	ands	r3, r2
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	429a      	cmp	r2, r3
 8005338:	bf0c      	ite	eq
 800533a:	2301      	moveq	r3, #1
 800533c:	2300      	movne	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	429a      	cmp	r2, r3
 8005346:	d19b      	bne.n	8005280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000010 	.word	0x20000010

08005358 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536c:	d111      	bne.n	8005392 <SPI_EndRxTransaction+0x3a>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005376:	d004      	beq.n	8005382 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005380:	d107      	bne.n	8005392 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005390:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800539a:	d12a      	bne.n	80053f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a4:	d012      	beq.n	80053cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2200      	movs	r2, #0
 80053ae:	2180      	movs	r1, #128	; 0x80
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff ff49 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d02d      	beq.n	8005418 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c0:	f043 0220 	orr.w	r2, r3, #32
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e026      	b.n	800541a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2200      	movs	r2, #0
 80053d4:	2101      	movs	r1, #1
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f7ff ff36 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d01a      	beq.n	8005418 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	f043 0220 	orr.w	r2, r3, #32
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e013      	b.n	800541a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2200      	movs	r2, #0
 80053fa:	2101      	movs	r1, #1
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff ff23 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540c:	f043 0220 	orr.w	r2, r3, #32
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e000      	b.n	800541a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005430:	4b1b      	ldr	r3, [pc, #108]	; (80054a0 <SPI_EndRxTxTransaction+0x7c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <SPI_EndRxTxTransaction+0x80>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	0d5b      	lsrs	r3, r3, #21
 800543c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800544e:	d112      	bne.n	8005476 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2200      	movs	r2, #0
 8005458:	2180      	movs	r1, #128	; 0x80
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff fef4 	bl	8005248 <SPI_WaitFlagStateUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d016      	beq.n	8005494 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	f043 0220 	orr.w	r2, r3, #32
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e00f      	b.n	8005496 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	3b01      	subs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548c:	2b80      	cmp	r3, #128	; 0x80
 800548e:	d0f2      	beq.n	8005476 <SPI_EndRxTxTransaction+0x52>
 8005490:	e000      	b.n	8005494 <SPI_EndRxTxTransaction+0x70>
        break;
 8005492:	bf00      	nop
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000010 	.word	0x20000010
 80054a4:	165e9f81 	.word	0x165e9f81

080054a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e03f      	b.n	800553a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fd fdf8 	bl	80030c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2224      	movs	r2, #36	; 0x24
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f905 	bl	80056fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695a      	ldr	r2, [r3, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b08a      	sub	sp, #40	; 0x28
 8005546:	af02      	add	r7, sp, #8
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b20      	cmp	r3, #32
 8005560:	d17c      	bne.n	800565c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_UART_Transmit+0x2c>
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e075      	b.n	800565e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_UART_Transmit+0x3e>
 800557c:	2302      	movs	r3, #2
 800557e:	e06e      	b.n	800565e <HAL_UART_Transmit+0x11c>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2221      	movs	r2, #33	; 0x21
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005596:	f7fd fe6d 	bl	8003274 <HAL_GetTick>
 800559a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	88fa      	ldrh	r2, [r7, #6]
 80055a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b0:	d108      	bne.n	80055c4 <HAL_UART_Transmit+0x82>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	e003      	b.n	80055cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055d4:	e02a      	b.n	800562c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f840 	bl	8005666 <UART_WaitOnFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e036      	b.n	800565e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3302      	adds	r3, #2
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	e007      	b.n	800561e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	3301      	adds	r3, #1
 800561c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1cf      	bne.n	80055d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2200      	movs	r2, #0
 800563e:	2140      	movs	r1, #64	; 0x40
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f810 	bl	8005666 <UART_WaitOnFlagUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e006      	b.n	800565e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	e000      	b.n	800565e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800565c:	2302      	movs	r3, #2
  }
}
 800565e:	4618      	mov	r0, r3
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005676:	e02c      	b.n	80056d2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d028      	beq.n	80056d2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0x30>
 8005686:	f7fd fdf5 	bl	8003274 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	429a      	cmp	r2, r3
 8005694:	d21d      	bcs.n	80056d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68da      	ldr	r2, [r3, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056a4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e00f      	b.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4013      	ands	r3, r2
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	429a      	cmp	r2, r3
 80056e0:	bf0c      	ite	eq
 80056e2:	2301      	moveq	r3, #1
 80056e4:	2300      	movne	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d0c3      	beq.n	8005678 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	b09f      	sub	sp, #124	; 0x7c
 8005702:	af00      	add	r7, sp, #0
 8005704:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005712:	68d9      	ldr	r1, [r3, #12]
 8005714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	ea40 0301 	orr.w	r3, r0, r1
 800571c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800571e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	431a      	orrs	r2, r3
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	431a      	orrs	r2, r3
 800572e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	4313      	orrs	r3, r2
 8005734:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005740:	f021 010c 	bic.w	r1, r1, #12
 8005744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800574a:	430b      	orrs	r3, r1
 800574c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800574e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575a:	6999      	ldr	r1, [r3, #24]
 800575c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	ea40 0301 	orr.w	r3, r0, r1
 8005764:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4bc5      	ldr	r3, [pc, #788]	; (8005a80 <UART_SetConfig+0x384>)
 800576c:	429a      	cmp	r2, r3
 800576e:	d004      	beq.n	800577a <UART_SetConfig+0x7e>
 8005770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4bc3      	ldr	r3, [pc, #780]	; (8005a84 <UART_SetConfig+0x388>)
 8005776:	429a      	cmp	r2, r3
 8005778:	d103      	bne.n	8005782 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800577a:	f7ff f8d9 	bl	8004930 <HAL_RCC_GetPCLK2Freq>
 800577e:	6778      	str	r0, [r7, #116]	; 0x74
 8005780:	e002      	b.n	8005788 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005782:	f7ff f8c1 	bl	8004908 <HAL_RCC_GetPCLK1Freq>
 8005786:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005790:	f040 80b6 	bne.w	8005900 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005796:	461c      	mov	r4, r3
 8005798:	f04f 0500 	mov.w	r5, #0
 800579c:	4622      	mov	r2, r4
 800579e:	462b      	mov	r3, r5
 80057a0:	1891      	adds	r1, r2, r2
 80057a2:	6439      	str	r1, [r7, #64]	; 0x40
 80057a4:	415b      	adcs	r3, r3
 80057a6:	647b      	str	r3, [r7, #68]	; 0x44
 80057a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057ac:	1912      	adds	r2, r2, r4
 80057ae:	eb45 0303 	adc.w	r3, r5, r3
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f04f 0100 	mov.w	r1, #0
 80057ba:	00d9      	lsls	r1, r3, #3
 80057bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057c0:	00d0      	lsls	r0, r2, #3
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	1911      	adds	r1, r2, r4
 80057c8:	6639      	str	r1, [r7, #96]	; 0x60
 80057ca:	416b      	adcs	r3, r5
 80057cc:	667b      	str	r3, [r7, #100]	; 0x64
 80057ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	1891      	adds	r1, r2, r2
 80057da:	63b9      	str	r1, [r7, #56]	; 0x38
 80057dc:	415b      	adcs	r3, r3
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80057e8:	f7fb fa56 	bl	8000c98 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4ba5      	ldr	r3, [pc, #660]	; (8005a88 <UART_SetConfig+0x38c>)
 80057f2:	fba3 2302 	umull	r2, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	011e      	lsls	r6, r3, #4
 80057fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fc:	461c      	mov	r4, r3
 80057fe:	f04f 0500 	mov.w	r5, #0
 8005802:	4622      	mov	r2, r4
 8005804:	462b      	mov	r3, r5
 8005806:	1891      	adds	r1, r2, r2
 8005808:	6339      	str	r1, [r7, #48]	; 0x30
 800580a:	415b      	adcs	r3, r3
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
 800580e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005812:	1912      	adds	r2, r2, r4
 8005814:	eb45 0303 	adc.w	r3, r5, r3
 8005818:	f04f 0000 	mov.w	r0, #0
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	00d9      	lsls	r1, r3, #3
 8005822:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005826:	00d0      	lsls	r0, r2, #3
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	1911      	adds	r1, r2, r4
 800582e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005830:	416b      	adcs	r3, r5
 8005832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	461a      	mov	r2, r3
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	1891      	adds	r1, r2, r2
 8005840:	62b9      	str	r1, [r7, #40]	; 0x28
 8005842:	415b      	adcs	r3, r3
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800584a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800584e:	f7fb fa23 	bl	8000c98 <__aeabi_uldivmod>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4b8c      	ldr	r3, [pc, #560]	; (8005a88 <UART_SetConfig+0x38c>)
 8005858:	fba3 1302 	umull	r1, r3, r3, r2
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	2164      	movs	r1, #100	; 0x64
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	3332      	adds	r3, #50	; 0x32
 800586a:	4a87      	ldr	r2, [pc, #540]	; (8005a88 <UART_SetConfig+0x38c>)
 800586c:	fba2 2303 	umull	r2, r3, r2, r3
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005878:	441e      	add	r6, r3
 800587a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800587c:	4618      	mov	r0, r3
 800587e:	f04f 0100 	mov.w	r1, #0
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	1894      	adds	r4, r2, r2
 8005888:	623c      	str	r4, [r7, #32]
 800588a:	415b      	adcs	r3, r3
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
 800588e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005892:	1812      	adds	r2, r2, r0
 8005894:	eb41 0303 	adc.w	r3, r1, r3
 8005898:	f04f 0400 	mov.w	r4, #0
 800589c:	f04f 0500 	mov.w	r5, #0
 80058a0:	00dd      	lsls	r5, r3, #3
 80058a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058a6:	00d4      	lsls	r4, r2, #3
 80058a8:	4622      	mov	r2, r4
 80058aa:	462b      	mov	r3, r5
 80058ac:	1814      	adds	r4, r2, r0
 80058ae:	653c      	str	r4, [r7, #80]	; 0x50
 80058b0:	414b      	adcs	r3, r1
 80058b2:	657b      	str	r3, [r7, #84]	; 0x54
 80058b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	461a      	mov	r2, r3
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	1891      	adds	r1, r2, r2
 80058c0:	61b9      	str	r1, [r7, #24]
 80058c2:	415b      	adcs	r3, r3
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058ce:	f7fb f9e3 	bl	8000c98 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4b6c      	ldr	r3, [pc, #432]	; (8005a88 <UART_SetConfig+0x38c>)
 80058d8:	fba3 1302 	umull	r1, r3, r3, r2
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	2164      	movs	r1, #100	; 0x64
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	3332      	adds	r3, #50	; 0x32
 80058ea:	4a67      	ldr	r2, [pc, #412]	; (8005a88 <UART_SetConfig+0x38c>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f003 0207 	and.w	r2, r3, #7
 80058f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4432      	add	r2, r6
 80058fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058fe:	e0b9      	b.n	8005a74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005902:	461c      	mov	r4, r3
 8005904:	f04f 0500 	mov.w	r5, #0
 8005908:	4622      	mov	r2, r4
 800590a:	462b      	mov	r3, r5
 800590c:	1891      	adds	r1, r2, r2
 800590e:	6139      	str	r1, [r7, #16]
 8005910:	415b      	adcs	r3, r3
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005918:	1912      	adds	r2, r2, r4
 800591a:	eb45 0303 	adc.w	r3, r5, r3
 800591e:	f04f 0000 	mov.w	r0, #0
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	00d9      	lsls	r1, r3, #3
 8005928:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800592c:	00d0      	lsls	r0, r2, #3
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	eb12 0804 	adds.w	r8, r2, r4
 8005936:	eb43 0905 	adc.w	r9, r3, r5
 800593a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4618      	mov	r0, r3
 8005940:	f04f 0100 	mov.w	r1, #0
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	008b      	lsls	r3, r1, #2
 800594e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005952:	0082      	lsls	r2, r0, #2
 8005954:	4640      	mov	r0, r8
 8005956:	4649      	mov	r1, r9
 8005958:	f7fb f99e 	bl	8000c98 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4b49      	ldr	r3, [pc, #292]	; (8005a88 <UART_SetConfig+0x38c>)
 8005962:	fba3 2302 	umull	r2, r3, r3, r2
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	011e      	lsls	r6, r3, #4
 800596a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800596c:	4618      	mov	r0, r3
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	1894      	adds	r4, r2, r2
 8005978:	60bc      	str	r4, [r7, #8]
 800597a:	415b      	adcs	r3, r3
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005982:	1812      	adds	r2, r2, r0
 8005984:	eb41 0303 	adc.w	r3, r1, r3
 8005988:	f04f 0400 	mov.w	r4, #0
 800598c:	f04f 0500 	mov.w	r5, #0
 8005990:	00dd      	lsls	r5, r3, #3
 8005992:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005996:	00d4      	lsls	r4, r2, #3
 8005998:	4622      	mov	r2, r4
 800599a:	462b      	mov	r3, r5
 800599c:	1814      	adds	r4, r2, r0
 800599e:	64bc      	str	r4, [r7, #72]	; 0x48
 80059a0:	414b      	adcs	r3, r1
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f04f 0100 	mov.w	r1, #0
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	008b      	lsls	r3, r1, #2
 80059b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059bc:	0082      	lsls	r2, r0, #2
 80059be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059c2:	f7fb f969 	bl	8000c98 <__aeabi_uldivmod>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4b2f      	ldr	r3, [pc, #188]	; (8005a88 <UART_SetConfig+0x38c>)
 80059cc:	fba3 1302 	umull	r1, r3, r3, r2
 80059d0:	095b      	lsrs	r3, r3, #5
 80059d2:	2164      	movs	r1, #100	; 0x64
 80059d4:	fb01 f303 	mul.w	r3, r1, r3
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	3332      	adds	r3, #50	; 0x32
 80059de:	4a2a      	ldr	r2, [pc, #168]	; (8005a88 <UART_SetConfig+0x38c>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ea:	441e      	add	r6, r3
 80059ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ee:	4618      	mov	r0, r3
 80059f0:	f04f 0100 	mov.w	r1, #0
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	1894      	adds	r4, r2, r2
 80059fa:	603c      	str	r4, [r7, #0]
 80059fc:	415b      	adcs	r3, r3
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a04:	1812      	adds	r2, r2, r0
 8005a06:	eb41 0303 	adc.w	r3, r1, r3
 8005a0a:	f04f 0400 	mov.w	r4, #0
 8005a0e:	f04f 0500 	mov.w	r5, #0
 8005a12:	00dd      	lsls	r5, r3, #3
 8005a14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a18:	00d4      	lsls	r4, r2, #3
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	eb12 0a00 	adds.w	sl, r2, r0
 8005a22:	eb43 0b01 	adc.w	fp, r3, r1
 8005a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	008b      	lsls	r3, r1, #2
 8005a3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a3e:	0082      	lsls	r2, r0, #2
 8005a40:	4650      	mov	r0, sl
 8005a42:	4659      	mov	r1, fp
 8005a44:	f7fb f928 	bl	8000c98 <__aeabi_uldivmod>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <UART_SetConfig+0x38c>)
 8005a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	2164      	movs	r1, #100	; 0x64
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	3332      	adds	r3, #50	; 0x32
 8005a60:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <UART_SetConfig+0x38c>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	f003 020f 	and.w	r2, r3, #15
 8005a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4432      	add	r2, r6
 8005a72:	609a      	str	r2, [r3, #8]
}
 8005a74:	bf00      	nop
 8005a76:	377c      	adds	r7, #124	; 0x7c
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7e:	bf00      	nop
 8005a80:	40011000 	.word	0x40011000
 8005a84:	40011400 	.word	0x40011400
 8005a88:	51eb851f 	.word	0x51eb851f

08005a8c <atof>:
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	f001 baf1 	b.w	8007074 <strtod>
	...

08005a94 <__errno>:
 8005a94:	4b01      	ldr	r3, [pc, #4]	; (8005a9c <__errno+0x8>)
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	2000001c 	.word	0x2000001c

08005aa0 <__libc_init_array>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	4d0d      	ldr	r5, [pc, #52]	; (8005ad8 <__libc_init_array+0x38>)
 8005aa4:	4c0d      	ldr	r4, [pc, #52]	; (8005adc <__libc_init_array+0x3c>)
 8005aa6:	1b64      	subs	r4, r4, r5
 8005aa8:	10a4      	asrs	r4, r4, #2
 8005aaa:	2600      	movs	r6, #0
 8005aac:	42a6      	cmp	r6, r4
 8005aae:	d109      	bne.n	8005ac4 <__libc_init_array+0x24>
 8005ab0:	4d0b      	ldr	r5, [pc, #44]	; (8005ae0 <__libc_init_array+0x40>)
 8005ab2:	4c0c      	ldr	r4, [pc, #48]	; (8005ae4 <__libc_init_array+0x44>)
 8005ab4:	f004 f9b0 	bl	8009e18 <_init>
 8005ab8:	1b64      	subs	r4, r4, r5
 8005aba:	10a4      	asrs	r4, r4, #2
 8005abc:	2600      	movs	r6, #0
 8005abe:	42a6      	cmp	r6, r4
 8005ac0:	d105      	bne.n	8005ace <__libc_init_array+0x2e>
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac8:	4798      	blx	r3
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7ee      	b.n	8005aac <__libc_init_array+0xc>
 8005ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad2:	4798      	blx	r3
 8005ad4:	3601      	adds	r6, #1
 8005ad6:	e7f2      	b.n	8005abe <__libc_init_array+0x1e>
 8005ad8:	0800b2dc 	.word	0x0800b2dc
 8005adc:	0800b2dc 	.word	0x0800b2dc
 8005ae0:	0800b2dc 	.word	0x0800b2dc
 8005ae4:	0800b2e0 	.word	0x0800b2e0

08005ae8 <memcpy>:
 8005ae8:	440a      	add	r2, r1
 8005aea:	4291      	cmp	r1, r2
 8005aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005af0:	d100      	bne.n	8005af4 <memcpy+0xc>
 8005af2:	4770      	bx	lr
 8005af4:	b510      	push	{r4, lr}
 8005af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005afe:	4291      	cmp	r1, r2
 8005b00:	d1f9      	bne.n	8005af6 <memcpy+0xe>
 8005b02:	bd10      	pop	{r4, pc}

08005b04 <memset>:
 8005b04:	4402      	add	r2, r0
 8005b06:	4603      	mov	r3, r0
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d100      	bne.n	8005b0e <memset+0xa>
 8005b0c:	4770      	bx	lr
 8005b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b12:	e7f9      	b.n	8005b08 <memset+0x4>

08005b14 <__cvt>:
 8005b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	ec55 4b10 	vmov	r4, r5, d0
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	460e      	mov	r6, r1
 8005b20:	4619      	mov	r1, r3
 8005b22:	462b      	mov	r3, r5
 8005b24:	bfbb      	ittet	lt
 8005b26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b2a:	461d      	movlt	r5, r3
 8005b2c:	2300      	movge	r3, #0
 8005b2e:	232d      	movlt	r3, #45	; 0x2d
 8005b30:	700b      	strb	r3, [r1, #0]
 8005b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b38:	4691      	mov	r9, r2
 8005b3a:	f023 0820 	bic.w	r8, r3, #32
 8005b3e:	bfbc      	itt	lt
 8005b40:	4622      	movlt	r2, r4
 8005b42:	4614      	movlt	r4, r2
 8005b44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b48:	d005      	beq.n	8005b56 <__cvt+0x42>
 8005b4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b4e:	d100      	bne.n	8005b52 <__cvt+0x3e>
 8005b50:	3601      	adds	r6, #1
 8005b52:	2102      	movs	r1, #2
 8005b54:	e000      	b.n	8005b58 <__cvt+0x44>
 8005b56:	2103      	movs	r1, #3
 8005b58:	ab03      	add	r3, sp, #12
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	ab02      	add	r3, sp, #8
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	ec45 4b10 	vmov	d0, r4, r5
 8005b64:	4653      	mov	r3, sl
 8005b66:	4632      	mov	r2, r6
 8005b68:	f001 fb1e 	bl	80071a8 <_dtoa_r>
 8005b6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b70:	4607      	mov	r7, r0
 8005b72:	d102      	bne.n	8005b7a <__cvt+0x66>
 8005b74:	f019 0f01 	tst.w	r9, #1
 8005b78:	d022      	beq.n	8005bc0 <__cvt+0xac>
 8005b7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b7e:	eb07 0906 	add.w	r9, r7, r6
 8005b82:	d110      	bne.n	8005ba6 <__cvt+0x92>
 8005b84:	783b      	ldrb	r3, [r7, #0]
 8005b86:	2b30      	cmp	r3, #48	; 0x30
 8005b88:	d10a      	bne.n	8005ba0 <__cvt+0x8c>
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	4620      	mov	r0, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	f7fa ffa1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b96:	b918      	cbnz	r0, 8005ba0 <__cvt+0x8c>
 8005b98:	f1c6 0601 	rsb	r6, r6, #1
 8005b9c:	f8ca 6000 	str.w	r6, [sl]
 8005ba0:	f8da 3000 	ldr.w	r3, [sl]
 8005ba4:	4499      	add	r9, r3
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4620      	mov	r0, r4
 8005bac:	4629      	mov	r1, r5
 8005bae:	f7fa ff93 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bb2:	b108      	cbz	r0, 8005bb8 <__cvt+0xa4>
 8005bb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bb8:	2230      	movs	r2, #48	; 0x30
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	454b      	cmp	r3, r9
 8005bbe:	d307      	bcc.n	8005bd0 <__cvt+0xbc>
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bc4:	1bdb      	subs	r3, r3, r7
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	b004      	add	sp, #16
 8005bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd0:	1c59      	adds	r1, r3, #1
 8005bd2:	9103      	str	r1, [sp, #12]
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	e7f0      	b.n	8005bba <__cvt+0xa6>

08005bd8 <__exponent>:
 8005bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	bfb8      	it	lt
 8005be0:	4249      	neglt	r1, r1
 8005be2:	f803 2b02 	strb.w	r2, [r3], #2
 8005be6:	bfb4      	ite	lt
 8005be8:	222d      	movlt	r2, #45	; 0x2d
 8005bea:	222b      	movge	r2, #43	; 0x2b
 8005bec:	2909      	cmp	r1, #9
 8005bee:	7042      	strb	r2, [r0, #1]
 8005bf0:	dd2a      	ble.n	8005c48 <__exponent+0x70>
 8005bf2:	f10d 0407 	add.w	r4, sp, #7
 8005bf6:	46a4      	mov	ip, r4
 8005bf8:	270a      	movs	r7, #10
 8005bfa:	46a6      	mov	lr, r4
 8005bfc:	460a      	mov	r2, r1
 8005bfe:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c02:	fb07 1516 	mls	r5, r7, r6, r1
 8005c06:	3530      	adds	r5, #48	; 0x30
 8005c08:	2a63      	cmp	r2, #99	; 0x63
 8005c0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c12:	4631      	mov	r1, r6
 8005c14:	dcf1      	bgt.n	8005bfa <__exponent+0x22>
 8005c16:	3130      	adds	r1, #48	; 0x30
 8005c18:	f1ae 0502 	sub.w	r5, lr, #2
 8005c1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c20:	1c44      	adds	r4, r0, #1
 8005c22:	4629      	mov	r1, r5
 8005c24:	4561      	cmp	r1, ip
 8005c26:	d30a      	bcc.n	8005c3e <__exponent+0x66>
 8005c28:	f10d 0209 	add.w	r2, sp, #9
 8005c2c:	eba2 020e 	sub.w	r2, r2, lr
 8005c30:	4565      	cmp	r5, ip
 8005c32:	bf88      	it	hi
 8005c34:	2200      	movhi	r2, #0
 8005c36:	4413      	add	r3, r2
 8005c38:	1a18      	subs	r0, r3, r0
 8005c3a:	b003      	add	sp, #12
 8005c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c46:	e7ed      	b.n	8005c24 <__exponent+0x4c>
 8005c48:	2330      	movs	r3, #48	; 0x30
 8005c4a:	3130      	adds	r1, #48	; 0x30
 8005c4c:	7083      	strb	r3, [r0, #2]
 8005c4e:	70c1      	strb	r1, [r0, #3]
 8005c50:	1d03      	adds	r3, r0, #4
 8005c52:	e7f1      	b.n	8005c38 <__exponent+0x60>

08005c54 <_printf_float>:
 8005c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c58:	ed2d 8b02 	vpush	{d8}
 8005c5c:	b08d      	sub	sp, #52	; 0x34
 8005c5e:	460c      	mov	r4, r1
 8005c60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c64:	4616      	mov	r6, r2
 8005c66:	461f      	mov	r7, r3
 8005c68:	4605      	mov	r5, r0
 8005c6a:	f002 fbf9 	bl	8008460 <_localeconv_r>
 8005c6e:	f8d0 a000 	ldr.w	sl, [r0]
 8005c72:	4650      	mov	r0, sl
 8005c74:	f7fa fab4 	bl	80001e0 <strlen>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	9305      	str	r3, [sp, #20]
 8005c80:	f8d8 3000 	ldr.w	r3, [r8]
 8005c84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c88:	3307      	adds	r3, #7
 8005c8a:	f023 0307 	bic.w	r3, r3, #7
 8005c8e:	f103 0208 	add.w	r2, r3, #8
 8005c92:	f8c8 2000 	str.w	r2, [r8]
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ca6:	9307      	str	r3, [sp, #28]
 8005ca8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cac:	ee08 0a10 	vmov	s16, r0
 8005cb0:	4b9f      	ldr	r3, [pc, #636]	; (8005f30 <_printf_float+0x2dc>)
 8005cb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cba:	f7fa ff3f 	bl	8000b3c <__aeabi_dcmpun>
 8005cbe:	bb88      	cbnz	r0, 8005d24 <_printf_float+0xd0>
 8005cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cc4:	4b9a      	ldr	r3, [pc, #616]	; (8005f30 <_printf_float+0x2dc>)
 8005cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cca:	f7fa ff19 	bl	8000b00 <__aeabi_dcmple>
 8005cce:	bb48      	cbnz	r0, 8005d24 <_printf_float+0xd0>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	f7fa ff08 	bl	8000aec <__aeabi_dcmplt>
 8005cdc:	b110      	cbz	r0, 8005ce4 <_printf_float+0x90>
 8005cde:	232d      	movs	r3, #45	; 0x2d
 8005ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ce4:	4b93      	ldr	r3, [pc, #588]	; (8005f34 <_printf_float+0x2e0>)
 8005ce6:	4894      	ldr	r0, [pc, #592]	; (8005f38 <_printf_float+0x2e4>)
 8005ce8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005cec:	bf94      	ite	ls
 8005cee:	4698      	movls	r8, r3
 8005cf0:	4680      	movhi	r8, r0
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	6123      	str	r3, [r4, #16]
 8005cf6:	9b05      	ldr	r3, [sp, #20]
 8005cf8:	f023 0204 	bic.w	r2, r3, #4
 8005cfc:	6022      	str	r2, [r4, #0]
 8005cfe:	f04f 0900 	mov.w	r9, #0
 8005d02:	9700      	str	r7, [sp, #0]
 8005d04:	4633      	mov	r3, r6
 8005d06:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d08:	4621      	mov	r1, r4
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f000 f9d8 	bl	80060c0 <_printf_common>
 8005d10:	3001      	adds	r0, #1
 8005d12:	f040 8090 	bne.w	8005e36 <_printf_float+0x1e2>
 8005d16:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1a:	b00d      	add	sp, #52	; 0x34
 8005d1c:	ecbd 8b02 	vpop	{d8}
 8005d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	4640      	mov	r0, r8
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	f7fa ff06 	bl	8000b3c <__aeabi_dcmpun>
 8005d30:	b140      	cbz	r0, 8005d44 <_printf_float+0xf0>
 8005d32:	464b      	mov	r3, r9
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bfbc      	itt	lt
 8005d38:	232d      	movlt	r3, #45	; 0x2d
 8005d3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d3e:	487f      	ldr	r0, [pc, #508]	; (8005f3c <_printf_float+0x2e8>)
 8005d40:	4b7f      	ldr	r3, [pc, #508]	; (8005f40 <_printf_float+0x2ec>)
 8005d42:	e7d1      	b.n	8005ce8 <_printf_float+0x94>
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d4a:	9206      	str	r2, [sp, #24]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	d13f      	bne.n	8005dd0 <_printf_float+0x17c>
 8005d50:	2306      	movs	r3, #6
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	9b05      	ldr	r3, [sp, #20]
 8005d56:	6861      	ldr	r1, [r4, #4]
 8005d58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	9303      	str	r3, [sp, #12]
 8005d60:	ab0a      	add	r3, sp, #40	; 0x28
 8005d62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d66:	ab09      	add	r3, sp, #36	; 0x24
 8005d68:	ec49 8b10 	vmov	d0, r8, r9
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	6022      	str	r2, [r4, #0]
 8005d70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d74:	4628      	mov	r0, r5
 8005d76:	f7ff fecd 	bl	8005b14 <__cvt>
 8005d7a:	9b06      	ldr	r3, [sp, #24]
 8005d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d7e:	2b47      	cmp	r3, #71	; 0x47
 8005d80:	4680      	mov	r8, r0
 8005d82:	d108      	bne.n	8005d96 <_printf_float+0x142>
 8005d84:	1cc8      	adds	r0, r1, #3
 8005d86:	db02      	blt.n	8005d8e <_printf_float+0x13a>
 8005d88:	6863      	ldr	r3, [r4, #4]
 8005d8a:	4299      	cmp	r1, r3
 8005d8c:	dd41      	ble.n	8005e12 <_printf_float+0x1be>
 8005d8e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d92:	fa5f fb8b 	uxtb.w	fp, fp
 8005d96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d9a:	d820      	bhi.n	8005dde <_printf_float+0x18a>
 8005d9c:	3901      	subs	r1, #1
 8005d9e:	465a      	mov	r2, fp
 8005da0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005da4:	9109      	str	r1, [sp, #36]	; 0x24
 8005da6:	f7ff ff17 	bl	8005bd8 <__exponent>
 8005daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dac:	1813      	adds	r3, r2, r0
 8005dae:	2a01      	cmp	r2, #1
 8005db0:	4681      	mov	r9, r0
 8005db2:	6123      	str	r3, [r4, #16]
 8005db4:	dc02      	bgt.n	8005dbc <_printf_float+0x168>
 8005db6:	6822      	ldr	r2, [r4, #0]
 8005db8:	07d2      	lsls	r2, r2, #31
 8005dba:	d501      	bpl.n	8005dc0 <_printf_float+0x16c>
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	6123      	str	r3, [r4, #16]
 8005dc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d09c      	beq.n	8005d02 <_printf_float+0xae>
 8005dc8:	232d      	movs	r3, #45	; 0x2d
 8005dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dce:	e798      	b.n	8005d02 <_printf_float+0xae>
 8005dd0:	9a06      	ldr	r2, [sp, #24]
 8005dd2:	2a47      	cmp	r2, #71	; 0x47
 8005dd4:	d1be      	bne.n	8005d54 <_printf_float+0x100>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1bc      	bne.n	8005d54 <_printf_float+0x100>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e7b9      	b.n	8005d52 <_printf_float+0xfe>
 8005dde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005de2:	d118      	bne.n	8005e16 <_printf_float+0x1c2>
 8005de4:	2900      	cmp	r1, #0
 8005de6:	6863      	ldr	r3, [r4, #4]
 8005de8:	dd0b      	ble.n	8005e02 <_printf_float+0x1ae>
 8005dea:	6121      	str	r1, [r4, #16]
 8005dec:	b913      	cbnz	r3, 8005df4 <_printf_float+0x1a0>
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	07d0      	lsls	r0, r2, #31
 8005df2:	d502      	bpl.n	8005dfa <_printf_float+0x1a6>
 8005df4:	3301      	adds	r3, #1
 8005df6:	440b      	add	r3, r1
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8005dfc:	f04f 0900 	mov.w	r9, #0
 8005e00:	e7de      	b.n	8005dc0 <_printf_float+0x16c>
 8005e02:	b913      	cbnz	r3, 8005e0a <_printf_float+0x1b6>
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	07d2      	lsls	r2, r2, #31
 8005e08:	d501      	bpl.n	8005e0e <_printf_float+0x1ba>
 8005e0a:	3302      	adds	r3, #2
 8005e0c:	e7f4      	b.n	8005df8 <_printf_float+0x1a4>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e7f2      	b.n	8005df8 <_printf_float+0x1a4>
 8005e12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e18:	4299      	cmp	r1, r3
 8005e1a:	db05      	blt.n	8005e28 <_printf_float+0x1d4>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	6121      	str	r1, [r4, #16]
 8005e20:	07d8      	lsls	r0, r3, #31
 8005e22:	d5ea      	bpl.n	8005dfa <_printf_float+0x1a6>
 8005e24:	1c4b      	adds	r3, r1, #1
 8005e26:	e7e7      	b.n	8005df8 <_printf_float+0x1a4>
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	bfd4      	ite	le
 8005e2c:	f1c1 0202 	rsble	r2, r1, #2
 8005e30:	2201      	movgt	r2, #1
 8005e32:	4413      	add	r3, r2
 8005e34:	e7e0      	b.n	8005df8 <_printf_float+0x1a4>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	055a      	lsls	r2, r3, #21
 8005e3a:	d407      	bmi.n	8005e4c <_printf_float+0x1f8>
 8005e3c:	6923      	ldr	r3, [r4, #16]
 8005e3e:	4642      	mov	r2, r8
 8005e40:	4631      	mov	r1, r6
 8005e42:	4628      	mov	r0, r5
 8005e44:	47b8      	blx	r7
 8005e46:	3001      	adds	r0, #1
 8005e48:	d12c      	bne.n	8005ea4 <_printf_float+0x250>
 8005e4a:	e764      	b.n	8005d16 <_printf_float+0xc2>
 8005e4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e50:	f240 80e0 	bls.w	8006014 <_printf_float+0x3c0>
 8005e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f7fa fe3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d034      	beq.n	8005ece <_printf_float+0x27a>
 8005e64:	4a37      	ldr	r2, [pc, #220]	; (8005f44 <_printf_float+0x2f0>)
 8005e66:	2301      	movs	r3, #1
 8005e68:	4631      	mov	r1, r6
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	47b8      	blx	r7
 8005e6e:	3001      	adds	r0, #1
 8005e70:	f43f af51 	beq.w	8005d16 <_printf_float+0xc2>
 8005e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	db02      	blt.n	8005e82 <_printf_float+0x22e>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	07d8      	lsls	r0, r3, #31
 8005e80:	d510      	bpl.n	8005ea4 <_printf_float+0x250>
 8005e82:	ee18 3a10 	vmov	r3, s16
 8005e86:	4652      	mov	r2, sl
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f43f af41 	beq.w	8005d16 <_printf_float+0xc2>
 8005e94:	f04f 0800 	mov.w	r8, #0
 8005e98:	f104 091a 	add.w	r9, r4, #26
 8005e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	4543      	cmp	r3, r8
 8005ea2:	dc09      	bgt.n	8005eb8 <_printf_float+0x264>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	079b      	lsls	r3, r3, #30
 8005ea8:	f100 8105 	bmi.w	80060b6 <_printf_float+0x462>
 8005eac:	68e0      	ldr	r0, [r4, #12]
 8005eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb0:	4298      	cmp	r0, r3
 8005eb2:	bfb8      	it	lt
 8005eb4:	4618      	movlt	r0, r3
 8005eb6:	e730      	b.n	8005d1a <_printf_float+0xc6>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	464a      	mov	r2, r9
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	47b8      	blx	r7
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	f43f af27 	beq.w	8005d16 <_printf_float+0xc2>
 8005ec8:	f108 0801 	add.w	r8, r8, #1
 8005ecc:	e7e6      	b.n	8005e9c <_printf_float+0x248>
 8005ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dc39      	bgt.n	8005f48 <_printf_float+0x2f4>
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <_printf_float+0x2f0>)
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f af19 	beq.w	8005d16 <_printf_float+0xc2>
 8005ee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	d102      	bne.n	8005ef2 <_printf_float+0x29e>
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	07d9      	lsls	r1, r3, #31
 8005ef0:	d5d8      	bpl.n	8005ea4 <_printf_float+0x250>
 8005ef2:	ee18 3a10 	vmov	r3, s16
 8005ef6:	4652      	mov	r2, sl
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b8      	blx	r7
 8005efe:	3001      	adds	r0, #1
 8005f00:	f43f af09 	beq.w	8005d16 <_printf_float+0xc2>
 8005f04:	f04f 0900 	mov.w	r9, #0
 8005f08:	f104 0a1a 	add.w	sl, r4, #26
 8005f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0e:	425b      	negs	r3, r3
 8005f10:	454b      	cmp	r3, r9
 8005f12:	dc01      	bgt.n	8005f18 <_printf_float+0x2c4>
 8005f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f16:	e792      	b.n	8005e3e <_printf_float+0x1ea>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4652      	mov	r2, sl
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	f43f aef7 	beq.w	8005d16 <_printf_float+0xc2>
 8005f28:	f109 0901 	add.w	r9, r9, #1
 8005f2c:	e7ee      	b.n	8005f0c <_printf_float+0x2b8>
 8005f2e:	bf00      	nop
 8005f30:	7fefffff 	.word	0x7fefffff
 8005f34:	0800ae2c 	.word	0x0800ae2c
 8005f38:	0800ae30 	.word	0x0800ae30
 8005f3c:	0800ae38 	.word	0x0800ae38
 8005f40:	0800ae34 	.word	0x0800ae34
 8005f44:	0800ae3c 	.word	0x0800ae3c
 8005f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	bfa8      	it	ge
 8005f50:	461a      	movge	r2, r3
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	4691      	mov	r9, r2
 8005f56:	dc37      	bgt.n	8005fc8 <_printf_float+0x374>
 8005f58:	f04f 0b00 	mov.w	fp, #0
 8005f5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f60:	f104 021a 	add.w	r2, r4, #26
 8005f64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f66:	9305      	str	r3, [sp, #20]
 8005f68:	eba3 0309 	sub.w	r3, r3, r9
 8005f6c:	455b      	cmp	r3, fp
 8005f6e:	dc33      	bgt.n	8005fd8 <_printf_float+0x384>
 8005f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f74:	429a      	cmp	r2, r3
 8005f76:	db3b      	blt.n	8005ff0 <_printf_float+0x39c>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	07da      	lsls	r2, r3, #31
 8005f7c:	d438      	bmi.n	8005ff0 <_printf_float+0x39c>
 8005f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	eba2 0901 	sub.w	r9, r2, r1
 8005f8a:	4599      	cmp	r9, r3
 8005f8c:	bfa8      	it	ge
 8005f8e:	4699      	movge	r9, r3
 8005f90:	f1b9 0f00 	cmp.w	r9, #0
 8005f94:	dc35      	bgt.n	8006002 <_printf_float+0x3ae>
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f9e:	f104 0a1a 	add.w	sl, r4, #26
 8005fa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	eba3 0309 	sub.w	r3, r3, r9
 8005fac:	4543      	cmp	r3, r8
 8005fae:	f77f af79 	ble.w	8005ea4 <_printf_float+0x250>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4652      	mov	r2, sl
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4628      	mov	r0, r5
 8005fba:	47b8      	blx	r7
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f43f aeaa 	beq.w	8005d16 <_printf_float+0xc2>
 8005fc2:	f108 0801 	add.w	r8, r8, #1
 8005fc6:	e7ec      	b.n	8005fa2 <_printf_float+0x34e>
 8005fc8:	4613      	mov	r3, r2
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4642      	mov	r2, r8
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b8      	blx	r7
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d1c0      	bne.n	8005f58 <_printf_float+0x304>
 8005fd6:	e69e      	b.n	8005d16 <_printf_float+0xc2>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	9205      	str	r2, [sp, #20]
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f43f ae97 	beq.w	8005d16 <_printf_float+0xc2>
 8005fe8:	9a05      	ldr	r2, [sp, #20]
 8005fea:	f10b 0b01 	add.w	fp, fp, #1
 8005fee:	e7b9      	b.n	8005f64 <_printf_float+0x310>
 8005ff0:	ee18 3a10 	vmov	r3, s16
 8005ff4:	4652      	mov	r2, sl
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b8      	blx	r7
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d1be      	bne.n	8005f7e <_printf_float+0x32a>
 8006000:	e689      	b.n	8005d16 <_printf_float+0xc2>
 8006002:	9a05      	ldr	r2, [sp, #20]
 8006004:	464b      	mov	r3, r9
 8006006:	4442      	add	r2, r8
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	d1c1      	bne.n	8005f96 <_printf_float+0x342>
 8006012:	e680      	b.n	8005d16 <_printf_float+0xc2>
 8006014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006016:	2a01      	cmp	r2, #1
 8006018:	dc01      	bgt.n	800601e <_printf_float+0x3ca>
 800601a:	07db      	lsls	r3, r3, #31
 800601c:	d538      	bpl.n	8006090 <_printf_float+0x43c>
 800601e:	2301      	movs	r3, #1
 8006020:	4642      	mov	r2, r8
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	f43f ae74 	beq.w	8005d16 <_printf_float+0xc2>
 800602e:	ee18 3a10 	vmov	r3, s16
 8006032:	4652      	mov	r2, sl
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	f43f ae6b 	beq.w	8005d16 <_printf_float+0xc2>
 8006040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	f7fa fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 800604c:	b9d8      	cbnz	r0, 8006086 <_printf_float+0x432>
 800604e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006050:	f108 0201 	add.w	r2, r8, #1
 8006054:	3b01      	subs	r3, #1
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	d10e      	bne.n	800607e <_printf_float+0x42a>
 8006060:	e659      	b.n	8005d16 <_printf_float+0xc2>
 8006062:	2301      	movs	r3, #1
 8006064:	4652      	mov	r2, sl
 8006066:	4631      	mov	r1, r6
 8006068:	4628      	mov	r0, r5
 800606a:	47b8      	blx	r7
 800606c:	3001      	adds	r0, #1
 800606e:	f43f ae52 	beq.w	8005d16 <_printf_float+0xc2>
 8006072:	f108 0801 	add.w	r8, r8, #1
 8006076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006078:	3b01      	subs	r3, #1
 800607a:	4543      	cmp	r3, r8
 800607c:	dcf1      	bgt.n	8006062 <_printf_float+0x40e>
 800607e:	464b      	mov	r3, r9
 8006080:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006084:	e6dc      	b.n	8005e40 <_printf_float+0x1ec>
 8006086:	f04f 0800 	mov.w	r8, #0
 800608a:	f104 0a1a 	add.w	sl, r4, #26
 800608e:	e7f2      	b.n	8006076 <_printf_float+0x422>
 8006090:	2301      	movs	r3, #1
 8006092:	4642      	mov	r2, r8
 8006094:	e7df      	b.n	8006056 <_printf_float+0x402>
 8006096:	2301      	movs	r3, #1
 8006098:	464a      	mov	r2, r9
 800609a:	4631      	mov	r1, r6
 800609c:	4628      	mov	r0, r5
 800609e:	47b8      	blx	r7
 80060a0:	3001      	adds	r0, #1
 80060a2:	f43f ae38 	beq.w	8005d16 <_printf_float+0xc2>
 80060a6:	f108 0801 	add.w	r8, r8, #1
 80060aa:	68e3      	ldr	r3, [r4, #12]
 80060ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060ae:	1a5b      	subs	r3, r3, r1
 80060b0:	4543      	cmp	r3, r8
 80060b2:	dcf0      	bgt.n	8006096 <_printf_float+0x442>
 80060b4:	e6fa      	b.n	8005eac <_printf_float+0x258>
 80060b6:	f04f 0800 	mov.w	r8, #0
 80060ba:	f104 0919 	add.w	r9, r4, #25
 80060be:	e7f4      	b.n	80060aa <_printf_float+0x456>

080060c0 <_printf_common>:
 80060c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c4:	4616      	mov	r6, r2
 80060c6:	4699      	mov	r9, r3
 80060c8:	688a      	ldr	r2, [r1, #8]
 80060ca:	690b      	ldr	r3, [r1, #16]
 80060cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060d0:	4293      	cmp	r3, r2
 80060d2:	bfb8      	it	lt
 80060d4:	4613      	movlt	r3, r2
 80060d6:	6033      	str	r3, [r6, #0]
 80060d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060dc:	4607      	mov	r7, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	b10a      	cbz	r2, 80060e6 <_printf_common+0x26>
 80060e2:	3301      	adds	r3, #1
 80060e4:	6033      	str	r3, [r6, #0]
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	0699      	lsls	r1, r3, #26
 80060ea:	bf42      	ittt	mi
 80060ec:	6833      	ldrmi	r3, [r6, #0]
 80060ee:	3302      	addmi	r3, #2
 80060f0:	6033      	strmi	r3, [r6, #0]
 80060f2:	6825      	ldr	r5, [r4, #0]
 80060f4:	f015 0506 	ands.w	r5, r5, #6
 80060f8:	d106      	bne.n	8006108 <_printf_common+0x48>
 80060fa:	f104 0a19 	add.w	sl, r4, #25
 80060fe:	68e3      	ldr	r3, [r4, #12]
 8006100:	6832      	ldr	r2, [r6, #0]
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	42ab      	cmp	r3, r5
 8006106:	dc26      	bgt.n	8006156 <_printf_common+0x96>
 8006108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800610c:	1e13      	subs	r3, r2, #0
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	bf18      	it	ne
 8006112:	2301      	movne	r3, #1
 8006114:	0692      	lsls	r2, r2, #26
 8006116:	d42b      	bmi.n	8006170 <_printf_common+0xb0>
 8006118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800611c:	4649      	mov	r1, r9
 800611e:	4638      	mov	r0, r7
 8006120:	47c0      	blx	r8
 8006122:	3001      	adds	r0, #1
 8006124:	d01e      	beq.n	8006164 <_printf_common+0xa4>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	68e5      	ldr	r5, [r4, #12]
 800612a:	6832      	ldr	r2, [r6, #0]
 800612c:	f003 0306 	and.w	r3, r3, #6
 8006130:	2b04      	cmp	r3, #4
 8006132:	bf08      	it	eq
 8006134:	1aad      	subeq	r5, r5, r2
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	6922      	ldr	r2, [r4, #16]
 800613a:	bf0c      	ite	eq
 800613c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006140:	2500      	movne	r5, #0
 8006142:	4293      	cmp	r3, r2
 8006144:	bfc4      	itt	gt
 8006146:	1a9b      	subgt	r3, r3, r2
 8006148:	18ed      	addgt	r5, r5, r3
 800614a:	2600      	movs	r6, #0
 800614c:	341a      	adds	r4, #26
 800614e:	42b5      	cmp	r5, r6
 8006150:	d11a      	bne.n	8006188 <_printf_common+0xc8>
 8006152:	2000      	movs	r0, #0
 8006154:	e008      	b.n	8006168 <_printf_common+0xa8>
 8006156:	2301      	movs	r3, #1
 8006158:	4652      	mov	r2, sl
 800615a:	4649      	mov	r1, r9
 800615c:	4638      	mov	r0, r7
 800615e:	47c0      	blx	r8
 8006160:	3001      	adds	r0, #1
 8006162:	d103      	bne.n	800616c <_printf_common+0xac>
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616c:	3501      	adds	r5, #1
 800616e:	e7c6      	b.n	80060fe <_printf_common+0x3e>
 8006170:	18e1      	adds	r1, r4, r3
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	2030      	movs	r0, #48	; 0x30
 8006176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800617a:	4422      	add	r2, r4
 800617c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006184:	3302      	adds	r3, #2
 8006186:	e7c7      	b.n	8006118 <_printf_common+0x58>
 8006188:	2301      	movs	r3, #1
 800618a:	4622      	mov	r2, r4
 800618c:	4649      	mov	r1, r9
 800618e:	4638      	mov	r0, r7
 8006190:	47c0      	blx	r8
 8006192:	3001      	adds	r0, #1
 8006194:	d0e6      	beq.n	8006164 <_printf_common+0xa4>
 8006196:	3601      	adds	r6, #1
 8006198:	e7d9      	b.n	800614e <_printf_common+0x8e>
	...

0800619c <_printf_i>:
 800619c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a0:	460c      	mov	r4, r1
 80061a2:	4691      	mov	r9, r2
 80061a4:	7e27      	ldrb	r7, [r4, #24]
 80061a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061a8:	2f78      	cmp	r7, #120	; 0x78
 80061aa:	4680      	mov	r8, r0
 80061ac:	469a      	mov	sl, r3
 80061ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061b2:	d807      	bhi.n	80061c4 <_printf_i+0x28>
 80061b4:	2f62      	cmp	r7, #98	; 0x62
 80061b6:	d80a      	bhi.n	80061ce <_printf_i+0x32>
 80061b8:	2f00      	cmp	r7, #0
 80061ba:	f000 80d8 	beq.w	800636e <_printf_i+0x1d2>
 80061be:	2f58      	cmp	r7, #88	; 0x58
 80061c0:	f000 80a3 	beq.w	800630a <_printf_i+0x16e>
 80061c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061cc:	e03a      	b.n	8006244 <_printf_i+0xa8>
 80061ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061d2:	2b15      	cmp	r3, #21
 80061d4:	d8f6      	bhi.n	80061c4 <_printf_i+0x28>
 80061d6:	a001      	add	r0, pc, #4	; (adr r0, 80061dc <_printf_i+0x40>)
 80061d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80061dc:	08006235 	.word	0x08006235
 80061e0:	08006249 	.word	0x08006249
 80061e4:	080061c5 	.word	0x080061c5
 80061e8:	080061c5 	.word	0x080061c5
 80061ec:	080061c5 	.word	0x080061c5
 80061f0:	080061c5 	.word	0x080061c5
 80061f4:	08006249 	.word	0x08006249
 80061f8:	080061c5 	.word	0x080061c5
 80061fc:	080061c5 	.word	0x080061c5
 8006200:	080061c5 	.word	0x080061c5
 8006204:	080061c5 	.word	0x080061c5
 8006208:	08006355 	.word	0x08006355
 800620c:	08006279 	.word	0x08006279
 8006210:	08006337 	.word	0x08006337
 8006214:	080061c5 	.word	0x080061c5
 8006218:	080061c5 	.word	0x080061c5
 800621c:	08006377 	.word	0x08006377
 8006220:	080061c5 	.word	0x080061c5
 8006224:	08006279 	.word	0x08006279
 8006228:	080061c5 	.word	0x080061c5
 800622c:	080061c5 	.word	0x080061c5
 8006230:	0800633f 	.word	0x0800633f
 8006234:	680b      	ldr	r3, [r1, #0]
 8006236:	1d1a      	adds	r2, r3, #4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	600a      	str	r2, [r1, #0]
 800623c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006244:	2301      	movs	r3, #1
 8006246:	e0a3      	b.n	8006390 <_printf_i+0x1f4>
 8006248:	6825      	ldr	r5, [r4, #0]
 800624a:	6808      	ldr	r0, [r1, #0]
 800624c:	062e      	lsls	r6, r5, #24
 800624e:	f100 0304 	add.w	r3, r0, #4
 8006252:	d50a      	bpl.n	800626a <_printf_i+0xce>
 8006254:	6805      	ldr	r5, [r0, #0]
 8006256:	600b      	str	r3, [r1, #0]
 8006258:	2d00      	cmp	r5, #0
 800625a:	da03      	bge.n	8006264 <_printf_i+0xc8>
 800625c:	232d      	movs	r3, #45	; 0x2d
 800625e:	426d      	negs	r5, r5
 8006260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006264:	485e      	ldr	r0, [pc, #376]	; (80063e0 <_printf_i+0x244>)
 8006266:	230a      	movs	r3, #10
 8006268:	e019      	b.n	800629e <_printf_i+0x102>
 800626a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800626e:	6805      	ldr	r5, [r0, #0]
 8006270:	600b      	str	r3, [r1, #0]
 8006272:	bf18      	it	ne
 8006274:	b22d      	sxthne	r5, r5
 8006276:	e7ef      	b.n	8006258 <_printf_i+0xbc>
 8006278:	680b      	ldr	r3, [r1, #0]
 800627a:	6825      	ldr	r5, [r4, #0]
 800627c:	1d18      	adds	r0, r3, #4
 800627e:	6008      	str	r0, [r1, #0]
 8006280:	0628      	lsls	r0, r5, #24
 8006282:	d501      	bpl.n	8006288 <_printf_i+0xec>
 8006284:	681d      	ldr	r5, [r3, #0]
 8006286:	e002      	b.n	800628e <_printf_i+0xf2>
 8006288:	0669      	lsls	r1, r5, #25
 800628a:	d5fb      	bpl.n	8006284 <_printf_i+0xe8>
 800628c:	881d      	ldrh	r5, [r3, #0]
 800628e:	4854      	ldr	r0, [pc, #336]	; (80063e0 <_printf_i+0x244>)
 8006290:	2f6f      	cmp	r7, #111	; 0x6f
 8006292:	bf0c      	ite	eq
 8006294:	2308      	moveq	r3, #8
 8006296:	230a      	movne	r3, #10
 8006298:	2100      	movs	r1, #0
 800629a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800629e:	6866      	ldr	r6, [r4, #4]
 80062a0:	60a6      	str	r6, [r4, #8]
 80062a2:	2e00      	cmp	r6, #0
 80062a4:	bfa2      	ittt	ge
 80062a6:	6821      	ldrge	r1, [r4, #0]
 80062a8:	f021 0104 	bicge.w	r1, r1, #4
 80062ac:	6021      	strge	r1, [r4, #0]
 80062ae:	b90d      	cbnz	r5, 80062b4 <_printf_i+0x118>
 80062b0:	2e00      	cmp	r6, #0
 80062b2:	d04d      	beq.n	8006350 <_printf_i+0x1b4>
 80062b4:	4616      	mov	r6, r2
 80062b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80062ba:	fb03 5711 	mls	r7, r3, r1, r5
 80062be:	5dc7      	ldrb	r7, [r0, r7]
 80062c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062c4:	462f      	mov	r7, r5
 80062c6:	42bb      	cmp	r3, r7
 80062c8:	460d      	mov	r5, r1
 80062ca:	d9f4      	bls.n	80062b6 <_printf_i+0x11a>
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d10b      	bne.n	80062e8 <_printf_i+0x14c>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	07df      	lsls	r7, r3, #31
 80062d4:	d508      	bpl.n	80062e8 <_printf_i+0x14c>
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	6861      	ldr	r1, [r4, #4]
 80062da:	4299      	cmp	r1, r3
 80062dc:	bfde      	ittt	le
 80062de:	2330      	movle	r3, #48	; 0x30
 80062e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062e8:	1b92      	subs	r2, r2, r6
 80062ea:	6122      	str	r2, [r4, #16]
 80062ec:	f8cd a000 	str.w	sl, [sp]
 80062f0:	464b      	mov	r3, r9
 80062f2:	aa03      	add	r2, sp, #12
 80062f4:	4621      	mov	r1, r4
 80062f6:	4640      	mov	r0, r8
 80062f8:	f7ff fee2 	bl	80060c0 <_printf_common>
 80062fc:	3001      	adds	r0, #1
 80062fe:	d14c      	bne.n	800639a <_printf_i+0x1fe>
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	b004      	add	sp, #16
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630a:	4835      	ldr	r0, [pc, #212]	; (80063e0 <_printf_i+0x244>)
 800630c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	680e      	ldr	r6, [r1, #0]
 8006314:	061f      	lsls	r7, r3, #24
 8006316:	f856 5b04 	ldr.w	r5, [r6], #4
 800631a:	600e      	str	r6, [r1, #0]
 800631c:	d514      	bpl.n	8006348 <_printf_i+0x1ac>
 800631e:	07d9      	lsls	r1, r3, #31
 8006320:	bf44      	itt	mi
 8006322:	f043 0320 	orrmi.w	r3, r3, #32
 8006326:	6023      	strmi	r3, [r4, #0]
 8006328:	b91d      	cbnz	r5, 8006332 <_printf_i+0x196>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	f023 0320 	bic.w	r3, r3, #32
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	2310      	movs	r3, #16
 8006334:	e7b0      	b.n	8006298 <_printf_i+0xfc>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	f043 0320 	orr.w	r3, r3, #32
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	2378      	movs	r3, #120	; 0x78
 8006340:	4828      	ldr	r0, [pc, #160]	; (80063e4 <_printf_i+0x248>)
 8006342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006346:	e7e3      	b.n	8006310 <_printf_i+0x174>
 8006348:	065e      	lsls	r6, r3, #25
 800634a:	bf48      	it	mi
 800634c:	b2ad      	uxthmi	r5, r5
 800634e:	e7e6      	b.n	800631e <_printf_i+0x182>
 8006350:	4616      	mov	r6, r2
 8006352:	e7bb      	b.n	80062cc <_printf_i+0x130>
 8006354:	680b      	ldr	r3, [r1, #0]
 8006356:	6826      	ldr	r6, [r4, #0]
 8006358:	6960      	ldr	r0, [r4, #20]
 800635a:	1d1d      	adds	r5, r3, #4
 800635c:	600d      	str	r5, [r1, #0]
 800635e:	0635      	lsls	r5, r6, #24
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	d501      	bpl.n	8006368 <_printf_i+0x1cc>
 8006364:	6018      	str	r0, [r3, #0]
 8006366:	e002      	b.n	800636e <_printf_i+0x1d2>
 8006368:	0671      	lsls	r1, r6, #25
 800636a:	d5fb      	bpl.n	8006364 <_printf_i+0x1c8>
 800636c:	8018      	strh	r0, [r3, #0]
 800636e:	2300      	movs	r3, #0
 8006370:	6123      	str	r3, [r4, #16]
 8006372:	4616      	mov	r6, r2
 8006374:	e7ba      	b.n	80062ec <_printf_i+0x150>
 8006376:	680b      	ldr	r3, [r1, #0]
 8006378:	1d1a      	adds	r2, r3, #4
 800637a:	600a      	str	r2, [r1, #0]
 800637c:	681e      	ldr	r6, [r3, #0]
 800637e:	6862      	ldr	r2, [r4, #4]
 8006380:	2100      	movs	r1, #0
 8006382:	4630      	mov	r0, r6
 8006384:	f7f9 ff34 	bl	80001f0 <memchr>
 8006388:	b108      	cbz	r0, 800638e <_printf_i+0x1f2>
 800638a:	1b80      	subs	r0, r0, r6
 800638c:	6060      	str	r0, [r4, #4]
 800638e:	6863      	ldr	r3, [r4, #4]
 8006390:	6123      	str	r3, [r4, #16]
 8006392:	2300      	movs	r3, #0
 8006394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006398:	e7a8      	b.n	80062ec <_printf_i+0x150>
 800639a:	6923      	ldr	r3, [r4, #16]
 800639c:	4632      	mov	r2, r6
 800639e:	4649      	mov	r1, r9
 80063a0:	4640      	mov	r0, r8
 80063a2:	47d0      	blx	sl
 80063a4:	3001      	adds	r0, #1
 80063a6:	d0ab      	beq.n	8006300 <_printf_i+0x164>
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	079b      	lsls	r3, r3, #30
 80063ac:	d413      	bmi.n	80063d6 <_printf_i+0x23a>
 80063ae:	68e0      	ldr	r0, [r4, #12]
 80063b0:	9b03      	ldr	r3, [sp, #12]
 80063b2:	4298      	cmp	r0, r3
 80063b4:	bfb8      	it	lt
 80063b6:	4618      	movlt	r0, r3
 80063b8:	e7a4      	b.n	8006304 <_printf_i+0x168>
 80063ba:	2301      	movs	r3, #1
 80063bc:	4632      	mov	r2, r6
 80063be:	4649      	mov	r1, r9
 80063c0:	4640      	mov	r0, r8
 80063c2:	47d0      	blx	sl
 80063c4:	3001      	adds	r0, #1
 80063c6:	d09b      	beq.n	8006300 <_printf_i+0x164>
 80063c8:	3501      	adds	r5, #1
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	9903      	ldr	r1, [sp, #12]
 80063ce:	1a5b      	subs	r3, r3, r1
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dcf2      	bgt.n	80063ba <_printf_i+0x21e>
 80063d4:	e7eb      	b.n	80063ae <_printf_i+0x212>
 80063d6:	2500      	movs	r5, #0
 80063d8:	f104 0619 	add.w	r6, r4, #25
 80063dc:	e7f5      	b.n	80063ca <_printf_i+0x22e>
 80063de:	bf00      	nop
 80063e0:	0800ae3e 	.word	0x0800ae3e
 80063e4:	0800ae4f 	.word	0x0800ae4f

080063e8 <siprintf>:
 80063e8:	b40e      	push	{r1, r2, r3}
 80063ea:	b500      	push	{lr}
 80063ec:	b09c      	sub	sp, #112	; 0x70
 80063ee:	ab1d      	add	r3, sp, #116	; 0x74
 80063f0:	9002      	str	r0, [sp, #8]
 80063f2:	9006      	str	r0, [sp, #24]
 80063f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063f8:	4809      	ldr	r0, [pc, #36]	; (8006420 <siprintf+0x38>)
 80063fa:	9107      	str	r1, [sp, #28]
 80063fc:	9104      	str	r1, [sp, #16]
 80063fe:	4909      	ldr	r1, [pc, #36]	; (8006424 <siprintf+0x3c>)
 8006400:	f853 2b04 	ldr.w	r2, [r3], #4
 8006404:	9105      	str	r1, [sp, #20]
 8006406:	6800      	ldr	r0, [r0, #0]
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	a902      	add	r1, sp, #8
 800640c:	f002 fe16 	bl	800903c <_svfiprintf_r>
 8006410:	9b02      	ldr	r3, [sp, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	b01c      	add	sp, #112	; 0x70
 8006418:	f85d eb04 	ldr.w	lr, [sp], #4
 800641c:	b003      	add	sp, #12
 800641e:	4770      	bx	lr
 8006420:	2000001c 	.word	0x2000001c
 8006424:	ffff0208 	.word	0xffff0208

08006428 <sulp>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	4604      	mov	r4, r0
 800642c:	460d      	mov	r5, r1
 800642e:	ec45 4b10 	vmov	d0, r4, r5
 8006432:	4616      	mov	r6, r2
 8006434:	f002 fb9e 	bl	8008b74 <__ulp>
 8006438:	ec51 0b10 	vmov	r0, r1, d0
 800643c:	b17e      	cbz	r6, 800645e <sulp+0x36>
 800643e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006442:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006446:	2b00      	cmp	r3, #0
 8006448:	dd09      	ble.n	800645e <sulp+0x36>
 800644a:	051b      	lsls	r3, r3, #20
 800644c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006450:	2400      	movs	r4, #0
 8006452:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006456:	4622      	mov	r2, r4
 8006458:	462b      	mov	r3, r5
 800645a:	f7fa f8d5 	bl	8000608 <__aeabi_dmul>
 800645e:	bd70      	pop	{r4, r5, r6, pc}

08006460 <_strtod_l>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	b0a3      	sub	sp, #140	; 0x8c
 8006466:	461f      	mov	r7, r3
 8006468:	2300      	movs	r3, #0
 800646a:	931e      	str	r3, [sp, #120]	; 0x78
 800646c:	4ba4      	ldr	r3, [pc, #656]	; (8006700 <_strtod_l+0x2a0>)
 800646e:	9219      	str	r2, [sp, #100]	; 0x64
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	9307      	str	r3, [sp, #28]
 8006474:	4604      	mov	r4, r0
 8006476:	4618      	mov	r0, r3
 8006478:	4688      	mov	r8, r1
 800647a:	f7f9 feb1 	bl	80001e0 <strlen>
 800647e:	f04f 0a00 	mov.w	sl, #0
 8006482:	4605      	mov	r5, r0
 8006484:	f04f 0b00 	mov.w	fp, #0
 8006488:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800648c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	2a2b      	cmp	r2, #43	; 0x2b
 8006492:	d04c      	beq.n	800652e <_strtod_l+0xce>
 8006494:	d839      	bhi.n	800650a <_strtod_l+0xaa>
 8006496:	2a0d      	cmp	r2, #13
 8006498:	d832      	bhi.n	8006500 <_strtod_l+0xa0>
 800649a:	2a08      	cmp	r2, #8
 800649c:	d832      	bhi.n	8006504 <_strtod_l+0xa4>
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d03c      	beq.n	800651c <_strtod_l+0xbc>
 80064a2:	2300      	movs	r3, #0
 80064a4:	930e      	str	r3, [sp, #56]	; 0x38
 80064a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80064a8:	7833      	ldrb	r3, [r6, #0]
 80064aa:	2b30      	cmp	r3, #48	; 0x30
 80064ac:	f040 80b4 	bne.w	8006618 <_strtod_l+0x1b8>
 80064b0:	7873      	ldrb	r3, [r6, #1]
 80064b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064b6:	2b58      	cmp	r3, #88	; 0x58
 80064b8:	d16c      	bne.n	8006594 <_strtod_l+0x134>
 80064ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	ab1e      	add	r3, sp, #120	; 0x78
 80064c0:	9702      	str	r7, [sp, #8]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	4a8f      	ldr	r2, [pc, #572]	; (8006704 <_strtod_l+0x2a4>)
 80064c6:	ab1f      	add	r3, sp, #124	; 0x7c
 80064c8:	a91d      	add	r1, sp, #116	; 0x74
 80064ca:	4620      	mov	r0, r4
 80064cc:	f001 fcc0 	bl	8007e50 <__gethex>
 80064d0:	f010 0707 	ands.w	r7, r0, #7
 80064d4:	4605      	mov	r5, r0
 80064d6:	d005      	beq.n	80064e4 <_strtod_l+0x84>
 80064d8:	2f06      	cmp	r7, #6
 80064da:	d12a      	bne.n	8006532 <_strtod_l+0xd2>
 80064dc:	3601      	adds	r6, #1
 80064de:	2300      	movs	r3, #0
 80064e0:	961d      	str	r6, [sp, #116]	; 0x74
 80064e2:	930e      	str	r3, [sp, #56]	; 0x38
 80064e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f040 8596 	bne.w	8007018 <_strtod_l+0xbb8>
 80064ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ee:	b1db      	cbz	r3, 8006528 <_strtod_l+0xc8>
 80064f0:	4652      	mov	r2, sl
 80064f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80064f6:	ec43 2b10 	vmov	d0, r2, r3
 80064fa:	b023      	add	sp, #140	; 0x8c
 80064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	2a20      	cmp	r2, #32
 8006502:	d1ce      	bne.n	80064a2 <_strtod_l+0x42>
 8006504:	3301      	adds	r3, #1
 8006506:	931d      	str	r3, [sp, #116]	; 0x74
 8006508:	e7c0      	b.n	800648c <_strtod_l+0x2c>
 800650a:	2a2d      	cmp	r2, #45	; 0x2d
 800650c:	d1c9      	bne.n	80064a2 <_strtod_l+0x42>
 800650e:	2201      	movs	r2, #1
 8006510:	920e      	str	r2, [sp, #56]	; 0x38
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	921d      	str	r2, [sp, #116]	; 0x74
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1c4      	bne.n	80064a6 <_strtod_l+0x46>
 800651c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800651e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 8576 	bne.w	8007014 <_strtod_l+0xbb4>
 8006528:	4652      	mov	r2, sl
 800652a:	465b      	mov	r3, fp
 800652c:	e7e3      	b.n	80064f6 <_strtod_l+0x96>
 800652e:	2200      	movs	r2, #0
 8006530:	e7ee      	b.n	8006510 <_strtod_l+0xb0>
 8006532:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006534:	b13a      	cbz	r2, 8006546 <_strtod_l+0xe6>
 8006536:	2135      	movs	r1, #53	; 0x35
 8006538:	a820      	add	r0, sp, #128	; 0x80
 800653a:	f002 fc26 	bl	8008d8a <__copybits>
 800653e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006540:	4620      	mov	r0, r4
 8006542:	f001 ffeb 	bl	800851c <_Bfree>
 8006546:	3f01      	subs	r7, #1
 8006548:	2f05      	cmp	r7, #5
 800654a:	d807      	bhi.n	800655c <_strtod_l+0xfc>
 800654c:	e8df f007 	tbb	[pc, r7]
 8006550:	1d180b0e 	.word	0x1d180b0e
 8006554:	030e      	.short	0x030e
 8006556:	f04f 0b00 	mov.w	fp, #0
 800655a:	46da      	mov	sl, fp
 800655c:	0728      	lsls	r0, r5, #28
 800655e:	d5c1      	bpl.n	80064e4 <_strtod_l+0x84>
 8006560:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006564:	e7be      	b.n	80064e4 <_strtod_l+0x84>
 8006566:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800656a:	e7f7      	b.n	800655c <_strtod_l+0xfc>
 800656c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006570:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006572:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006576:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800657a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800657e:	e7ed      	b.n	800655c <_strtod_l+0xfc>
 8006580:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006708 <_strtod_l+0x2a8>
 8006584:	f04f 0a00 	mov.w	sl, #0
 8006588:	e7e8      	b.n	800655c <_strtod_l+0xfc>
 800658a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800658e:	f04f 3aff 	mov.w	sl, #4294967295
 8006592:	e7e3      	b.n	800655c <_strtod_l+0xfc>
 8006594:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	921d      	str	r2, [sp, #116]	; 0x74
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b30      	cmp	r3, #48	; 0x30
 800659e:	d0f9      	beq.n	8006594 <_strtod_l+0x134>
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d09f      	beq.n	80064e4 <_strtod_l+0x84>
 80065a4:	2301      	movs	r3, #1
 80065a6:	f04f 0900 	mov.w	r9, #0
 80065aa:	9304      	str	r3, [sp, #16]
 80065ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065ae:	930a      	str	r3, [sp, #40]	; 0x28
 80065b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80065b4:	464f      	mov	r7, r9
 80065b6:	220a      	movs	r2, #10
 80065b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80065ba:	7806      	ldrb	r6, [r0, #0]
 80065bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80065c0:	b2d9      	uxtb	r1, r3
 80065c2:	2909      	cmp	r1, #9
 80065c4:	d92a      	bls.n	800661c <_strtod_l+0x1bc>
 80065c6:	9907      	ldr	r1, [sp, #28]
 80065c8:	462a      	mov	r2, r5
 80065ca:	f002 fe51 	bl	8009270 <strncmp>
 80065ce:	b398      	cbz	r0, 8006638 <_strtod_l+0x1d8>
 80065d0:	2000      	movs	r0, #0
 80065d2:	4633      	mov	r3, r6
 80065d4:	463d      	mov	r5, r7
 80065d6:	9007      	str	r0, [sp, #28]
 80065d8:	4602      	mov	r2, r0
 80065da:	2b65      	cmp	r3, #101	; 0x65
 80065dc:	d001      	beq.n	80065e2 <_strtod_l+0x182>
 80065de:	2b45      	cmp	r3, #69	; 0x45
 80065e0:	d118      	bne.n	8006614 <_strtod_l+0x1b4>
 80065e2:	b91d      	cbnz	r5, 80065ec <_strtod_l+0x18c>
 80065e4:	9b04      	ldr	r3, [sp, #16]
 80065e6:	4303      	orrs	r3, r0
 80065e8:	d098      	beq.n	800651c <_strtod_l+0xbc>
 80065ea:	2500      	movs	r5, #0
 80065ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80065f0:	f108 0301 	add.w	r3, r8, #1
 80065f4:	931d      	str	r3, [sp, #116]	; 0x74
 80065f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80065fa:	2b2b      	cmp	r3, #43	; 0x2b
 80065fc:	d075      	beq.n	80066ea <_strtod_l+0x28a>
 80065fe:	2b2d      	cmp	r3, #45	; 0x2d
 8006600:	d07b      	beq.n	80066fa <_strtod_l+0x29a>
 8006602:	f04f 0c00 	mov.w	ip, #0
 8006606:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800660a:	2909      	cmp	r1, #9
 800660c:	f240 8082 	bls.w	8006714 <_strtod_l+0x2b4>
 8006610:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006614:	2600      	movs	r6, #0
 8006616:	e09d      	b.n	8006754 <_strtod_l+0x2f4>
 8006618:	2300      	movs	r3, #0
 800661a:	e7c4      	b.n	80065a6 <_strtod_l+0x146>
 800661c:	2f08      	cmp	r7, #8
 800661e:	bfd8      	it	le
 8006620:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006622:	f100 0001 	add.w	r0, r0, #1
 8006626:	bfda      	itte	le
 8006628:	fb02 3301 	mlale	r3, r2, r1, r3
 800662c:	9309      	strle	r3, [sp, #36]	; 0x24
 800662e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006632:	3701      	adds	r7, #1
 8006634:	901d      	str	r0, [sp, #116]	; 0x74
 8006636:	e7bf      	b.n	80065b8 <_strtod_l+0x158>
 8006638:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800663a:	195a      	adds	r2, r3, r5
 800663c:	921d      	str	r2, [sp, #116]	; 0x74
 800663e:	5d5b      	ldrb	r3, [r3, r5]
 8006640:	2f00      	cmp	r7, #0
 8006642:	d037      	beq.n	80066b4 <_strtod_l+0x254>
 8006644:	9007      	str	r0, [sp, #28]
 8006646:	463d      	mov	r5, r7
 8006648:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800664c:	2a09      	cmp	r2, #9
 800664e:	d912      	bls.n	8006676 <_strtod_l+0x216>
 8006650:	2201      	movs	r2, #1
 8006652:	e7c2      	b.n	80065da <_strtod_l+0x17a>
 8006654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	921d      	str	r2, [sp, #116]	; 0x74
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	3001      	adds	r0, #1
 800665e:	2b30      	cmp	r3, #48	; 0x30
 8006660:	d0f8      	beq.n	8006654 <_strtod_l+0x1f4>
 8006662:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006666:	2a08      	cmp	r2, #8
 8006668:	f200 84db 	bhi.w	8007022 <_strtod_l+0xbc2>
 800666c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800666e:	9007      	str	r0, [sp, #28]
 8006670:	2000      	movs	r0, #0
 8006672:	920a      	str	r2, [sp, #40]	; 0x28
 8006674:	4605      	mov	r5, r0
 8006676:	3b30      	subs	r3, #48	; 0x30
 8006678:	f100 0201 	add.w	r2, r0, #1
 800667c:	d014      	beq.n	80066a8 <_strtod_l+0x248>
 800667e:	9907      	ldr	r1, [sp, #28]
 8006680:	4411      	add	r1, r2
 8006682:	9107      	str	r1, [sp, #28]
 8006684:	462a      	mov	r2, r5
 8006686:	eb00 0e05 	add.w	lr, r0, r5
 800668a:	210a      	movs	r1, #10
 800668c:	4572      	cmp	r2, lr
 800668e:	d113      	bne.n	80066b8 <_strtod_l+0x258>
 8006690:	182a      	adds	r2, r5, r0
 8006692:	2a08      	cmp	r2, #8
 8006694:	f105 0501 	add.w	r5, r5, #1
 8006698:	4405      	add	r5, r0
 800669a:	dc1c      	bgt.n	80066d6 <_strtod_l+0x276>
 800669c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800669e:	220a      	movs	r2, #10
 80066a0:	fb02 3301 	mla	r3, r2, r1, r3
 80066a4:	9309      	str	r3, [sp, #36]	; 0x24
 80066a6:	2200      	movs	r2, #0
 80066a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	911d      	str	r1, [sp, #116]	; 0x74
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	4610      	mov	r0, r2
 80066b2:	e7c9      	b.n	8006648 <_strtod_l+0x1e8>
 80066b4:	4638      	mov	r0, r7
 80066b6:	e7d2      	b.n	800665e <_strtod_l+0x1fe>
 80066b8:	2a08      	cmp	r2, #8
 80066ba:	dc04      	bgt.n	80066c6 <_strtod_l+0x266>
 80066bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80066be:	434e      	muls	r6, r1
 80066c0:	9609      	str	r6, [sp, #36]	; 0x24
 80066c2:	3201      	adds	r2, #1
 80066c4:	e7e2      	b.n	800668c <_strtod_l+0x22c>
 80066c6:	f102 0c01 	add.w	ip, r2, #1
 80066ca:	f1bc 0f10 	cmp.w	ip, #16
 80066ce:	bfd8      	it	le
 80066d0:	fb01 f909 	mulle.w	r9, r1, r9
 80066d4:	e7f5      	b.n	80066c2 <_strtod_l+0x262>
 80066d6:	2d10      	cmp	r5, #16
 80066d8:	bfdc      	itt	le
 80066da:	220a      	movle	r2, #10
 80066dc:	fb02 3909 	mlale	r9, r2, r9, r3
 80066e0:	e7e1      	b.n	80066a6 <_strtod_l+0x246>
 80066e2:	2300      	movs	r3, #0
 80066e4:	9307      	str	r3, [sp, #28]
 80066e6:	2201      	movs	r2, #1
 80066e8:	e77c      	b.n	80065e4 <_strtod_l+0x184>
 80066ea:	f04f 0c00 	mov.w	ip, #0
 80066ee:	f108 0302 	add.w	r3, r8, #2
 80066f2:	931d      	str	r3, [sp, #116]	; 0x74
 80066f4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80066f8:	e785      	b.n	8006606 <_strtod_l+0x1a6>
 80066fa:	f04f 0c01 	mov.w	ip, #1
 80066fe:	e7f6      	b.n	80066ee <_strtod_l+0x28e>
 8006700:	0800afb0 	.word	0x0800afb0
 8006704:	0800ae60 	.word	0x0800ae60
 8006708:	7ff00000 	.word	0x7ff00000
 800670c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800670e:	1c59      	adds	r1, r3, #1
 8006710:	911d      	str	r1, [sp, #116]	; 0x74
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b30      	cmp	r3, #48	; 0x30
 8006716:	d0f9      	beq.n	800670c <_strtod_l+0x2ac>
 8006718:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800671c:	2908      	cmp	r1, #8
 800671e:	f63f af79 	bhi.w	8006614 <_strtod_l+0x1b4>
 8006722:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006726:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006728:	9308      	str	r3, [sp, #32]
 800672a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800672c:	1c59      	adds	r1, r3, #1
 800672e:	911d      	str	r1, [sp, #116]	; 0x74
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006736:	2e09      	cmp	r6, #9
 8006738:	d937      	bls.n	80067aa <_strtod_l+0x34a>
 800673a:	9e08      	ldr	r6, [sp, #32]
 800673c:	1b89      	subs	r1, r1, r6
 800673e:	2908      	cmp	r1, #8
 8006740:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006744:	dc02      	bgt.n	800674c <_strtod_l+0x2ec>
 8006746:	4576      	cmp	r6, lr
 8006748:	bfa8      	it	ge
 800674a:	4676      	movge	r6, lr
 800674c:	f1bc 0f00 	cmp.w	ip, #0
 8006750:	d000      	beq.n	8006754 <_strtod_l+0x2f4>
 8006752:	4276      	negs	r6, r6
 8006754:	2d00      	cmp	r5, #0
 8006756:	d14f      	bne.n	80067f8 <_strtod_l+0x398>
 8006758:	9904      	ldr	r1, [sp, #16]
 800675a:	4301      	orrs	r1, r0
 800675c:	f47f aec2 	bne.w	80064e4 <_strtod_l+0x84>
 8006760:	2a00      	cmp	r2, #0
 8006762:	f47f aedb 	bne.w	800651c <_strtod_l+0xbc>
 8006766:	2b69      	cmp	r3, #105	; 0x69
 8006768:	d027      	beq.n	80067ba <_strtod_l+0x35a>
 800676a:	dc24      	bgt.n	80067b6 <_strtod_l+0x356>
 800676c:	2b49      	cmp	r3, #73	; 0x49
 800676e:	d024      	beq.n	80067ba <_strtod_l+0x35a>
 8006770:	2b4e      	cmp	r3, #78	; 0x4e
 8006772:	f47f aed3 	bne.w	800651c <_strtod_l+0xbc>
 8006776:	499e      	ldr	r1, [pc, #632]	; (80069f0 <_strtod_l+0x590>)
 8006778:	a81d      	add	r0, sp, #116	; 0x74
 800677a:	f001 fdc1 	bl	8008300 <__match>
 800677e:	2800      	cmp	r0, #0
 8006780:	f43f aecc 	beq.w	800651c <_strtod_l+0xbc>
 8006784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b28      	cmp	r3, #40	; 0x28
 800678a:	d12d      	bne.n	80067e8 <_strtod_l+0x388>
 800678c:	4999      	ldr	r1, [pc, #612]	; (80069f4 <_strtod_l+0x594>)
 800678e:	aa20      	add	r2, sp, #128	; 0x80
 8006790:	a81d      	add	r0, sp, #116	; 0x74
 8006792:	f001 fdc9 	bl	8008328 <__hexnan>
 8006796:	2805      	cmp	r0, #5
 8006798:	d126      	bne.n	80067e8 <_strtod_l+0x388>
 800679a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800679c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80067a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80067a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80067a8:	e69c      	b.n	80064e4 <_strtod_l+0x84>
 80067aa:	210a      	movs	r1, #10
 80067ac:	fb01 3e0e 	mla	lr, r1, lr, r3
 80067b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80067b4:	e7b9      	b.n	800672a <_strtod_l+0x2ca>
 80067b6:	2b6e      	cmp	r3, #110	; 0x6e
 80067b8:	e7db      	b.n	8006772 <_strtod_l+0x312>
 80067ba:	498f      	ldr	r1, [pc, #572]	; (80069f8 <_strtod_l+0x598>)
 80067bc:	a81d      	add	r0, sp, #116	; 0x74
 80067be:	f001 fd9f 	bl	8008300 <__match>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f43f aeaa 	beq.w	800651c <_strtod_l+0xbc>
 80067c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067ca:	498c      	ldr	r1, [pc, #560]	; (80069fc <_strtod_l+0x59c>)
 80067cc:	3b01      	subs	r3, #1
 80067ce:	a81d      	add	r0, sp, #116	; 0x74
 80067d0:	931d      	str	r3, [sp, #116]	; 0x74
 80067d2:	f001 fd95 	bl	8008300 <__match>
 80067d6:	b910      	cbnz	r0, 80067de <_strtod_l+0x37e>
 80067d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067da:	3301      	adds	r3, #1
 80067dc:	931d      	str	r3, [sp, #116]	; 0x74
 80067de:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006a0c <_strtod_l+0x5ac>
 80067e2:	f04f 0a00 	mov.w	sl, #0
 80067e6:	e67d      	b.n	80064e4 <_strtod_l+0x84>
 80067e8:	4885      	ldr	r0, [pc, #532]	; (8006a00 <_strtod_l+0x5a0>)
 80067ea:	f002 fd29 	bl	8009240 <nan>
 80067ee:	ed8d 0b04 	vstr	d0, [sp, #16]
 80067f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80067f6:	e675      	b.n	80064e4 <_strtod_l+0x84>
 80067f8:	9b07      	ldr	r3, [sp, #28]
 80067fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067fc:	1af3      	subs	r3, r6, r3
 80067fe:	2f00      	cmp	r7, #0
 8006800:	bf08      	it	eq
 8006802:	462f      	moveq	r7, r5
 8006804:	2d10      	cmp	r5, #16
 8006806:	9308      	str	r3, [sp, #32]
 8006808:	46a8      	mov	r8, r5
 800680a:	bfa8      	it	ge
 800680c:	f04f 0810 	movge.w	r8, #16
 8006810:	f7f9 fe80 	bl	8000514 <__aeabi_ui2d>
 8006814:	2d09      	cmp	r5, #9
 8006816:	4682      	mov	sl, r0
 8006818:	468b      	mov	fp, r1
 800681a:	dd13      	ble.n	8006844 <_strtod_l+0x3e4>
 800681c:	4b79      	ldr	r3, [pc, #484]	; (8006a04 <_strtod_l+0x5a4>)
 800681e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006822:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006826:	f7f9 feef 	bl	8000608 <__aeabi_dmul>
 800682a:	4682      	mov	sl, r0
 800682c:	4648      	mov	r0, r9
 800682e:	468b      	mov	fp, r1
 8006830:	f7f9 fe70 	bl	8000514 <__aeabi_ui2d>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4650      	mov	r0, sl
 800683a:	4659      	mov	r1, fp
 800683c:	f7f9 fd2e 	bl	800029c <__adddf3>
 8006840:	4682      	mov	sl, r0
 8006842:	468b      	mov	fp, r1
 8006844:	2d0f      	cmp	r5, #15
 8006846:	dc38      	bgt.n	80068ba <_strtod_l+0x45a>
 8006848:	9b08      	ldr	r3, [sp, #32]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f43f ae4a 	beq.w	80064e4 <_strtod_l+0x84>
 8006850:	dd24      	ble.n	800689c <_strtod_l+0x43c>
 8006852:	2b16      	cmp	r3, #22
 8006854:	dc0b      	bgt.n	800686e <_strtod_l+0x40e>
 8006856:	4d6b      	ldr	r5, [pc, #428]	; (8006a04 <_strtod_l+0x5a4>)
 8006858:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800685c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006860:	4652      	mov	r2, sl
 8006862:	465b      	mov	r3, fp
 8006864:	f7f9 fed0 	bl	8000608 <__aeabi_dmul>
 8006868:	4682      	mov	sl, r0
 800686a:	468b      	mov	fp, r1
 800686c:	e63a      	b.n	80064e4 <_strtod_l+0x84>
 800686e:	9a08      	ldr	r2, [sp, #32]
 8006870:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006874:	4293      	cmp	r3, r2
 8006876:	db20      	blt.n	80068ba <_strtod_l+0x45a>
 8006878:	4c62      	ldr	r4, [pc, #392]	; (8006a04 <_strtod_l+0x5a4>)
 800687a:	f1c5 050f 	rsb	r5, r5, #15
 800687e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006882:	4652      	mov	r2, sl
 8006884:	465b      	mov	r3, fp
 8006886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800688a:	f7f9 febd 	bl	8000608 <__aeabi_dmul>
 800688e:	9b08      	ldr	r3, [sp, #32]
 8006890:	1b5d      	subs	r5, r3, r5
 8006892:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006896:	e9d4 2300 	ldrd	r2, r3, [r4]
 800689a:	e7e3      	b.n	8006864 <_strtod_l+0x404>
 800689c:	9b08      	ldr	r3, [sp, #32]
 800689e:	3316      	adds	r3, #22
 80068a0:	db0b      	blt.n	80068ba <_strtod_l+0x45a>
 80068a2:	9b07      	ldr	r3, [sp, #28]
 80068a4:	4a57      	ldr	r2, [pc, #348]	; (8006a04 <_strtod_l+0x5a4>)
 80068a6:	1b9e      	subs	r6, r3, r6
 80068a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80068ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068b0:	4650      	mov	r0, sl
 80068b2:	4659      	mov	r1, fp
 80068b4:	f7f9 ffd2 	bl	800085c <__aeabi_ddiv>
 80068b8:	e7d6      	b.n	8006868 <_strtod_l+0x408>
 80068ba:	9b08      	ldr	r3, [sp, #32]
 80068bc:	eba5 0808 	sub.w	r8, r5, r8
 80068c0:	4498      	add	r8, r3
 80068c2:	f1b8 0f00 	cmp.w	r8, #0
 80068c6:	dd71      	ble.n	80069ac <_strtod_l+0x54c>
 80068c8:	f018 030f 	ands.w	r3, r8, #15
 80068cc:	d00a      	beq.n	80068e4 <_strtod_l+0x484>
 80068ce:	494d      	ldr	r1, [pc, #308]	; (8006a04 <_strtod_l+0x5a4>)
 80068d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068d4:	4652      	mov	r2, sl
 80068d6:	465b      	mov	r3, fp
 80068d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068dc:	f7f9 fe94 	bl	8000608 <__aeabi_dmul>
 80068e0:	4682      	mov	sl, r0
 80068e2:	468b      	mov	fp, r1
 80068e4:	f038 080f 	bics.w	r8, r8, #15
 80068e8:	d04d      	beq.n	8006986 <_strtod_l+0x526>
 80068ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80068ee:	dd22      	ble.n	8006936 <_strtod_l+0x4d6>
 80068f0:	2500      	movs	r5, #0
 80068f2:	462e      	mov	r6, r5
 80068f4:	9509      	str	r5, [sp, #36]	; 0x24
 80068f6:	9507      	str	r5, [sp, #28]
 80068f8:	2322      	movs	r3, #34	; 0x22
 80068fa:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006a0c <_strtod_l+0x5ac>
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	f04f 0a00 	mov.w	sl, #0
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	f43f adec 	beq.w	80064e4 <_strtod_l+0x84>
 800690c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800690e:	4620      	mov	r0, r4
 8006910:	f001 fe04 	bl	800851c <_Bfree>
 8006914:	9907      	ldr	r1, [sp, #28]
 8006916:	4620      	mov	r0, r4
 8006918:	f001 fe00 	bl	800851c <_Bfree>
 800691c:	4631      	mov	r1, r6
 800691e:	4620      	mov	r0, r4
 8006920:	f001 fdfc 	bl	800851c <_Bfree>
 8006924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006926:	4620      	mov	r0, r4
 8006928:	f001 fdf8 	bl	800851c <_Bfree>
 800692c:	4629      	mov	r1, r5
 800692e:	4620      	mov	r0, r4
 8006930:	f001 fdf4 	bl	800851c <_Bfree>
 8006934:	e5d6      	b.n	80064e4 <_strtod_l+0x84>
 8006936:	2300      	movs	r3, #0
 8006938:	ea4f 1828 	mov.w	r8, r8, asr #4
 800693c:	4650      	mov	r0, sl
 800693e:	4659      	mov	r1, fp
 8006940:	4699      	mov	r9, r3
 8006942:	f1b8 0f01 	cmp.w	r8, #1
 8006946:	dc21      	bgt.n	800698c <_strtod_l+0x52c>
 8006948:	b10b      	cbz	r3, 800694e <_strtod_l+0x4ee>
 800694a:	4682      	mov	sl, r0
 800694c:	468b      	mov	fp, r1
 800694e:	4b2e      	ldr	r3, [pc, #184]	; (8006a08 <_strtod_l+0x5a8>)
 8006950:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006954:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006958:	4652      	mov	r2, sl
 800695a:	465b      	mov	r3, fp
 800695c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006960:	f7f9 fe52 	bl	8000608 <__aeabi_dmul>
 8006964:	4b29      	ldr	r3, [pc, #164]	; (8006a0c <_strtod_l+0x5ac>)
 8006966:	460a      	mov	r2, r1
 8006968:	400b      	ands	r3, r1
 800696a:	4929      	ldr	r1, [pc, #164]	; (8006a10 <_strtod_l+0x5b0>)
 800696c:	428b      	cmp	r3, r1
 800696e:	4682      	mov	sl, r0
 8006970:	d8be      	bhi.n	80068f0 <_strtod_l+0x490>
 8006972:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006976:	428b      	cmp	r3, r1
 8006978:	bf86      	itte	hi
 800697a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006a14 <_strtod_l+0x5b4>
 800697e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006982:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006986:	2300      	movs	r3, #0
 8006988:	9304      	str	r3, [sp, #16]
 800698a:	e081      	b.n	8006a90 <_strtod_l+0x630>
 800698c:	f018 0f01 	tst.w	r8, #1
 8006990:	d007      	beq.n	80069a2 <_strtod_l+0x542>
 8006992:	4b1d      	ldr	r3, [pc, #116]	; (8006a08 <_strtod_l+0x5a8>)
 8006994:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f7f9 fe34 	bl	8000608 <__aeabi_dmul>
 80069a0:	2301      	movs	r3, #1
 80069a2:	f109 0901 	add.w	r9, r9, #1
 80069a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069aa:	e7ca      	b.n	8006942 <_strtod_l+0x4e2>
 80069ac:	d0eb      	beq.n	8006986 <_strtod_l+0x526>
 80069ae:	f1c8 0800 	rsb	r8, r8, #0
 80069b2:	f018 020f 	ands.w	r2, r8, #15
 80069b6:	d00a      	beq.n	80069ce <_strtod_l+0x56e>
 80069b8:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <_strtod_l+0x5a4>)
 80069ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069be:	4650      	mov	r0, sl
 80069c0:	4659      	mov	r1, fp
 80069c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c6:	f7f9 ff49 	bl	800085c <__aeabi_ddiv>
 80069ca:	4682      	mov	sl, r0
 80069cc:	468b      	mov	fp, r1
 80069ce:	ea5f 1828 	movs.w	r8, r8, asr #4
 80069d2:	d0d8      	beq.n	8006986 <_strtod_l+0x526>
 80069d4:	f1b8 0f1f 	cmp.w	r8, #31
 80069d8:	dd1e      	ble.n	8006a18 <_strtod_l+0x5b8>
 80069da:	2500      	movs	r5, #0
 80069dc:	462e      	mov	r6, r5
 80069de:	9509      	str	r5, [sp, #36]	; 0x24
 80069e0:	9507      	str	r5, [sp, #28]
 80069e2:	2322      	movs	r3, #34	; 0x22
 80069e4:	f04f 0a00 	mov.w	sl, #0
 80069e8:	f04f 0b00 	mov.w	fp, #0
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	e789      	b.n	8006904 <_strtod_l+0x4a4>
 80069f0:	0800ae39 	.word	0x0800ae39
 80069f4:	0800ae74 	.word	0x0800ae74
 80069f8:	0800ae31 	.word	0x0800ae31
 80069fc:	0800aeb3 	.word	0x0800aeb3
 8006a00:	0800b170 	.word	0x0800b170
 8006a04:	0800b050 	.word	0x0800b050
 8006a08:	0800b028 	.word	0x0800b028
 8006a0c:	7ff00000 	.word	0x7ff00000
 8006a10:	7ca00000 	.word	0x7ca00000
 8006a14:	7fefffff 	.word	0x7fefffff
 8006a18:	f018 0310 	ands.w	r3, r8, #16
 8006a1c:	bf18      	it	ne
 8006a1e:	236a      	movne	r3, #106	; 0x6a
 8006a20:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006dd8 <_strtod_l+0x978>
 8006a24:	9304      	str	r3, [sp, #16]
 8006a26:	4650      	mov	r0, sl
 8006a28:	4659      	mov	r1, fp
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f018 0f01 	tst.w	r8, #1
 8006a30:	d004      	beq.n	8006a3c <_strtod_l+0x5dc>
 8006a32:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a36:	f7f9 fde7 	bl	8000608 <__aeabi_dmul>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006a40:	f109 0908 	add.w	r9, r9, #8
 8006a44:	d1f2      	bne.n	8006a2c <_strtod_l+0x5cc>
 8006a46:	b10b      	cbz	r3, 8006a4c <_strtod_l+0x5ec>
 8006a48:	4682      	mov	sl, r0
 8006a4a:	468b      	mov	fp, r1
 8006a4c:	9b04      	ldr	r3, [sp, #16]
 8006a4e:	b1bb      	cbz	r3, 8006a80 <_strtod_l+0x620>
 8006a50:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006a54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	4659      	mov	r1, fp
 8006a5c:	dd10      	ble.n	8006a80 <_strtod_l+0x620>
 8006a5e:	2b1f      	cmp	r3, #31
 8006a60:	f340 8128 	ble.w	8006cb4 <_strtod_l+0x854>
 8006a64:	2b34      	cmp	r3, #52	; 0x34
 8006a66:	bfde      	ittt	le
 8006a68:	3b20      	suble	r3, #32
 8006a6a:	f04f 32ff 	movle.w	r2, #4294967295
 8006a6e:	fa02 f303 	lslle.w	r3, r2, r3
 8006a72:	f04f 0a00 	mov.w	sl, #0
 8006a76:	bfcc      	ite	gt
 8006a78:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a7c:	ea03 0b01 	andle.w	fp, r3, r1
 8006a80:	2200      	movs	r2, #0
 8006a82:	2300      	movs	r3, #0
 8006a84:	4650      	mov	r0, sl
 8006a86:	4659      	mov	r1, fp
 8006a88:	f7fa f826 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d1a4      	bne.n	80069da <_strtod_l+0x57a>
 8006a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a96:	462b      	mov	r3, r5
 8006a98:	463a      	mov	r2, r7
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f001 fdaa 	bl	80085f4 <__s2b>
 8006aa0:	9009      	str	r0, [sp, #36]	; 0x24
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f43f af24 	beq.w	80068f0 <_strtod_l+0x490>
 8006aa8:	9b07      	ldr	r3, [sp, #28]
 8006aaa:	1b9e      	subs	r6, r3, r6
 8006aac:	9b08      	ldr	r3, [sp, #32]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	bfb4      	ite	lt
 8006ab2:	4633      	movlt	r3, r6
 8006ab4:	2300      	movge	r3, #0
 8006ab6:	9310      	str	r3, [sp, #64]	; 0x40
 8006ab8:	9b08      	ldr	r3, [sp, #32]
 8006aba:	2500      	movs	r5, #0
 8006abc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ac0:	9318      	str	r3, [sp, #96]	; 0x60
 8006ac2:	462e      	mov	r6, r5
 8006ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	6859      	ldr	r1, [r3, #4]
 8006aca:	f001 fce7 	bl	800849c <_Balloc>
 8006ace:	9007      	str	r0, [sp, #28]
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	f43f af11 	beq.w	80068f8 <_strtod_l+0x498>
 8006ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	3202      	adds	r2, #2
 8006adc:	f103 010c 	add.w	r1, r3, #12
 8006ae0:	0092      	lsls	r2, r2, #2
 8006ae2:	300c      	adds	r0, #12
 8006ae4:	f7ff f800 	bl	8005ae8 <memcpy>
 8006ae8:	ec4b ab10 	vmov	d0, sl, fp
 8006aec:	aa20      	add	r2, sp, #128	; 0x80
 8006aee:	a91f      	add	r1, sp, #124	; 0x7c
 8006af0:	4620      	mov	r0, r4
 8006af2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006af6:	f002 f8b9 	bl	8008c6c <__d2b>
 8006afa:	901e      	str	r0, [sp, #120]	; 0x78
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f43f aefb 	beq.w	80068f8 <_strtod_l+0x498>
 8006b02:	2101      	movs	r1, #1
 8006b04:	4620      	mov	r0, r4
 8006b06:	f001 fe0f 	bl	8008728 <__i2b>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	f43f aef3 	beq.w	80068f8 <_strtod_l+0x498>
 8006b12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b14:	9904      	ldr	r1, [sp, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfab      	itete	ge
 8006b1a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006b1c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006b1e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006b20:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006b24:	bfac      	ite	ge
 8006b26:	eb03 0902 	addge.w	r9, r3, r2
 8006b2a:	1ad7      	sublt	r7, r2, r3
 8006b2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b2e:	eba3 0801 	sub.w	r8, r3, r1
 8006b32:	4490      	add	r8, r2
 8006b34:	4ba3      	ldr	r3, [pc, #652]	; (8006dc4 <_strtod_l+0x964>)
 8006b36:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b3a:	4598      	cmp	r8, r3
 8006b3c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b40:	f280 80cc 	bge.w	8006cdc <_strtod_l+0x87c>
 8006b44:	eba3 0308 	sub.w	r3, r3, r8
 8006b48:	2b1f      	cmp	r3, #31
 8006b4a:	eba2 0203 	sub.w	r2, r2, r3
 8006b4e:	f04f 0101 	mov.w	r1, #1
 8006b52:	f300 80b6 	bgt.w	8006cc2 <_strtod_l+0x862>
 8006b56:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5a:	9311      	str	r3, [sp, #68]	; 0x44
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	930c      	str	r3, [sp, #48]	; 0x30
 8006b60:	eb09 0802 	add.w	r8, r9, r2
 8006b64:	9b04      	ldr	r3, [sp, #16]
 8006b66:	45c1      	cmp	r9, r8
 8006b68:	4417      	add	r7, r2
 8006b6a:	441f      	add	r7, r3
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	bfa8      	it	ge
 8006b70:	4643      	movge	r3, r8
 8006b72:	42bb      	cmp	r3, r7
 8006b74:	bfa8      	it	ge
 8006b76:	463b      	movge	r3, r7
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bfc2      	ittt	gt
 8006b7c:	eba8 0803 	subgt.w	r8, r8, r3
 8006b80:	1aff      	subgt	r7, r7, r3
 8006b82:	eba9 0903 	subgt.w	r9, r9, r3
 8006b86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dd17      	ble.n	8006bbc <_strtod_l+0x75c>
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4620      	mov	r0, r4
 8006b92:	f001 fe85 	bl	80088a0 <__pow5mult>
 8006b96:	4606      	mov	r6, r0
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	f43f aead 	beq.w	80068f8 <_strtod_l+0x498>
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f001 fdd6 	bl	8008754 <__multiply>
 8006ba8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f43f aea4 	beq.w	80068f8 <_strtod_l+0x498>
 8006bb0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f001 fcb2 	bl	800851c <_Bfree>
 8006bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bba:	931e      	str	r3, [sp, #120]	; 0x78
 8006bbc:	f1b8 0f00 	cmp.w	r8, #0
 8006bc0:	f300 8091 	bgt.w	8006ce6 <_strtod_l+0x886>
 8006bc4:	9b08      	ldr	r3, [sp, #32]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	dd08      	ble.n	8006bdc <_strtod_l+0x77c>
 8006bca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006bcc:	9907      	ldr	r1, [sp, #28]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f001 fe66 	bl	80088a0 <__pow5mult>
 8006bd4:	9007      	str	r0, [sp, #28]
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f43f ae8e 	beq.w	80068f8 <_strtod_l+0x498>
 8006bdc:	2f00      	cmp	r7, #0
 8006bde:	dd08      	ble.n	8006bf2 <_strtod_l+0x792>
 8006be0:	9907      	ldr	r1, [sp, #28]
 8006be2:	463a      	mov	r2, r7
 8006be4:	4620      	mov	r0, r4
 8006be6:	f001 feb5 	bl	8008954 <__lshift>
 8006bea:	9007      	str	r0, [sp, #28]
 8006bec:	2800      	cmp	r0, #0
 8006bee:	f43f ae83 	beq.w	80068f8 <_strtod_l+0x498>
 8006bf2:	f1b9 0f00 	cmp.w	r9, #0
 8006bf6:	dd08      	ble.n	8006c0a <_strtod_l+0x7aa>
 8006bf8:	4631      	mov	r1, r6
 8006bfa:	464a      	mov	r2, r9
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f001 fea9 	bl	8008954 <__lshift>
 8006c02:	4606      	mov	r6, r0
 8006c04:	2800      	cmp	r0, #0
 8006c06:	f43f ae77 	beq.w	80068f8 <_strtod_l+0x498>
 8006c0a:	9a07      	ldr	r2, [sp, #28]
 8006c0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f001 ff28 	bl	8008a64 <__mdiff>
 8006c14:	4605      	mov	r5, r0
 8006c16:	2800      	cmp	r0, #0
 8006c18:	f43f ae6e 	beq.w	80068f8 <_strtod_l+0x498>
 8006c1c:	68c3      	ldr	r3, [r0, #12]
 8006c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c20:	2300      	movs	r3, #0
 8006c22:	60c3      	str	r3, [r0, #12]
 8006c24:	4631      	mov	r1, r6
 8006c26:	f001 ff01 	bl	8008a2c <__mcmp>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	da65      	bge.n	8006cfa <_strtod_l+0x89a>
 8006c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c30:	ea53 030a 	orrs.w	r3, r3, sl
 8006c34:	f040 8087 	bne.w	8006d46 <_strtod_l+0x8e6>
 8006c38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 8082 	bne.w	8006d46 <_strtod_l+0x8e6>
 8006c42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c46:	0d1b      	lsrs	r3, r3, #20
 8006c48:	051b      	lsls	r3, r3, #20
 8006c4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c4e:	d97a      	bls.n	8006d46 <_strtod_l+0x8e6>
 8006c50:	696b      	ldr	r3, [r5, #20]
 8006c52:	b913      	cbnz	r3, 8006c5a <_strtod_l+0x7fa>
 8006c54:	692b      	ldr	r3, [r5, #16]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	dd75      	ble.n	8006d46 <_strtod_l+0x8e6>
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f001 fe78 	bl	8008954 <__lshift>
 8006c64:	4631      	mov	r1, r6
 8006c66:	4605      	mov	r5, r0
 8006c68:	f001 fee0 	bl	8008a2c <__mcmp>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	dd6a      	ble.n	8006d46 <_strtod_l+0x8e6>
 8006c70:	9904      	ldr	r1, [sp, #16]
 8006c72:	4a55      	ldr	r2, [pc, #340]	; (8006dc8 <_strtod_l+0x968>)
 8006c74:	465b      	mov	r3, fp
 8006c76:	2900      	cmp	r1, #0
 8006c78:	f000 8085 	beq.w	8006d86 <_strtod_l+0x926>
 8006c7c:	ea02 010b 	and.w	r1, r2, fp
 8006c80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006c84:	dc7f      	bgt.n	8006d86 <_strtod_l+0x926>
 8006c86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006c8a:	f77f aeaa 	ble.w	80069e2 <_strtod_l+0x582>
 8006c8e:	4a4f      	ldr	r2, [pc, #316]	; (8006dcc <_strtod_l+0x96c>)
 8006c90:	2300      	movs	r3, #0
 8006c92:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006c96:	4650      	mov	r0, sl
 8006c98:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006c9c:	4659      	mov	r1, fp
 8006c9e:	f7f9 fcb3 	bl	8000608 <__aeabi_dmul>
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4303      	orrs	r3, r0
 8006ca6:	bf08      	it	eq
 8006ca8:	2322      	moveq	r3, #34	; 0x22
 8006caa:	4682      	mov	sl, r0
 8006cac:	468b      	mov	fp, r1
 8006cae:	bf08      	it	eq
 8006cb0:	6023      	streq	r3, [r4, #0]
 8006cb2:	e62b      	b.n	800690c <_strtod_l+0x4ac>
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	ea03 0a0a 	and.w	sl, r3, sl
 8006cc0:	e6de      	b.n	8006a80 <_strtod_l+0x620>
 8006cc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006cc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006cca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006cce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006cd2:	fa01 f308 	lsl.w	r3, r1, r8
 8006cd6:	930c      	str	r3, [sp, #48]	; 0x30
 8006cd8:	9111      	str	r1, [sp, #68]	; 0x44
 8006cda:	e741      	b.n	8006b60 <_strtod_l+0x700>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	930c      	str	r3, [sp, #48]	; 0x30
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8006ce4:	e73c      	b.n	8006b60 <_strtod_l+0x700>
 8006ce6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ce8:	4642      	mov	r2, r8
 8006cea:	4620      	mov	r0, r4
 8006cec:	f001 fe32 	bl	8008954 <__lshift>
 8006cf0:	901e      	str	r0, [sp, #120]	; 0x78
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	f47f af66 	bne.w	8006bc4 <_strtod_l+0x764>
 8006cf8:	e5fe      	b.n	80068f8 <_strtod_l+0x498>
 8006cfa:	465f      	mov	r7, fp
 8006cfc:	d16e      	bne.n	8006ddc <_strtod_l+0x97c>
 8006cfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d04:	b342      	cbz	r2, 8006d58 <_strtod_l+0x8f8>
 8006d06:	4a32      	ldr	r2, [pc, #200]	; (8006dd0 <_strtod_l+0x970>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d128      	bne.n	8006d5e <_strtod_l+0x8fe>
 8006d0c:	9b04      	ldr	r3, [sp, #16]
 8006d0e:	4650      	mov	r0, sl
 8006d10:	b1eb      	cbz	r3, 8006d4e <_strtod_l+0x8ee>
 8006d12:	4a2d      	ldr	r2, [pc, #180]	; (8006dc8 <_strtod_l+0x968>)
 8006d14:	403a      	ands	r2, r7
 8006d16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006d1a:	f04f 31ff 	mov.w	r1, #4294967295
 8006d1e:	d819      	bhi.n	8006d54 <_strtod_l+0x8f4>
 8006d20:	0d12      	lsrs	r2, r2, #20
 8006d22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d26:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2a:	4298      	cmp	r0, r3
 8006d2c:	d117      	bne.n	8006d5e <_strtod_l+0x8fe>
 8006d2e:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <_strtod_l+0x974>)
 8006d30:	429f      	cmp	r7, r3
 8006d32:	d102      	bne.n	8006d3a <_strtod_l+0x8da>
 8006d34:	3001      	adds	r0, #1
 8006d36:	f43f addf 	beq.w	80068f8 <_strtod_l+0x498>
 8006d3a:	4b23      	ldr	r3, [pc, #140]	; (8006dc8 <_strtod_l+0x968>)
 8006d3c:	403b      	ands	r3, r7
 8006d3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006d42:	f04f 0a00 	mov.w	sl, #0
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1a0      	bne.n	8006c8e <_strtod_l+0x82e>
 8006d4c:	e5de      	b.n	800690c <_strtod_l+0x4ac>
 8006d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d52:	e7ea      	b.n	8006d2a <_strtod_l+0x8ca>
 8006d54:	460b      	mov	r3, r1
 8006d56:	e7e8      	b.n	8006d2a <_strtod_l+0x8ca>
 8006d58:	ea53 030a 	orrs.w	r3, r3, sl
 8006d5c:	d088      	beq.n	8006c70 <_strtod_l+0x810>
 8006d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d60:	b1db      	cbz	r3, 8006d9a <_strtod_l+0x93a>
 8006d62:	423b      	tst	r3, r7
 8006d64:	d0ef      	beq.n	8006d46 <_strtod_l+0x8e6>
 8006d66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d68:	9a04      	ldr	r2, [sp, #16]
 8006d6a:	4650      	mov	r0, sl
 8006d6c:	4659      	mov	r1, fp
 8006d6e:	b1c3      	cbz	r3, 8006da2 <_strtod_l+0x942>
 8006d70:	f7ff fb5a 	bl	8006428 <sulp>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d7c:	f7f9 fa8e 	bl	800029c <__adddf3>
 8006d80:	4682      	mov	sl, r0
 8006d82:	468b      	mov	fp, r1
 8006d84:	e7df      	b.n	8006d46 <_strtod_l+0x8e6>
 8006d86:	4013      	ands	r3, r2
 8006d88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d94:	f04f 3aff 	mov.w	sl, #4294967295
 8006d98:	e7d5      	b.n	8006d46 <_strtod_l+0x8e6>
 8006d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d9c:	ea13 0f0a 	tst.w	r3, sl
 8006da0:	e7e0      	b.n	8006d64 <_strtod_l+0x904>
 8006da2:	f7ff fb41 	bl	8006428 <sulp>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006dae:	f7f9 fa73 	bl	8000298 <__aeabi_dsub>
 8006db2:	2200      	movs	r2, #0
 8006db4:	2300      	movs	r3, #0
 8006db6:	4682      	mov	sl, r0
 8006db8:	468b      	mov	fp, r1
 8006dba:	f7f9 fe8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d0c1      	beq.n	8006d46 <_strtod_l+0x8e6>
 8006dc2:	e60e      	b.n	80069e2 <_strtod_l+0x582>
 8006dc4:	fffffc02 	.word	0xfffffc02
 8006dc8:	7ff00000 	.word	0x7ff00000
 8006dcc:	39500000 	.word	0x39500000
 8006dd0:	000fffff 	.word	0x000fffff
 8006dd4:	7fefffff 	.word	0x7fefffff
 8006dd8:	0800ae88 	.word	0x0800ae88
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	f001 ffa0 	bl	8008d24 <__ratio>
 8006de4:	ec59 8b10 	vmov	r8, r9, d0
 8006de8:	ee10 0a10 	vmov	r0, s0
 8006dec:	2200      	movs	r2, #0
 8006dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006df2:	4649      	mov	r1, r9
 8006df4:	f7f9 fe84 	bl	8000b00 <__aeabi_dcmple>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d07c      	beq.n	8006ef6 <_strtod_l+0xa96>
 8006dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d04c      	beq.n	8006e9c <_strtod_l+0xa3c>
 8006e02:	4b95      	ldr	r3, [pc, #596]	; (8007058 <_strtod_l+0xbf8>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006e0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007058 <_strtod_l+0xbf8>
 8006e0e:	f04f 0800 	mov.w	r8, #0
 8006e12:	4b92      	ldr	r3, [pc, #584]	; (800705c <_strtod_l+0xbfc>)
 8006e14:	403b      	ands	r3, r7
 8006e16:	9311      	str	r3, [sp, #68]	; 0x44
 8006e18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006e1a:	4b91      	ldr	r3, [pc, #580]	; (8007060 <_strtod_l+0xc00>)
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	f040 80b2 	bne.w	8006f86 <_strtod_l+0xb26>
 8006e22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e2a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006e2e:	ec4b ab10 	vmov	d0, sl, fp
 8006e32:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006e36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006e3a:	f001 fe9b 	bl	8008b74 <__ulp>
 8006e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e42:	ec53 2b10 	vmov	r2, r3, d0
 8006e46:	f7f9 fbdf 	bl	8000608 <__aeabi_dmul>
 8006e4a:	4652      	mov	r2, sl
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	f7f9 fa25 	bl	800029c <__adddf3>
 8006e52:	460b      	mov	r3, r1
 8006e54:	4981      	ldr	r1, [pc, #516]	; (800705c <_strtod_l+0xbfc>)
 8006e56:	4a83      	ldr	r2, [pc, #524]	; (8007064 <_strtod_l+0xc04>)
 8006e58:	4019      	ands	r1, r3
 8006e5a:	4291      	cmp	r1, r2
 8006e5c:	4682      	mov	sl, r0
 8006e5e:	d95e      	bls.n	8006f1e <_strtod_l+0xabe>
 8006e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d103      	bne.n	8006e72 <_strtod_l+0xa12>
 8006e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	f43f ad43 	beq.w	80068f8 <_strtod_l+0x498>
 8006e72:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007070 <_strtod_l+0xc10>
 8006e76:	f04f 3aff 	mov.w	sl, #4294967295
 8006e7a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f001 fb4d 	bl	800851c <_Bfree>
 8006e82:	9907      	ldr	r1, [sp, #28]
 8006e84:	4620      	mov	r0, r4
 8006e86:	f001 fb49 	bl	800851c <_Bfree>
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f001 fb45 	bl	800851c <_Bfree>
 8006e92:	4629      	mov	r1, r5
 8006e94:	4620      	mov	r0, r4
 8006e96:	f001 fb41 	bl	800851c <_Bfree>
 8006e9a:	e613      	b.n	8006ac4 <_strtod_l+0x664>
 8006e9c:	f1ba 0f00 	cmp.w	sl, #0
 8006ea0:	d11b      	bne.n	8006eda <_strtod_l+0xa7a>
 8006ea2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ea6:	b9f3      	cbnz	r3, 8006ee6 <_strtod_l+0xa86>
 8006ea8:	4b6b      	ldr	r3, [pc, #428]	; (8007058 <_strtod_l+0xbf8>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4640      	mov	r0, r8
 8006eae:	4649      	mov	r1, r9
 8006eb0:	f7f9 fe1c 	bl	8000aec <__aeabi_dcmplt>
 8006eb4:	b9d0      	cbnz	r0, 8006eec <_strtod_l+0xa8c>
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4b6b      	ldr	r3, [pc, #428]	; (8007068 <_strtod_l+0xc08>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f7f9 fba3 	bl	8000608 <__aeabi_dmul>
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	4689      	mov	r9, r1
 8006ec6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006eca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006ece:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ed0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006ed4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006ed8:	e79b      	b.n	8006e12 <_strtod_l+0x9b2>
 8006eda:	f1ba 0f01 	cmp.w	sl, #1
 8006ede:	d102      	bne.n	8006ee6 <_strtod_l+0xa86>
 8006ee0:	2f00      	cmp	r7, #0
 8006ee2:	f43f ad7e 	beq.w	80069e2 <_strtod_l+0x582>
 8006ee6:	4b61      	ldr	r3, [pc, #388]	; (800706c <_strtod_l+0xc0c>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	e78c      	b.n	8006e06 <_strtod_l+0x9a6>
 8006eec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007068 <_strtod_l+0xc08>
 8006ef0:	f04f 0800 	mov.w	r8, #0
 8006ef4:	e7e7      	b.n	8006ec6 <_strtod_l+0xa66>
 8006ef6:	4b5c      	ldr	r3, [pc, #368]	; (8007068 <_strtod_l+0xc08>)
 8006ef8:	4640      	mov	r0, r8
 8006efa:	4649      	mov	r1, r9
 8006efc:	2200      	movs	r2, #0
 8006efe:	f7f9 fb83 	bl	8000608 <__aeabi_dmul>
 8006f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f04:	4680      	mov	r8, r0
 8006f06:	4689      	mov	r9, r1
 8006f08:	b933      	cbnz	r3, 8006f18 <_strtod_l+0xab8>
 8006f0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f0e:	9012      	str	r0, [sp, #72]	; 0x48
 8006f10:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006f16:	e7dd      	b.n	8006ed4 <_strtod_l+0xa74>
 8006f18:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006f1c:	e7f9      	b.n	8006f12 <_strtod_l+0xab2>
 8006f1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006f22:	9b04      	ldr	r3, [sp, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1a8      	bne.n	8006e7a <_strtod_l+0xa1a>
 8006f28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f2e:	0d1b      	lsrs	r3, r3, #20
 8006f30:	051b      	lsls	r3, r3, #20
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d1a1      	bne.n	8006e7a <_strtod_l+0xa1a>
 8006f36:	4640      	mov	r0, r8
 8006f38:	4649      	mov	r1, r9
 8006f3a:	f7f9 fec5 	bl	8000cc8 <__aeabi_d2lz>
 8006f3e:	f7f9 fb35 	bl	80005ac <__aeabi_l2d>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	4640      	mov	r0, r8
 8006f48:	4649      	mov	r1, r9
 8006f4a:	f7f9 f9a5 	bl	8000298 <__aeabi_dsub>
 8006f4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f54:	ea43 030a 	orr.w	r3, r3, sl
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	4689      	mov	r9, r1
 8006f5e:	d053      	beq.n	8007008 <_strtod_l+0xba8>
 8006f60:	a335      	add	r3, pc, #212	; (adr r3, 8007038 <_strtod_l+0xbd8>)
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f7f9 fdc1 	bl	8000aec <__aeabi_dcmplt>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	f47f acce 	bne.w	800690c <_strtod_l+0x4ac>
 8006f70:	a333      	add	r3, pc, #204	; (adr r3, 8007040 <_strtod_l+0xbe0>)
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	4640      	mov	r0, r8
 8006f78:	4649      	mov	r1, r9
 8006f7a:	f7f9 fdd5 	bl	8000b28 <__aeabi_dcmpgt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f43f af7b 	beq.w	8006e7a <_strtod_l+0xa1a>
 8006f84:	e4c2      	b.n	800690c <_strtod_l+0x4ac>
 8006f86:	9b04      	ldr	r3, [sp, #16]
 8006f88:	b333      	cbz	r3, 8006fd8 <_strtod_l+0xb78>
 8006f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f90:	d822      	bhi.n	8006fd8 <_strtod_l+0xb78>
 8006f92:	a32d      	add	r3, pc, #180	; (adr r3, 8007048 <_strtod_l+0xbe8>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	4640      	mov	r0, r8
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	f7f9 fdb0 	bl	8000b00 <__aeabi_dcmple>
 8006fa0:	b1a0      	cbz	r0, 8006fcc <_strtod_l+0xb6c>
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	f7f9 fe07 	bl	8000bb8 <__aeabi_d2uiz>
 8006faa:	2801      	cmp	r0, #1
 8006fac:	bf38      	it	cc
 8006fae:	2001      	movcc	r0, #1
 8006fb0:	f7f9 fab0 	bl	8000514 <__aeabi_ui2d>
 8006fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fb6:	4680      	mov	r8, r0
 8006fb8:	4689      	mov	r9, r1
 8006fba:	bb13      	cbnz	r3, 8007002 <_strtod_l+0xba2>
 8006fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fc0:	9014      	str	r0, [sp, #80]	; 0x50
 8006fc2:	9315      	str	r3, [sp, #84]	; 0x54
 8006fc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006fc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006fd0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006fd4:	1a9b      	subs	r3, r3, r2
 8006fd6:	930d      	str	r3, [sp, #52]	; 0x34
 8006fd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fdc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006fe0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006fe4:	f001 fdc6 	bl	8008b74 <__ulp>
 8006fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fec:	ec53 2b10 	vmov	r2, r3, d0
 8006ff0:	f7f9 fb0a 	bl	8000608 <__aeabi_dmul>
 8006ff4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ff8:	f7f9 f950 	bl	800029c <__adddf3>
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	468b      	mov	fp, r1
 8007000:	e78f      	b.n	8006f22 <_strtod_l+0xac2>
 8007002:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007006:	e7dd      	b.n	8006fc4 <_strtod_l+0xb64>
 8007008:	a311      	add	r3, pc, #68	; (adr r3, 8007050 <_strtod_l+0xbf0>)
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f7f9 fd6d 	bl	8000aec <__aeabi_dcmplt>
 8007012:	e7b4      	b.n	8006f7e <_strtod_l+0xb1e>
 8007014:	2300      	movs	r3, #0
 8007016:	930e      	str	r3, [sp, #56]	; 0x38
 8007018:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800701a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	f7ff ba65 	b.w	80064ec <_strtod_l+0x8c>
 8007022:	2b65      	cmp	r3, #101	; 0x65
 8007024:	f43f ab5d 	beq.w	80066e2 <_strtod_l+0x282>
 8007028:	2b45      	cmp	r3, #69	; 0x45
 800702a:	f43f ab5a 	beq.w	80066e2 <_strtod_l+0x282>
 800702e:	2201      	movs	r2, #1
 8007030:	f7ff bb92 	b.w	8006758 <_strtod_l+0x2f8>
 8007034:	f3af 8000 	nop.w
 8007038:	94a03595 	.word	0x94a03595
 800703c:	3fdfffff 	.word	0x3fdfffff
 8007040:	35afe535 	.word	0x35afe535
 8007044:	3fe00000 	.word	0x3fe00000
 8007048:	ffc00000 	.word	0xffc00000
 800704c:	41dfffff 	.word	0x41dfffff
 8007050:	94a03595 	.word	0x94a03595
 8007054:	3fcfffff 	.word	0x3fcfffff
 8007058:	3ff00000 	.word	0x3ff00000
 800705c:	7ff00000 	.word	0x7ff00000
 8007060:	7fe00000 	.word	0x7fe00000
 8007064:	7c9fffff 	.word	0x7c9fffff
 8007068:	3fe00000 	.word	0x3fe00000
 800706c:	bff00000 	.word	0xbff00000
 8007070:	7fefffff 	.word	0x7fefffff

08007074 <strtod>:
 8007074:	460a      	mov	r2, r1
 8007076:	4601      	mov	r1, r0
 8007078:	4802      	ldr	r0, [pc, #8]	; (8007084 <strtod+0x10>)
 800707a:	4b03      	ldr	r3, [pc, #12]	; (8007088 <strtod+0x14>)
 800707c:	6800      	ldr	r0, [r0, #0]
 800707e:	f7ff b9ef 	b.w	8006460 <_strtod_l>
 8007082:	bf00      	nop
 8007084:	2000001c 	.word	0x2000001c
 8007088:	20000084 	.word	0x20000084

0800708c <quorem>:
 800708c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007090:	6903      	ldr	r3, [r0, #16]
 8007092:	690c      	ldr	r4, [r1, #16]
 8007094:	42a3      	cmp	r3, r4
 8007096:	4607      	mov	r7, r0
 8007098:	f2c0 8081 	blt.w	800719e <quorem+0x112>
 800709c:	3c01      	subs	r4, #1
 800709e:	f101 0814 	add.w	r8, r1, #20
 80070a2:	f100 0514 	add.w	r5, r0, #20
 80070a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070b4:	3301      	adds	r3, #1
 80070b6:	429a      	cmp	r2, r3
 80070b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80070c4:	d331      	bcc.n	800712a <quorem+0x9e>
 80070c6:	f04f 0e00 	mov.w	lr, #0
 80070ca:	4640      	mov	r0, r8
 80070cc:	46ac      	mov	ip, r5
 80070ce:	46f2      	mov	sl, lr
 80070d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80070d4:	b293      	uxth	r3, r2
 80070d6:	fb06 e303 	mla	r3, r6, r3, lr
 80070da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070de:	b29b      	uxth	r3, r3
 80070e0:	ebaa 0303 	sub.w	r3, sl, r3
 80070e4:	0c12      	lsrs	r2, r2, #16
 80070e6:	f8dc a000 	ldr.w	sl, [ip]
 80070ea:	fb06 e202 	mla	r2, r6, r2, lr
 80070ee:	fa13 f38a 	uxtah	r3, r3, sl
 80070f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070f6:	fa1f fa82 	uxth.w	sl, r2
 80070fa:	f8dc 2000 	ldr.w	r2, [ip]
 80070fe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007102:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007106:	b29b      	uxth	r3, r3
 8007108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800710c:	4581      	cmp	r9, r0
 800710e:	f84c 3b04 	str.w	r3, [ip], #4
 8007112:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007116:	d2db      	bcs.n	80070d0 <quorem+0x44>
 8007118:	f855 300b 	ldr.w	r3, [r5, fp]
 800711c:	b92b      	cbnz	r3, 800712a <quorem+0x9e>
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	3b04      	subs	r3, #4
 8007122:	429d      	cmp	r5, r3
 8007124:	461a      	mov	r2, r3
 8007126:	d32e      	bcc.n	8007186 <quorem+0xfa>
 8007128:	613c      	str	r4, [r7, #16]
 800712a:	4638      	mov	r0, r7
 800712c:	f001 fc7e 	bl	8008a2c <__mcmp>
 8007130:	2800      	cmp	r0, #0
 8007132:	db24      	blt.n	800717e <quorem+0xf2>
 8007134:	3601      	adds	r6, #1
 8007136:	4628      	mov	r0, r5
 8007138:	f04f 0c00 	mov.w	ip, #0
 800713c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007140:	f8d0 e000 	ldr.w	lr, [r0]
 8007144:	b293      	uxth	r3, r2
 8007146:	ebac 0303 	sub.w	r3, ip, r3
 800714a:	0c12      	lsrs	r2, r2, #16
 800714c:	fa13 f38e 	uxtah	r3, r3, lr
 8007150:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007154:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007158:	b29b      	uxth	r3, r3
 800715a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800715e:	45c1      	cmp	r9, r8
 8007160:	f840 3b04 	str.w	r3, [r0], #4
 8007164:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007168:	d2e8      	bcs.n	800713c <quorem+0xb0>
 800716a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800716e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007172:	b922      	cbnz	r2, 800717e <quorem+0xf2>
 8007174:	3b04      	subs	r3, #4
 8007176:	429d      	cmp	r5, r3
 8007178:	461a      	mov	r2, r3
 800717a:	d30a      	bcc.n	8007192 <quorem+0x106>
 800717c:	613c      	str	r4, [r7, #16]
 800717e:	4630      	mov	r0, r6
 8007180:	b003      	add	sp, #12
 8007182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	3b04      	subs	r3, #4
 800718a:	2a00      	cmp	r2, #0
 800718c:	d1cc      	bne.n	8007128 <quorem+0x9c>
 800718e:	3c01      	subs	r4, #1
 8007190:	e7c7      	b.n	8007122 <quorem+0x96>
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	3b04      	subs	r3, #4
 8007196:	2a00      	cmp	r2, #0
 8007198:	d1f0      	bne.n	800717c <quorem+0xf0>
 800719a:	3c01      	subs	r4, #1
 800719c:	e7eb      	b.n	8007176 <quorem+0xea>
 800719e:	2000      	movs	r0, #0
 80071a0:	e7ee      	b.n	8007180 <quorem+0xf4>
 80071a2:	0000      	movs	r0, r0
 80071a4:	0000      	movs	r0, r0
	...

080071a8 <_dtoa_r>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	ed2d 8b02 	vpush	{d8}
 80071b0:	ec57 6b10 	vmov	r6, r7, d0
 80071b4:	b095      	sub	sp, #84	; 0x54
 80071b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071bc:	9105      	str	r1, [sp, #20]
 80071be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80071c2:	4604      	mov	r4, r0
 80071c4:	9209      	str	r2, [sp, #36]	; 0x24
 80071c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80071c8:	b975      	cbnz	r5, 80071e8 <_dtoa_r+0x40>
 80071ca:	2010      	movs	r0, #16
 80071cc:	f001 f94c 	bl	8008468 <malloc>
 80071d0:	4602      	mov	r2, r0
 80071d2:	6260      	str	r0, [r4, #36]	; 0x24
 80071d4:	b920      	cbnz	r0, 80071e0 <_dtoa_r+0x38>
 80071d6:	4bb2      	ldr	r3, [pc, #712]	; (80074a0 <_dtoa_r+0x2f8>)
 80071d8:	21ea      	movs	r1, #234	; 0xea
 80071da:	48b2      	ldr	r0, [pc, #712]	; (80074a4 <_dtoa_r+0x2fc>)
 80071dc:	f002 f868 	bl	80092b0 <__assert_func>
 80071e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071e4:	6005      	str	r5, [r0, #0]
 80071e6:	60c5      	str	r5, [r0, #12]
 80071e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ea:	6819      	ldr	r1, [r3, #0]
 80071ec:	b151      	cbz	r1, 8007204 <_dtoa_r+0x5c>
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	604a      	str	r2, [r1, #4]
 80071f2:	2301      	movs	r3, #1
 80071f4:	4093      	lsls	r3, r2
 80071f6:	608b      	str	r3, [r1, #8]
 80071f8:	4620      	mov	r0, r4
 80071fa:	f001 f98f 	bl	800851c <_Bfree>
 80071fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	1e3b      	subs	r3, r7, #0
 8007206:	bfb9      	ittee	lt
 8007208:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800720c:	9303      	strlt	r3, [sp, #12]
 800720e:	2300      	movge	r3, #0
 8007210:	f8c8 3000 	strge.w	r3, [r8]
 8007214:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007218:	4ba3      	ldr	r3, [pc, #652]	; (80074a8 <_dtoa_r+0x300>)
 800721a:	bfbc      	itt	lt
 800721c:	2201      	movlt	r2, #1
 800721e:	f8c8 2000 	strlt.w	r2, [r8]
 8007222:	ea33 0309 	bics.w	r3, r3, r9
 8007226:	d11b      	bne.n	8007260 <_dtoa_r+0xb8>
 8007228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800722a:	f242 730f 	movw	r3, #9999	; 0x270f
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007234:	4333      	orrs	r3, r6
 8007236:	f000 857a 	beq.w	8007d2e <_dtoa_r+0xb86>
 800723a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800723c:	b963      	cbnz	r3, 8007258 <_dtoa_r+0xb0>
 800723e:	4b9b      	ldr	r3, [pc, #620]	; (80074ac <_dtoa_r+0x304>)
 8007240:	e024      	b.n	800728c <_dtoa_r+0xe4>
 8007242:	4b9b      	ldr	r3, [pc, #620]	; (80074b0 <_dtoa_r+0x308>)
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	3308      	adds	r3, #8
 8007248:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	9800      	ldr	r0, [sp, #0]
 800724e:	b015      	add	sp, #84	; 0x54
 8007250:	ecbd 8b02 	vpop	{d8}
 8007254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007258:	4b94      	ldr	r3, [pc, #592]	; (80074ac <_dtoa_r+0x304>)
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	3303      	adds	r3, #3
 800725e:	e7f3      	b.n	8007248 <_dtoa_r+0xa0>
 8007260:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007264:	2200      	movs	r2, #0
 8007266:	ec51 0b17 	vmov	r0, r1, d7
 800726a:	2300      	movs	r3, #0
 800726c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007270:	f7f9 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 8007274:	4680      	mov	r8, r0
 8007276:	b158      	cbz	r0, 8007290 <_dtoa_r+0xe8>
 8007278:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800727a:	2301      	movs	r3, #1
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 8551 	beq.w	8007d28 <_dtoa_r+0xb80>
 8007286:	488b      	ldr	r0, [pc, #556]	; (80074b4 <_dtoa_r+0x30c>)
 8007288:	6018      	str	r0, [r3, #0]
 800728a:	1e43      	subs	r3, r0, #1
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	e7dd      	b.n	800724c <_dtoa_r+0xa4>
 8007290:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007294:	aa12      	add	r2, sp, #72	; 0x48
 8007296:	a913      	add	r1, sp, #76	; 0x4c
 8007298:	4620      	mov	r0, r4
 800729a:	f001 fce7 	bl	8008c6c <__d2b>
 800729e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072a2:	4683      	mov	fp, r0
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	d07c      	beq.n	80073a2 <_dtoa_r+0x1fa>
 80072a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80072ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80072b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80072ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80072be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072c2:	4b7d      	ldr	r3, [pc, #500]	; (80074b8 <_dtoa_r+0x310>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	4630      	mov	r0, r6
 80072c8:	4639      	mov	r1, r7
 80072ca:	f7f8 ffe5 	bl	8000298 <__aeabi_dsub>
 80072ce:	a36e      	add	r3, pc, #440	; (adr r3, 8007488 <_dtoa_r+0x2e0>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f9 f998 	bl	8000608 <__aeabi_dmul>
 80072d8:	a36d      	add	r3, pc, #436	; (adr r3, 8007490 <_dtoa_r+0x2e8>)
 80072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072de:	f7f8 ffdd 	bl	800029c <__adddf3>
 80072e2:	4606      	mov	r6, r0
 80072e4:	4628      	mov	r0, r5
 80072e6:	460f      	mov	r7, r1
 80072e8:	f7f9 f924 	bl	8000534 <__aeabi_i2d>
 80072ec:	a36a      	add	r3, pc, #424	; (adr r3, 8007498 <_dtoa_r+0x2f0>)
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	f7f9 f989 	bl	8000608 <__aeabi_dmul>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4630      	mov	r0, r6
 80072fc:	4639      	mov	r1, r7
 80072fe:	f7f8 ffcd 	bl	800029c <__adddf3>
 8007302:	4606      	mov	r6, r0
 8007304:	460f      	mov	r7, r1
 8007306:	f7f9 fc2f 	bl	8000b68 <__aeabi_d2iz>
 800730a:	2200      	movs	r2, #0
 800730c:	4682      	mov	sl, r0
 800730e:	2300      	movs	r3, #0
 8007310:	4630      	mov	r0, r6
 8007312:	4639      	mov	r1, r7
 8007314:	f7f9 fbea 	bl	8000aec <__aeabi_dcmplt>
 8007318:	b148      	cbz	r0, 800732e <_dtoa_r+0x186>
 800731a:	4650      	mov	r0, sl
 800731c:	f7f9 f90a 	bl	8000534 <__aeabi_i2d>
 8007320:	4632      	mov	r2, r6
 8007322:	463b      	mov	r3, r7
 8007324:	f7f9 fbd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007328:	b908      	cbnz	r0, 800732e <_dtoa_r+0x186>
 800732a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800732e:	f1ba 0f16 	cmp.w	sl, #22
 8007332:	d854      	bhi.n	80073de <_dtoa_r+0x236>
 8007334:	4b61      	ldr	r3, [pc, #388]	; (80074bc <_dtoa_r+0x314>)
 8007336:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007342:	f7f9 fbd3 	bl	8000aec <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	d04b      	beq.n	80073e2 <_dtoa_r+0x23a>
 800734a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800734e:	2300      	movs	r3, #0
 8007350:	930e      	str	r3, [sp, #56]	; 0x38
 8007352:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007354:	1b5d      	subs	r5, r3, r5
 8007356:	1e6b      	subs	r3, r5, #1
 8007358:	9304      	str	r3, [sp, #16]
 800735a:	bf43      	ittte	mi
 800735c:	2300      	movmi	r3, #0
 800735e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007362:	9304      	strmi	r3, [sp, #16]
 8007364:	f04f 0800 	movpl.w	r8, #0
 8007368:	f1ba 0f00 	cmp.w	sl, #0
 800736c:	db3b      	blt.n	80073e6 <_dtoa_r+0x23e>
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007374:	4453      	add	r3, sl
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	2300      	movs	r3, #0
 800737a:	9306      	str	r3, [sp, #24]
 800737c:	9b05      	ldr	r3, [sp, #20]
 800737e:	2b09      	cmp	r3, #9
 8007380:	d869      	bhi.n	8007456 <_dtoa_r+0x2ae>
 8007382:	2b05      	cmp	r3, #5
 8007384:	bfc4      	itt	gt
 8007386:	3b04      	subgt	r3, #4
 8007388:	9305      	strgt	r3, [sp, #20]
 800738a:	9b05      	ldr	r3, [sp, #20]
 800738c:	f1a3 0302 	sub.w	r3, r3, #2
 8007390:	bfcc      	ite	gt
 8007392:	2500      	movgt	r5, #0
 8007394:	2501      	movle	r5, #1
 8007396:	2b03      	cmp	r3, #3
 8007398:	d869      	bhi.n	800746e <_dtoa_r+0x2c6>
 800739a:	e8df f003 	tbb	[pc, r3]
 800739e:	4e2c      	.short	0x4e2c
 80073a0:	5a4c      	.short	0x5a4c
 80073a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80073a6:	441d      	add	r5, r3
 80073a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	bfc1      	itttt	gt
 80073b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80073b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80073bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073c0:	bfda      	itte	le
 80073c2:	f1c3 0320 	rsble	r3, r3, #32
 80073c6:	fa06 f003 	lslle.w	r0, r6, r3
 80073ca:	4318      	orrgt	r0, r3
 80073cc:	f7f9 f8a2 	bl	8000514 <__aeabi_ui2d>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4606      	mov	r6, r0
 80073d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80073d8:	3d01      	subs	r5, #1
 80073da:	9310      	str	r3, [sp, #64]	; 0x40
 80073dc:	e771      	b.n	80072c2 <_dtoa_r+0x11a>
 80073de:	2301      	movs	r3, #1
 80073e0:	e7b6      	b.n	8007350 <_dtoa_r+0x1a8>
 80073e2:	900e      	str	r0, [sp, #56]	; 0x38
 80073e4:	e7b5      	b.n	8007352 <_dtoa_r+0x1aa>
 80073e6:	f1ca 0300 	rsb	r3, sl, #0
 80073ea:	9306      	str	r3, [sp, #24]
 80073ec:	2300      	movs	r3, #0
 80073ee:	eba8 080a 	sub.w	r8, r8, sl
 80073f2:	930d      	str	r3, [sp, #52]	; 0x34
 80073f4:	e7c2      	b.n	800737c <_dtoa_r+0x1d4>
 80073f6:	2300      	movs	r3, #0
 80073f8:	9308      	str	r3, [sp, #32]
 80073fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc39      	bgt.n	8007474 <_dtoa_r+0x2cc>
 8007400:	f04f 0901 	mov.w	r9, #1
 8007404:	f8cd 9004 	str.w	r9, [sp, #4]
 8007408:	464b      	mov	r3, r9
 800740a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800740e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007410:	2200      	movs	r2, #0
 8007412:	6042      	str	r2, [r0, #4]
 8007414:	2204      	movs	r2, #4
 8007416:	f102 0614 	add.w	r6, r2, #20
 800741a:	429e      	cmp	r6, r3
 800741c:	6841      	ldr	r1, [r0, #4]
 800741e:	d92f      	bls.n	8007480 <_dtoa_r+0x2d8>
 8007420:	4620      	mov	r0, r4
 8007422:	f001 f83b 	bl	800849c <_Balloc>
 8007426:	9000      	str	r0, [sp, #0]
 8007428:	2800      	cmp	r0, #0
 800742a:	d14b      	bne.n	80074c4 <_dtoa_r+0x31c>
 800742c:	4b24      	ldr	r3, [pc, #144]	; (80074c0 <_dtoa_r+0x318>)
 800742e:	4602      	mov	r2, r0
 8007430:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007434:	e6d1      	b.n	80071da <_dtoa_r+0x32>
 8007436:	2301      	movs	r3, #1
 8007438:	e7de      	b.n	80073f8 <_dtoa_r+0x250>
 800743a:	2300      	movs	r3, #0
 800743c:	9308      	str	r3, [sp, #32]
 800743e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007440:	eb0a 0903 	add.w	r9, sl, r3
 8007444:	f109 0301 	add.w	r3, r9, #1
 8007448:	2b01      	cmp	r3, #1
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	bfb8      	it	lt
 800744e:	2301      	movlt	r3, #1
 8007450:	e7dd      	b.n	800740e <_dtoa_r+0x266>
 8007452:	2301      	movs	r3, #1
 8007454:	e7f2      	b.n	800743c <_dtoa_r+0x294>
 8007456:	2501      	movs	r5, #1
 8007458:	2300      	movs	r3, #0
 800745a:	9305      	str	r3, [sp, #20]
 800745c:	9508      	str	r5, [sp, #32]
 800745e:	f04f 39ff 	mov.w	r9, #4294967295
 8007462:	2200      	movs	r2, #0
 8007464:	f8cd 9004 	str.w	r9, [sp, #4]
 8007468:	2312      	movs	r3, #18
 800746a:	9209      	str	r2, [sp, #36]	; 0x24
 800746c:	e7cf      	b.n	800740e <_dtoa_r+0x266>
 800746e:	2301      	movs	r3, #1
 8007470:	9308      	str	r3, [sp, #32]
 8007472:	e7f4      	b.n	800745e <_dtoa_r+0x2b6>
 8007474:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007478:	f8cd 9004 	str.w	r9, [sp, #4]
 800747c:	464b      	mov	r3, r9
 800747e:	e7c6      	b.n	800740e <_dtoa_r+0x266>
 8007480:	3101      	adds	r1, #1
 8007482:	6041      	str	r1, [r0, #4]
 8007484:	0052      	lsls	r2, r2, #1
 8007486:	e7c6      	b.n	8007416 <_dtoa_r+0x26e>
 8007488:	636f4361 	.word	0x636f4361
 800748c:	3fd287a7 	.word	0x3fd287a7
 8007490:	8b60c8b3 	.word	0x8b60c8b3
 8007494:	3fc68a28 	.word	0x3fc68a28
 8007498:	509f79fb 	.word	0x509f79fb
 800749c:	3fd34413 	.word	0x3fd34413
 80074a0:	0800aebd 	.word	0x0800aebd
 80074a4:	0800aed4 	.word	0x0800aed4
 80074a8:	7ff00000 	.word	0x7ff00000
 80074ac:	0800aeb9 	.word	0x0800aeb9
 80074b0:	0800aeb0 	.word	0x0800aeb0
 80074b4:	0800ae3d 	.word	0x0800ae3d
 80074b8:	3ff80000 	.word	0x3ff80000
 80074bc:	0800b050 	.word	0x0800b050
 80074c0:	0800af33 	.word	0x0800af33
 80074c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074c6:	9a00      	ldr	r2, [sp, #0]
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	9b01      	ldr	r3, [sp, #4]
 80074cc:	2b0e      	cmp	r3, #14
 80074ce:	f200 80ad 	bhi.w	800762c <_dtoa_r+0x484>
 80074d2:	2d00      	cmp	r5, #0
 80074d4:	f000 80aa 	beq.w	800762c <_dtoa_r+0x484>
 80074d8:	f1ba 0f00 	cmp.w	sl, #0
 80074dc:	dd36      	ble.n	800754c <_dtoa_r+0x3a4>
 80074de:	4ac3      	ldr	r2, [pc, #780]	; (80077ec <_dtoa_r+0x644>)
 80074e0:	f00a 030f 	and.w	r3, sl, #15
 80074e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074e8:	ed93 7b00 	vldr	d7, [r3]
 80074ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80074f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80074f4:	eeb0 8a47 	vmov.f32	s16, s14
 80074f8:	eef0 8a67 	vmov.f32	s17, s15
 80074fc:	d016      	beq.n	800752c <_dtoa_r+0x384>
 80074fe:	4bbc      	ldr	r3, [pc, #752]	; (80077f0 <_dtoa_r+0x648>)
 8007500:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007504:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007508:	f7f9 f9a8 	bl	800085c <__aeabi_ddiv>
 800750c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007510:	f007 070f 	and.w	r7, r7, #15
 8007514:	2503      	movs	r5, #3
 8007516:	4eb6      	ldr	r6, [pc, #728]	; (80077f0 <_dtoa_r+0x648>)
 8007518:	b957      	cbnz	r7, 8007530 <_dtoa_r+0x388>
 800751a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800751e:	ec53 2b18 	vmov	r2, r3, d8
 8007522:	f7f9 f99b 	bl	800085c <__aeabi_ddiv>
 8007526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800752a:	e029      	b.n	8007580 <_dtoa_r+0x3d8>
 800752c:	2502      	movs	r5, #2
 800752e:	e7f2      	b.n	8007516 <_dtoa_r+0x36e>
 8007530:	07f9      	lsls	r1, r7, #31
 8007532:	d508      	bpl.n	8007546 <_dtoa_r+0x39e>
 8007534:	ec51 0b18 	vmov	r0, r1, d8
 8007538:	e9d6 2300 	ldrd	r2, r3, [r6]
 800753c:	f7f9 f864 	bl	8000608 <__aeabi_dmul>
 8007540:	ec41 0b18 	vmov	d8, r0, r1
 8007544:	3501      	adds	r5, #1
 8007546:	107f      	asrs	r7, r7, #1
 8007548:	3608      	adds	r6, #8
 800754a:	e7e5      	b.n	8007518 <_dtoa_r+0x370>
 800754c:	f000 80a6 	beq.w	800769c <_dtoa_r+0x4f4>
 8007550:	f1ca 0600 	rsb	r6, sl, #0
 8007554:	4ba5      	ldr	r3, [pc, #660]	; (80077ec <_dtoa_r+0x644>)
 8007556:	4fa6      	ldr	r7, [pc, #664]	; (80077f0 <_dtoa_r+0x648>)
 8007558:	f006 020f 	and.w	r2, r6, #15
 800755c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007568:	f7f9 f84e 	bl	8000608 <__aeabi_dmul>
 800756c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007570:	1136      	asrs	r6, r6, #4
 8007572:	2300      	movs	r3, #0
 8007574:	2502      	movs	r5, #2
 8007576:	2e00      	cmp	r6, #0
 8007578:	f040 8085 	bne.w	8007686 <_dtoa_r+0x4de>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1d2      	bne.n	8007526 <_dtoa_r+0x37e>
 8007580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 808c 	beq.w	80076a0 <_dtoa_r+0x4f8>
 8007588:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800758c:	4b99      	ldr	r3, [pc, #612]	; (80077f4 <_dtoa_r+0x64c>)
 800758e:	2200      	movs	r2, #0
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	f7f9 faaa 	bl	8000aec <__aeabi_dcmplt>
 8007598:	2800      	cmp	r0, #0
 800759a:	f000 8081 	beq.w	80076a0 <_dtoa_r+0x4f8>
 800759e:	9b01      	ldr	r3, [sp, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d07d      	beq.n	80076a0 <_dtoa_r+0x4f8>
 80075a4:	f1b9 0f00 	cmp.w	r9, #0
 80075a8:	dd3c      	ble.n	8007624 <_dtoa_r+0x47c>
 80075aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80075ae:	9307      	str	r3, [sp, #28]
 80075b0:	2200      	movs	r2, #0
 80075b2:	4b91      	ldr	r3, [pc, #580]	; (80077f8 <_dtoa_r+0x650>)
 80075b4:	4630      	mov	r0, r6
 80075b6:	4639      	mov	r1, r7
 80075b8:	f7f9 f826 	bl	8000608 <__aeabi_dmul>
 80075bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c0:	3501      	adds	r5, #1
 80075c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80075c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075ca:	4628      	mov	r0, r5
 80075cc:	f7f8 ffb2 	bl	8000534 <__aeabi_i2d>
 80075d0:	4632      	mov	r2, r6
 80075d2:	463b      	mov	r3, r7
 80075d4:	f7f9 f818 	bl	8000608 <__aeabi_dmul>
 80075d8:	4b88      	ldr	r3, [pc, #544]	; (80077fc <_dtoa_r+0x654>)
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f8 fe5e 	bl	800029c <__adddf3>
 80075e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80075e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075e8:	9303      	str	r3, [sp, #12]
 80075ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d15c      	bne.n	80076aa <_dtoa_r+0x502>
 80075f0:	4b83      	ldr	r3, [pc, #524]	; (8007800 <_dtoa_r+0x658>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	4630      	mov	r0, r6
 80075f6:	4639      	mov	r1, r7
 80075f8:	f7f8 fe4e 	bl	8000298 <__aeabi_dsub>
 80075fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007600:	4606      	mov	r6, r0
 8007602:	460f      	mov	r7, r1
 8007604:	f7f9 fa90 	bl	8000b28 <__aeabi_dcmpgt>
 8007608:	2800      	cmp	r0, #0
 800760a:	f040 8296 	bne.w	8007b3a <_dtoa_r+0x992>
 800760e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007612:	4630      	mov	r0, r6
 8007614:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007618:	4639      	mov	r1, r7
 800761a:	f7f9 fa67 	bl	8000aec <__aeabi_dcmplt>
 800761e:	2800      	cmp	r0, #0
 8007620:	f040 8288 	bne.w	8007b34 <_dtoa_r+0x98c>
 8007624:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007628:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800762c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800762e:	2b00      	cmp	r3, #0
 8007630:	f2c0 8158 	blt.w	80078e4 <_dtoa_r+0x73c>
 8007634:	f1ba 0f0e 	cmp.w	sl, #14
 8007638:	f300 8154 	bgt.w	80078e4 <_dtoa_r+0x73c>
 800763c:	4b6b      	ldr	r3, [pc, #428]	; (80077ec <_dtoa_r+0x644>)
 800763e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007642:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	f280 80e3 	bge.w	8007814 <_dtoa_r+0x66c>
 800764e:	9b01      	ldr	r3, [sp, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	f300 80df 	bgt.w	8007814 <_dtoa_r+0x66c>
 8007656:	f040 826d 	bne.w	8007b34 <_dtoa_r+0x98c>
 800765a:	4b69      	ldr	r3, [pc, #420]	; (8007800 <_dtoa_r+0x658>)
 800765c:	2200      	movs	r2, #0
 800765e:	4640      	mov	r0, r8
 8007660:	4649      	mov	r1, r9
 8007662:	f7f8 ffd1 	bl	8000608 <__aeabi_dmul>
 8007666:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800766a:	f7f9 fa53 	bl	8000b14 <__aeabi_dcmpge>
 800766e:	9e01      	ldr	r6, [sp, #4]
 8007670:	4637      	mov	r7, r6
 8007672:	2800      	cmp	r0, #0
 8007674:	f040 8243 	bne.w	8007afe <_dtoa_r+0x956>
 8007678:	9d00      	ldr	r5, [sp, #0]
 800767a:	2331      	movs	r3, #49	; 0x31
 800767c:	f805 3b01 	strb.w	r3, [r5], #1
 8007680:	f10a 0a01 	add.w	sl, sl, #1
 8007684:	e23f      	b.n	8007b06 <_dtoa_r+0x95e>
 8007686:	07f2      	lsls	r2, r6, #31
 8007688:	d505      	bpl.n	8007696 <_dtoa_r+0x4ee>
 800768a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800768e:	f7f8 ffbb 	bl	8000608 <__aeabi_dmul>
 8007692:	3501      	adds	r5, #1
 8007694:	2301      	movs	r3, #1
 8007696:	1076      	asrs	r6, r6, #1
 8007698:	3708      	adds	r7, #8
 800769a:	e76c      	b.n	8007576 <_dtoa_r+0x3ce>
 800769c:	2502      	movs	r5, #2
 800769e:	e76f      	b.n	8007580 <_dtoa_r+0x3d8>
 80076a0:	9b01      	ldr	r3, [sp, #4]
 80076a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80076a6:	930c      	str	r3, [sp, #48]	; 0x30
 80076a8:	e78d      	b.n	80075c6 <_dtoa_r+0x41e>
 80076aa:	9900      	ldr	r1, [sp, #0]
 80076ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80076ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076b0:	4b4e      	ldr	r3, [pc, #312]	; (80077ec <_dtoa_r+0x644>)
 80076b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076b6:	4401      	add	r1, r0
 80076b8:	9102      	str	r1, [sp, #8]
 80076ba:	9908      	ldr	r1, [sp, #32]
 80076bc:	eeb0 8a47 	vmov.f32	s16, s14
 80076c0:	eef0 8a67 	vmov.f32	s17, s15
 80076c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076cc:	2900      	cmp	r1, #0
 80076ce:	d045      	beq.n	800775c <_dtoa_r+0x5b4>
 80076d0:	494c      	ldr	r1, [pc, #304]	; (8007804 <_dtoa_r+0x65c>)
 80076d2:	2000      	movs	r0, #0
 80076d4:	f7f9 f8c2 	bl	800085c <__aeabi_ddiv>
 80076d8:	ec53 2b18 	vmov	r2, r3, d8
 80076dc:	f7f8 fddc 	bl	8000298 <__aeabi_dsub>
 80076e0:	9d00      	ldr	r5, [sp, #0]
 80076e2:	ec41 0b18 	vmov	d8, r0, r1
 80076e6:	4639      	mov	r1, r7
 80076e8:	4630      	mov	r0, r6
 80076ea:	f7f9 fa3d 	bl	8000b68 <__aeabi_d2iz>
 80076ee:	900c      	str	r0, [sp, #48]	; 0x30
 80076f0:	f7f8 ff20 	bl	8000534 <__aeabi_i2d>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4630      	mov	r0, r6
 80076fa:	4639      	mov	r1, r7
 80076fc:	f7f8 fdcc 	bl	8000298 <__aeabi_dsub>
 8007700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007702:	3330      	adds	r3, #48	; 0x30
 8007704:	f805 3b01 	strb.w	r3, [r5], #1
 8007708:	ec53 2b18 	vmov	r2, r3, d8
 800770c:	4606      	mov	r6, r0
 800770e:	460f      	mov	r7, r1
 8007710:	f7f9 f9ec 	bl	8000aec <__aeabi_dcmplt>
 8007714:	2800      	cmp	r0, #0
 8007716:	d165      	bne.n	80077e4 <_dtoa_r+0x63c>
 8007718:	4632      	mov	r2, r6
 800771a:	463b      	mov	r3, r7
 800771c:	4935      	ldr	r1, [pc, #212]	; (80077f4 <_dtoa_r+0x64c>)
 800771e:	2000      	movs	r0, #0
 8007720:	f7f8 fdba 	bl	8000298 <__aeabi_dsub>
 8007724:	ec53 2b18 	vmov	r2, r3, d8
 8007728:	f7f9 f9e0 	bl	8000aec <__aeabi_dcmplt>
 800772c:	2800      	cmp	r0, #0
 800772e:	f040 80b9 	bne.w	80078a4 <_dtoa_r+0x6fc>
 8007732:	9b02      	ldr	r3, [sp, #8]
 8007734:	429d      	cmp	r5, r3
 8007736:	f43f af75 	beq.w	8007624 <_dtoa_r+0x47c>
 800773a:	4b2f      	ldr	r3, [pc, #188]	; (80077f8 <_dtoa_r+0x650>)
 800773c:	ec51 0b18 	vmov	r0, r1, d8
 8007740:	2200      	movs	r2, #0
 8007742:	f7f8 ff61 	bl	8000608 <__aeabi_dmul>
 8007746:	4b2c      	ldr	r3, [pc, #176]	; (80077f8 <_dtoa_r+0x650>)
 8007748:	ec41 0b18 	vmov	d8, r0, r1
 800774c:	2200      	movs	r2, #0
 800774e:	4630      	mov	r0, r6
 8007750:	4639      	mov	r1, r7
 8007752:	f7f8 ff59 	bl	8000608 <__aeabi_dmul>
 8007756:	4606      	mov	r6, r0
 8007758:	460f      	mov	r7, r1
 800775a:	e7c4      	b.n	80076e6 <_dtoa_r+0x53e>
 800775c:	ec51 0b17 	vmov	r0, r1, d7
 8007760:	f7f8 ff52 	bl	8000608 <__aeabi_dmul>
 8007764:	9b02      	ldr	r3, [sp, #8]
 8007766:	9d00      	ldr	r5, [sp, #0]
 8007768:	930c      	str	r3, [sp, #48]	; 0x30
 800776a:	ec41 0b18 	vmov	d8, r0, r1
 800776e:	4639      	mov	r1, r7
 8007770:	4630      	mov	r0, r6
 8007772:	f7f9 f9f9 	bl	8000b68 <__aeabi_d2iz>
 8007776:	9011      	str	r0, [sp, #68]	; 0x44
 8007778:	f7f8 fedc 	bl	8000534 <__aeabi_i2d>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4630      	mov	r0, r6
 8007782:	4639      	mov	r1, r7
 8007784:	f7f8 fd88 	bl	8000298 <__aeabi_dsub>
 8007788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800778a:	3330      	adds	r3, #48	; 0x30
 800778c:	f805 3b01 	strb.w	r3, [r5], #1
 8007790:	9b02      	ldr	r3, [sp, #8]
 8007792:	429d      	cmp	r5, r3
 8007794:	4606      	mov	r6, r0
 8007796:	460f      	mov	r7, r1
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	d134      	bne.n	8007808 <_dtoa_r+0x660>
 800779e:	4b19      	ldr	r3, [pc, #100]	; (8007804 <_dtoa_r+0x65c>)
 80077a0:	ec51 0b18 	vmov	r0, r1, d8
 80077a4:	f7f8 fd7a 	bl	800029c <__adddf3>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4630      	mov	r0, r6
 80077ae:	4639      	mov	r1, r7
 80077b0:	f7f9 f9ba 	bl	8000b28 <__aeabi_dcmpgt>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d175      	bne.n	80078a4 <_dtoa_r+0x6fc>
 80077b8:	ec53 2b18 	vmov	r2, r3, d8
 80077bc:	4911      	ldr	r1, [pc, #68]	; (8007804 <_dtoa_r+0x65c>)
 80077be:	2000      	movs	r0, #0
 80077c0:	f7f8 fd6a 	bl	8000298 <__aeabi_dsub>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4630      	mov	r0, r6
 80077ca:	4639      	mov	r1, r7
 80077cc:	f7f9 f98e 	bl	8000aec <__aeabi_dcmplt>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	f43f af27 	beq.w	8007624 <_dtoa_r+0x47c>
 80077d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077d8:	1e6b      	subs	r3, r5, #1
 80077da:	930c      	str	r3, [sp, #48]	; 0x30
 80077dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077e0:	2b30      	cmp	r3, #48	; 0x30
 80077e2:	d0f8      	beq.n	80077d6 <_dtoa_r+0x62e>
 80077e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80077e8:	e04a      	b.n	8007880 <_dtoa_r+0x6d8>
 80077ea:	bf00      	nop
 80077ec:	0800b050 	.word	0x0800b050
 80077f0:	0800b028 	.word	0x0800b028
 80077f4:	3ff00000 	.word	0x3ff00000
 80077f8:	40240000 	.word	0x40240000
 80077fc:	401c0000 	.word	0x401c0000
 8007800:	40140000 	.word	0x40140000
 8007804:	3fe00000 	.word	0x3fe00000
 8007808:	4baf      	ldr	r3, [pc, #700]	; (8007ac8 <_dtoa_r+0x920>)
 800780a:	f7f8 fefd 	bl	8000608 <__aeabi_dmul>
 800780e:	4606      	mov	r6, r0
 8007810:	460f      	mov	r7, r1
 8007812:	e7ac      	b.n	800776e <_dtoa_r+0x5c6>
 8007814:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007818:	9d00      	ldr	r5, [sp, #0]
 800781a:	4642      	mov	r2, r8
 800781c:	464b      	mov	r3, r9
 800781e:	4630      	mov	r0, r6
 8007820:	4639      	mov	r1, r7
 8007822:	f7f9 f81b 	bl	800085c <__aeabi_ddiv>
 8007826:	f7f9 f99f 	bl	8000b68 <__aeabi_d2iz>
 800782a:	9002      	str	r0, [sp, #8]
 800782c:	f7f8 fe82 	bl	8000534 <__aeabi_i2d>
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	f7f8 fee8 	bl	8000608 <__aeabi_dmul>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4630      	mov	r0, r6
 800783e:	4639      	mov	r1, r7
 8007840:	f7f8 fd2a 	bl	8000298 <__aeabi_dsub>
 8007844:	9e02      	ldr	r6, [sp, #8]
 8007846:	9f01      	ldr	r7, [sp, #4]
 8007848:	3630      	adds	r6, #48	; 0x30
 800784a:	f805 6b01 	strb.w	r6, [r5], #1
 800784e:	9e00      	ldr	r6, [sp, #0]
 8007850:	1bae      	subs	r6, r5, r6
 8007852:	42b7      	cmp	r7, r6
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	d137      	bne.n	80078ca <_dtoa_r+0x722>
 800785a:	f7f8 fd1f 	bl	800029c <__adddf3>
 800785e:	4642      	mov	r2, r8
 8007860:	464b      	mov	r3, r9
 8007862:	4606      	mov	r6, r0
 8007864:	460f      	mov	r7, r1
 8007866:	f7f9 f95f 	bl	8000b28 <__aeabi_dcmpgt>
 800786a:	b9c8      	cbnz	r0, 80078a0 <_dtoa_r+0x6f8>
 800786c:	4642      	mov	r2, r8
 800786e:	464b      	mov	r3, r9
 8007870:	4630      	mov	r0, r6
 8007872:	4639      	mov	r1, r7
 8007874:	f7f9 f930 	bl	8000ad8 <__aeabi_dcmpeq>
 8007878:	b110      	cbz	r0, 8007880 <_dtoa_r+0x6d8>
 800787a:	9b02      	ldr	r3, [sp, #8]
 800787c:	07d9      	lsls	r1, r3, #31
 800787e:	d40f      	bmi.n	80078a0 <_dtoa_r+0x6f8>
 8007880:	4620      	mov	r0, r4
 8007882:	4659      	mov	r1, fp
 8007884:	f000 fe4a 	bl	800851c <_Bfree>
 8007888:	2300      	movs	r3, #0
 800788a:	702b      	strb	r3, [r5, #0]
 800788c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800788e:	f10a 0001 	add.w	r0, sl, #1
 8007892:	6018      	str	r0, [r3, #0]
 8007894:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007896:	2b00      	cmp	r3, #0
 8007898:	f43f acd8 	beq.w	800724c <_dtoa_r+0xa4>
 800789c:	601d      	str	r5, [r3, #0]
 800789e:	e4d5      	b.n	800724c <_dtoa_r+0xa4>
 80078a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80078a4:	462b      	mov	r3, r5
 80078a6:	461d      	mov	r5, r3
 80078a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ac:	2a39      	cmp	r2, #57	; 0x39
 80078ae:	d108      	bne.n	80078c2 <_dtoa_r+0x71a>
 80078b0:	9a00      	ldr	r2, [sp, #0]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d1f7      	bne.n	80078a6 <_dtoa_r+0x6fe>
 80078b6:	9a07      	ldr	r2, [sp, #28]
 80078b8:	9900      	ldr	r1, [sp, #0]
 80078ba:	3201      	adds	r2, #1
 80078bc:	9207      	str	r2, [sp, #28]
 80078be:	2230      	movs	r2, #48	; 0x30
 80078c0:	700a      	strb	r2, [r1, #0]
 80078c2:	781a      	ldrb	r2, [r3, #0]
 80078c4:	3201      	adds	r2, #1
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	e78c      	b.n	80077e4 <_dtoa_r+0x63c>
 80078ca:	4b7f      	ldr	r3, [pc, #508]	; (8007ac8 <_dtoa_r+0x920>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	f7f8 fe9b 	bl	8000608 <__aeabi_dmul>
 80078d2:	2200      	movs	r2, #0
 80078d4:	2300      	movs	r3, #0
 80078d6:	4606      	mov	r6, r0
 80078d8:	460f      	mov	r7, r1
 80078da:	f7f9 f8fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80078de:	2800      	cmp	r0, #0
 80078e0:	d09b      	beq.n	800781a <_dtoa_r+0x672>
 80078e2:	e7cd      	b.n	8007880 <_dtoa_r+0x6d8>
 80078e4:	9a08      	ldr	r2, [sp, #32]
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	f000 80c4 	beq.w	8007a74 <_dtoa_r+0x8cc>
 80078ec:	9a05      	ldr	r2, [sp, #20]
 80078ee:	2a01      	cmp	r2, #1
 80078f0:	f300 80a8 	bgt.w	8007a44 <_dtoa_r+0x89c>
 80078f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	f000 80a0 	beq.w	8007a3c <_dtoa_r+0x894>
 80078fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007900:	9e06      	ldr	r6, [sp, #24]
 8007902:	4645      	mov	r5, r8
 8007904:	9a04      	ldr	r2, [sp, #16]
 8007906:	2101      	movs	r1, #1
 8007908:	441a      	add	r2, r3
 800790a:	4620      	mov	r0, r4
 800790c:	4498      	add	r8, r3
 800790e:	9204      	str	r2, [sp, #16]
 8007910:	f000 ff0a 	bl	8008728 <__i2b>
 8007914:	4607      	mov	r7, r0
 8007916:	2d00      	cmp	r5, #0
 8007918:	dd0b      	ble.n	8007932 <_dtoa_r+0x78a>
 800791a:	9b04      	ldr	r3, [sp, #16]
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd08      	ble.n	8007932 <_dtoa_r+0x78a>
 8007920:	42ab      	cmp	r3, r5
 8007922:	9a04      	ldr	r2, [sp, #16]
 8007924:	bfa8      	it	ge
 8007926:	462b      	movge	r3, r5
 8007928:	eba8 0803 	sub.w	r8, r8, r3
 800792c:	1aed      	subs	r5, r5, r3
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	9b06      	ldr	r3, [sp, #24]
 8007934:	b1fb      	cbz	r3, 8007976 <_dtoa_r+0x7ce>
 8007936:	9b08      	ldr	r3, [sp, #32]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 809f 	beq.w	8007a7c <_dtoa_r+0x8d4>
 800793e:	2e00      	cmp	r6, #0
 8007940:	dd11      	ble.n	8007966 <_dtoa_r+0x7be>
 8007942:	4639      	mov	r1, r7
 8007944:	4632      	mov	r2, r6
 8007946:	4620      	mov	r0, r4
 8007948:	f000 ffaa 	bl	80088a0 <__pow5mult>
 800794c:	465a      	mov	r2, fp
 800794e:	4601      	mov	r1, r0
 8007950:	4607      	mov	r7, r0
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fefe 	bl	8008754 <__multiply>
 8007958:	4659      	mov	r1, fp
 800795a:	9007      	str	r0, [sp, #28]
 800795c:	4620      	mov	r0, r4
 800795e:	f000 fddd 	bl	800851c <_Bfree>
 8007962:	9b07      	ldr	r3, [sp, #28]
 8007964:	469b      	mov	fp, r3
 8007966:	9b06      	ldr	r3, [sp, #24]
 8007968:	1b9a      	subs	r2, r3, r6
 800796a:	d004      	beq.n	8007976 <_dtoa_r+0x7ce>
 800796c:	4659      	mov	r1, fp
 800796e:	4620      	mov	r0, r4
 8007970:	f000 ff96 	bl	80088a0 <__pow5mult>
 8007974:	4683      	mov	fp, r0
 8007976:	2101      	movs	r1, #1
 8007978:	4620      	mov	r0, r4
 800797a:	f000 fed5 	bl	8008728 <__i2b>
 800797e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007980:	2b00      	cmp	r3, #0
 8007982:	4606      	mov	r6, r0
 8007984:	dd7c      	ble.n	8007a80 <_dtoa_r+0x8d8>
 8007986:	461a      	mov	r2, r3
 8007988:	4601      	mov	r1, r0
 800798a:	4620      	mov	r0, r4
 800798c:	f000 ff88 	bl	80088a0 <__pow5mult>
 8007990:	9b05      	ldr	r3, [sp, #20]
 8007992:	2b01      	cmp	r3, #1
 8007994:	4606      	mov	r6, r0
 8007996:	dd76      	ble.n	8007a86 <_dtoa_r+0x8de>
 8007998:	2300      	movs	r3, #0
 800799a:	9306      	str	r3, [sp, #24]
 800799c:	6933      	ldr	r3, [r6, #16]
 800799e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079a2:	6918      	ldr	r0, [r3, #16]
 80079a4:	f000 fe70 	bl	8008688 <__hi0bits>
 80079a8:	f1c0 0020 	rsb	r0, r0, #32
 80079ac:	9b04      	ldr	r3, [sp, #16]
 80079ae:	4418      	add	r0, r3
 80079b0:	f010 001f 	ands.w	r0, r0, #31
 80079b4:	f000 8086 	beq.w	8007ac4 <_dtoa_r+0x91c>
 80079b8:	f1c0 0320 	rsb	r3, r0, #32
 80079bc:	2b04      	cmp	r3, #4
 80079be:	dd7f      	ble.n	8007ac0 <_dtoa_r+0x918>
 80079c0:	f1c0 001c 	rsb	r0, r0, #28
 80079c4:	9b04      	ldr	r3, [sp, #16]
 80079c6:	4403      	add	r3, r0
 80079c8:	4480      	add	r8, r0
 80079ca:	4405      	add	r5, r0
 80079cc:	9304      	str	r3, [sp, #16]
 80079ce:	f1b8 0f00 	cmp.w	r8, #0
 80079d2:	dd05      	ble.n	80079e0 <_dtoa_r+0x838>
 80079d4:	4659      	mov	r1, fp
 80079d6:	4642      	mov	r2, r8
 80079d8:	4620      	mov	r0, r4
 80079da:	f000 ffbb 	bl	8008954 <__lshift>
 80079de:	4683      	mov	fp, r0
 80079e0:	9b04      	ldr	r3, [sp, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	dd05      	ble.n	80079f2 <_dtoa_r+0x84a>
 80079e6:	4631      	mov	r1, r6
 80079e8:	461a      	mov	r2, r3
 80079ea:	4620      	mov	r0, r4
 80079ec:	f000 ffb2 	bl	8008954 <__lshift>
 80079f0:	4606      	mov	r6, r0
 80079f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d069      	beq.n	8007acc <_dtoa_r+0x924>
 80079f8:	4631      	mov	r1, r6
 80079fa:	4658      	mov	r0, fp
 80079fc:	f001 f816 	bl	8008a2c <__mcmp>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	da63      	bge.n	8007acc <_dtoa_r+0x924>
 8007a04:	2300      	movs	r3, #0
 8007a06:	4659      	mov	r1, fp
 8007a08:	220a      	movs	r2, #10
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 fda8 	bl	8008560 <__multadd>
 8007a10:	9b08      	ldr	r3, [sp, #32]
 8007a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a16:	4683      	mov	fp, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f000 818f 	beq.w	8007d3c <_dtoa_r+0xb94>
 8007a1e:	4639      	mov	r1, r7
 8007a20:	2300      	movs	r3, #0
 8007a22:	220a      	movs	r2, #10
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fd9b 	bl	8008560 <__multadd>
 8007a2a:	f1b9 0f00 	cmp.w	r9, #0
 8007a2e:	4607      	mov	r7, r0
 8007a30:	f300 808e 	bgt.w	8007b50 <_dtoa_r+0x9a8>
 8007a34:	9b05      	ldr	r3, [sp, #20]
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	dc50      	bgt.n	8007adc <_dtoa_r+0x934>
 8007a3a:	e089      	b.n	8007b50 <_dtoa_r+0x9a8>
 8007a3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a42:	e75d      	b.n	8007900 <_dtoa_r+0x758>
 8007a44:	9b01      	ldr	r3, [sp, #4]
 8007a46:	1e5e      	subs	r6, r3, #1
 8007a48:	9b06      	ldr	r3, [sp, #24]
 8007a4a:	42b3      	cmp	r3, r6
 8007a4c:	bfbf      	itttt	lt
 8007a4e:	9b06      	ldrlt	r3, [sp, #24]
 8007a50:	9606      	strlt	r6, [sp, #24]
 8007a52:	1af2      	sublt	r2, r6, r3
 8007a54:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007a56:	bfb6      	itet	lt
 8007a58:	189b      	addlt	r3, r3, r2
 8007a5a:	1b9e      	subge	r6, r3, r6
 8007a5c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007a5e:	9b01      	ldr	r3, [sp, #4]
 8007a60:	bfb8      	it	lt
 8007a62:	2600      	movlt	r6, #0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bfb5      	itete	lt
 8007a68:	eba8 0503 	sublt.w	r5, r8, r3
 8007a6c:	9b01      	ldrge	r3, [sp, #4]
 8007a6e:	2300      	movlt	r3, #0
 8007a70:	4645      	movge	r5, r8
 8007a72:	e747      	b.n	8007904 <_dtoa_r+0x75c>
 8007a74:	9e06      	ldr	r6, [sp, #24]
 8007a76:	9f08      	ldr	r7, [sp, #32]
 8007a78:	4645      	mov	r5, r8
 8007a7a:	e74c      	b.n	8007916 <_dtoa_r+0x76e>
 8007a7c:	9a06      	ldr	r2, [sp, #24]
 8007a7e:	e775      	b.n	800796c <_dtoa_r+0x7c4>
 8007a80:	9b05      	ldr	r3, [sp, #20]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	dc18      	bgt.n	8007ab8 <_dtoa_r+0x910>
 8007a86:	9b02      	ldr	r3, [sp, #8]
 8007a88:	b9b3      	cbnz	r3, 8007ab8 <_dtoa_r+0x910>
 8007a8a:	9b03      	ldr	r3, [sp, #12]
 8007a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a90:	b9a3      	cbnz	r3, 8007abc <_dtoa_r+0x914>
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a98:	0d1b      	lsrs	r3, r3, #20
 8007a9a:	051b      	lsls	r3, r3, #20
 8007a9c:	b12b      	cbz	r3, 8007aaa <_dtoa_r+0x902>
 8007a9e:	9b04      	ldr	r3, [sp, #16]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	f108 0801 	add.w	r8, r8, #1
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	9306      	str	r3, [sp, #24]
 8007aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f47f af74 	bne.w	800799c <_dtoa_r+0x7f4>
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	e779      	b.n	80079ac <_dtoa_r+0x804>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e7f6      	b.n	8007aaa <_dtoa_r+0x902>
 8007abc:	9b02      	ldr	r3, [sp, #8]
 8007abe:	e7f4      	b.n	8007aaa <_dtoa_r+0x902>
 8007ac0:	d085      	beq.n	80079ce <_dtoa_r+0x826>
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	301c      	adds	r0, #28
 8007ac6:	e77d      	b.n	80079c4 <_dtoa_r+0x81c>
 8007ac8:	40240000 	.word	0x40240000
 8007acc:	9b01      	ldr	r3, [sp, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dc38      	bgt.n	8007b44 <_dtoa_r+0x99c>
 8007ad2:	9b05      	ldr	r3, [sp, #20]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	dd35      	ble.n	8007b44 <_dtoa_r+0x99c>
 8007ad8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007adc:	f1b9 0f00 	cmp.w	r9, #0
 8007ae0:	d10d      	bne.n	8007afe <_dtoa_r+0x956>
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	2205      	movs	r2, #5
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 fd39 	bl	8008560 <__multadd>
 8007aee:	4601      	mov	r1, r0
 8007af0:	4606      	mov	r6, r0
 8007af2:	4658      	mov	r0, fp
 8007af4:	f000 ff9a 	bl	8008a2c <__mcmp>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	f73f adbd 	bgt.w	8007678 <_dtoa_r+0x4d0>
 8007afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b00:	9d00      	ldr	r5, [sp, #0]
 8007b02:	ea6f 0a03 	mvn.w	sl, r3
 8007b06:	f04f 0800 	mov.w	r8, #0
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 fd05 	bl	800851c <_Bfree>
 8007b12:	2f00      	cmp	r7, #0
 8007b14:	f43f aeb4 	beq.w	8007880 <_dtoa_r+0x6d8>
 8007b18:	f1b8 0f00 	cmp.w	r8, #0
 8007b1c:	d005      	beq.n	8007b2a <_dtoa_r+0x982>
 8007b1e:	45b8      	cmp	r8, r7
 8007b20:	d003      	beq.n	8007b2a <_dtoa_r+0x982>
 8007b22:	4641      	mov	r1, r8
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 fcf9 	bl	800851c <_Bfree>
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 fcf5 	bl	800851c <_Bfree>
 8007b32:	e6a5      	b.n	8007880 <_dtoa_r+0x6d8>
 8007b34:	2600      	movs	r6, #0
 8007b36:	4637      	mov	r7, r6
 8007b38:	e7e1      	b.n	8007afe <_dtoa_r+0x956>
 8007b3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b40:	4637      	mov	r7, r6
 8007b42:	e599      	b.n	8007678 <_dtoa_r+0x4d0>
 8007b44:	9b08      	ldr	r3, [sp, #32]
 8007b46:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 80fd 	beq.w	8007d4a <_dtoa_r+0xba2>
 8007b50:	2d00      	cmp	r5, #0
 8007b52:	dd05      	ble.n	8007b60 <_dtoa_r+0x9b8>
 8007b54:	4639      	mov	r1, r7
 8007b56:	462a      	mov	r2, r5
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 fefb 	bl	8008954 <__lshift>
 8007b5e:	4607      	mov	r7, r0
 8007b60:	9b06      	ldr	r3, [sp, #24]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d05c      	beq.n	8007c20 <_dtoa_r+0xa78>
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fc97 	bl	800849c <_Balloc>
 8007b6e:	4605      	mov	r5, r0
 8007b70:	b928      	cbnz	r0, 8007b7e <_dtoa_r+0x9d6>
 8007b72:	4b80      	ldr	r3, [pc, #512]	; (8007d74 <_dtoa_r+0xbcc>)
 8007b74:	4602      	mov	r2, r0
 8007b76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b7a:	f7ff bb2e 	b.w	80071da <_dtoa_r+0x32>
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	3202      	adds	r2, #2
 8007b82:	0092      	lsls	r2, r2, #2
 8007b84:	f107 010c 	add.w	r1, r7, #12
 8007b88:	300c      	adds	r0, #12
 8007b8a:	f7fd ffad 	bl	8005ae8 <memcpy>
 8007b8e:	2201      	movs	r2, #1
 8007b90:	4629      	mov	r1, r5
 8007b92:	4620      	mov	r0, r4
 8007b94:	f000 fede 	bl	8008954 <__lshift>
 8007b98:	9b00      	ldr	r3, [sp, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	9b00      	ldr	r3, [sp, #0]
 8007ba0:	444b      	add	r3, r9
 8007ba2:	9307      	str	r3, [sp, #28]
 8007ba4:	9b02      	ldr	r3, [sp, #8]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	46b8      	mov	r8, r7
 8007bac:	9306      	str	r3, [sp, #24]
 8007bae:	4607      	mov	r7, r0
 8007bb0:	9b01      	ldr	r3, [sp, #4]
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	4658      	mov	r0, fp
 8007bb8:	9302      	str	r3, [sp, #8]
 8007bba:	f7ff fa67 	bl	800708c <quorem>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	3330      	adds	r3, #48	; 0x30
 8007bc2:	9004      	str	r0, [sp, #16]
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	4658      	mov	r0, fp
 8007bc8:	9308      	str	r3, [sp, #32]
 8007bca:	f000 ff2f 	bl	8008a2c <__mcmp>
 8007bce:	463a      	mov	r2, r7
 8007bd0:	4681      	mov	r9, r0
 8007bd2:	4631      	mov	r1, r6
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 ff45 	bl	8008a64 <__mdiff>
 8007bda:	68c2      	ldr	r2, [r0, #12]
 8007bdc:	9b08      	ldr	r3, [sp, #32]
 8007bde:	4605      	mov	r5, r0
 8007be0:	bb02      	cbnz	r2, 8007c24 <_dtoa_r+0xa7c>
 8007be2:	4601      	mov	r1, r0
 8007be4:	4658      	mov	r0, fp
 8007be6:	f000 ff21 	bl	8008a2c <__mcmp>
 8007bea:	9b08      	ldr	r3, [sp, #32]
 8007bec:	4602      	mov	r2, r0
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007bf6:	f000 fc91 	bl	800851c <_Bfree>
 8007bfa:	9b05      	ldr	r3, [sp, #20]
 8007bfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bfe:	9d01      	ldr	r5, [sp, #4]
 8007c00:	ea43 0102 	orr.w	r1, r3, r2
 8007c04:	9b06      	ldr	r3, [sp, #24]
 8007c06:	430b      	orrs	r3, r1
 8007c08:	9b08      	ldr	r3, [sp, #32]
 8007c0a:	d10d      	bne.n	8007c28 <_dtoa_r+0xa80>
 8007c0c:	2b39      	cmp	r3, #57	; 0x39
 8007c0e:	d029      	beq.n	8007c64 <_dtoa_r+0xabc>
 8007c10:	f1b9 0f00 	cmp.w	r9, #0
 8007c14:	dd01      	ble.n	8007c1a <_dtoa_r+0xa72>
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	3331      	adds	r3, #49	; 0x31
 8007c1a:	9a02      	ldr	r2, [sp, #8]
 8007c1c:	7013      	strb	r3, [r2, #0]
 8007c1e:	e774      	b.n	8007b0a <_dtoa_r+0x962>
 8007c20:	4638      	mov	r0, r7
 8007c22:	e7b9      	b.n	8007b98 <_dtoa_r+0x9f0>
 8007c24:	2201      	movs	r2, #1
 8007c26:	e7e2      	b.n	8007bee <_dtoa_r+0xa46>
 8007c28:	f1b9 0f00 	cmp.w	r9, #0
 8007c2c:	db06      	blt.n	8007c3c <_dtoa_r+0xa94>
 8007c2e:	9905      	ldr	r1, [sp, #20]
 8007c30:	ea41 0909 	orr.w	r9, r1, r9
 8007c34:	9906      	ldr	r1, [sp, #24]
 8007c36:	ea59 0101 	orrs.w	r1, r9, r1
 8007c3a:	d120      	bne.n	8007c7e <_dtoa_r+0xad6>
 8007c3c:	2a00      	cmp	r2, #0
 8007c3e:	ddec      	ble.n	8007c1a <_dtoa_r+0xa72>
 8007c40:	4659      	mov	r1, fp
 8007c42:	2201      	movs	r2, #1
 8007c44:	4620      	mov	r0, r4
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	f000 fe84 	bl	8008954 <__lshift>
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4683      	mov	fp, r0
 8007c50:	f000 feec 	bl	8008a2c <__mcmp>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	9b01      	ldr	r3, [sp, #4]
 8007c58:	dc02      	bgt.n	8007c60 <_dtoa_r+0xab8>
 8007c5a:	d1de      	bne.n	8007c1a <_dtoa_r+0xa72>
 8007c5c:	07da      	lsls	r2, r3, #31
 8007c5e:	d5dc      	bpl.n	8007c1a <_dtoa_r+0xa72>
 8007c60:	2b39      	cmp	r3, #57	; 0x39
 8007c62:	d1d8      	bne.n	8007c16 <_dtoa_r+0xa6e>
 8007c64:	9a02      	ldr	r2, [sp, #8]
 8007c66:	2339      	movs	r3, #57	; 0x39
 8007c68:	7013      	strb	r3, [r2, #0]
 8007c6a:	462b      	mov	r3, r5
 8007c6c:	461d      	mov	r5, r3
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c74:	2a39      	cmp	r2, #57	; 0x39
 8007c76:	d050      	beq.n	8007d1a <_dtoa_r+0xb72>
 8007c78:	3201      	adds	r2, #1
 8007c7a:	701a      	strb	r2, [r3, #0]
 8007c7c:	e745      	b.n	8007b0a <_dtoa_r+0x962>
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	dd03      	ble.n	8007c8a <_dtoa_r+0xae2>
 8007c82:	2b39      	cmp	r3, #57	; 0x39
 8007c84:	d0ee      	beq.n	8007c64 <_dtoa_r+0xabc>
 8007c86:	3301      	adds	r3, #1
 8007c88:	e7c7      	b.n	8007c1a <_dtoa_r+0xa72>
 8007c8a:	9a01      	ldr	r2, [sp, #4]
 8007c8c:	9907      	ldr	r1, [sp, #28]
 8007c8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c92:	428a      	cmp	r2, r1
 8007c94:	d02a      	beq.n	8007cec <_dtoa_r+0xb44>
 8007c96:	4659      	mov	r1, fp
 8007c98:	2300      	movs	r3, #0
 8007c9a:	220a      	movs	r2, #10
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 fc5f 	bl	8008560 <__multadd>
 8007ca2:	45b8      	cmp	r8, r7
 8007ca4:	4683      	mov	fp, r0
 8007ca6:	f04f 0300 	mov.w	r3, #0
 8007caa:	f04f 020a 	mov.w	r2, #10
 8007cae:	4641      	mov	r1, r8
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	d107      	bne.n	8007cc4 <_dtoa_r+0xb1c>
 8007cb4:	f000 fc54 	bl	8008560 <__multadd>
 8007cb8:	4680      	mov	r8, r0
 8007cba:	4607      	mov	r7, r0
 8007cbc:	9b01      	ldr	r3, [sp, #4]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	e775      	b.n	8007bb0 <_dtoa_r+0xa08>
 8007cc4:	f000 fc4c 	bl	8008560 <__multadd>
 8007cc8:	4639      	mov	r1, r7
 8007cca:	4680      	mov	r8, r0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	220a      	movs	r2, #10
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 fc45 	bl	8008560 <__multadd>
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	e7f0      	b.n	8007cbc <_dtoa_r+0xb14>
 8007cda:	f1b9 0f00 	cmp.w	r9, #0
 8007cde:	9a00      	ldr	r2, [sp, #0]
 8007ce0:	bfcc      	ite	gt
 8007ce2:	464d      	movgt	r5, r9
 8007ce4:	2501      	movle	r5, #1
 8007ce6:	4415      	add	r5, r2
 8007ce8:	f04f 0800 	mov.w	r8, #0
 8007cec:	4659      	mov	r1, fp
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	f000 fe2e 	bl	8008954 <__lshift>
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4683      	mov	fp, r0
 8007cfc:	f000 fe96 	bl	8008a2c <__mcmp>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	dcb2      	bgt.n	8007c6a <_dtoa_r+0xac2>
 8007d04:	d102      	bne.n	8007d0c <_dtoa_r+0xb64>
 8007d06:	9b01      	ldr	r3, [sp, #4]
 8007d08:	07db      	lsls	r3, r3, #31
 8007d0a:	d4ae      	bmi.n	8007c6a <_dtoa_r+0xac2>
 8007d0c:	462b      	mov	r3, r5
 8007d0e:	461d      	mov	r5, r3
 8007d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d14:	2a30      	cmp	r2, #48	; 0x30
 8007d16:	d0fa      	beq.n	8007d0e <_dtoa_r+0xb66>
 8007d18:	e6f7      	b.n	8007b0a <_dtoa_r+0x962>
 8007d1a:	9a00      	ldr	r2, [sp, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d1a5      	bne.n	8007c6c <_dtoa_r+0xac4>
 8007d20:	f10a 0a01 	add.w	sl, sl, #1
 8007d24:	2331      	movs	r3, #49	; 0x31
 8007d26:	e779      	b.n	8007c1c <_dtoa_r+0xa74>
 8007d28:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <_dtoa_r+0xbd0>)
 8007d2a:	f7ff baaf 	b.w	800728c <_dtoa_r+0xe4>
 8007d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f47f aa86 	bne.w	8007242 <_dtoa_r+0x9a>
 8007d36:	4b11      	ldr	r3, [pc, #68]	; (8007d7c <_dtoa_r+0xbd4>)
 8007d38:	f7ff baa8 	b.w	800728c <_dtoa_r+0xe4>
 8007d3c:	f1b9 0f00 	cmp.w	r9, #0
 8007d40:	dc03      	bgt.n	8007d4a <_dtoa_r+0xba2>
 8007d42:	9b05      	ldr	r3, [sp, #20]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	f73f aec9 	bgt.w	8007adc <_dtoa_r+0x934>
 8007d4a:	9d00      	ldr	r5, [sp, #0]
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4658      	mov	r0, fp
 8007d50:	f7ff f99c 	bl	800708c <quorem>
 8007d54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007d58:	f805 3b01 	strb.w	r3, [r5], #1
 8007d5c:	9a00      	ldr	r2, [sp, #0]
 8007d5e:	1aaa      	subs	r2, r5, r2
 8007d60:	4591      	cmp	r9, r2
 8007d62:	ddba      	ble.n	8007cda <_dtoa_r+0xb32>
 8007d64:	4659      	mov	r1, fp
 8007d66:	2300      	movs	r3, #0
 8007d68:	220a      	movs	r2, #10
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 fbf8 	bl	8008560 <__multadd>
 8007d70:	4683      	mov	fp, r0
 8007d72:	e7eb      	b.n	8007d4c <_dtoa_r+0xba4>
 8007d74:	0800af33 	.word	0x0800af33
 8007d78:	0800ae3c 	.word	0x0800ae3c
 8007d7c:	0800aeb0 	.word	0x0800aeb0

08007d80 <rshift>:
 8007d80:	6903      	ldr	r3, [r0, #16]
 8007d82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d8e:	f100 0414 	add.w	r4, r0, #20
 8007d92:	dd45      	ble.n	8007e20 <rshift+0xa0>
 8007d94:	f011 011f 	ands.w	r1, r1, #31
 8007d98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007da0:	d10c      	bne.n	8007dbc <rshift+0x3c>
 8007da2:	f100 0710 	add.w	r7, r0, #16
 8007da6:	4629      	mov	r1, r5
 8007da8:	42b1      	cmp	r1, r6
 8007daa:	d334      	bcc.n	8007e16 <rshift+0x96>
 8007dac:	1a9b      	subs	r3, r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	1eea      	subs	r2, r5, #3
 8007db2:	4296      	cmp	r6, r2
 8007db4:	bf38      	it	cc
 8007db6:	2300      	movcc	r3, #0
 8007db8:	4423      	add	r3, r4
 8007dba:	e015      	b.n	8007de8 <rshift+0x68>
 8007dbc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007dc0:	f1c1 0820 	rsb	r8, r1, #32
 8007dc4:	40cf      	lsrs	r7, r1
 8007dc6:	f105 0e04 	add.w	lr, r5, #4
 8007dca:	46a1      	mov	r9, r4
 8007dcc:	4576      	cmp	r6, lr
 8007dce:	46f4      	mov	ip, lr
 8007dd0:	d815      	bhi.n	8007dfe <rshift+0x7e>
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	009a      	lsls	r2, r3, #2
 8007dd6:	3a04      	subs	r2, #4
 8007dd8:	3501      	adds	r5, #1
 8007dda:	42ae      	cmp	r6, r5
 8007ddc:	bf38      	it	cc
 8007dde:	2200      	movcc	r2, #0
 8007de0:	18a3      	adds	r3, r4, r2
 8007de2:	50a7      	str	r7, [r4, r2]
 8007de4:	b107      	cbz	r7, 8007de8 <rshift+0x68>
 8007de6:	3304      	adds	r3, #4
 8007de8:	1b1a      	subs	r2, r3, r4
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007df0:	bf08      	it	eq
 8007df2:	2300      	moveq	r3, #0
 8007df4:	6102      	str	r2, [r0, #16]
 8007df6:	bf08      	it	eq
 8007df8:	6143      	streq	r3, [r0, #20]
 8007dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dfe:	f8dc c000 	ldr.w	ip, [ip]
 8007e02:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e06:	ea4c 0707 	orr.w	r7, ip, r7
 8007e0a:	f849 7b04 	str.w	r7, [r9], #4
 8007e0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e12:	40cf      	lsrs	r7, r1
 8007e14:	e7da      	b.n	8007dcc <rshift+0x4c>
 8007e16:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e1a:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e1e:	e7c3      	b.n	8007da8 <rshift+0x28>
 8007e20:	4623      	mov	r3, r4
 8007e22:	e7e1      	b.n	8007de8 <rshift+0x68>

08007e24 <__hexdig_fun>:
 8007e24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e28:	2b09      	cmp	r3, #9
 8007e2a:	d802      	bhi.n	8007e32 <__hexdig_fun+0xe>
 8007e2c:	3820      	subs	r0, #32
 8007e2e:	b2c0      	uxtb	r0, r0
 8007e30:	4770      	bx	lr
 8007e32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007e36:	2b05      	cmp	r3, #5
 8007e38:	d801      	bhi.n	8007e3e <__hexdig_fun+0x1a>
 8007e3a:	3847      	subs	r0, #71	; 0x47
 8007e3c:	e7f7      	b.n	8007e2e <__hexdig_fun+0xa>
 8007e3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e42:	2b05      	cmp	r3, #5
 8007e44:	d801      	bhi.n	8007e4a <__hexdig_fun+0x26>
 8007e46:	3827      	subs	r0, #39	; 0x27
 8007e48:	e7f1      	b.n	8007e2e <__hexdig_fun+0xa>
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	4770      	bx	lr
	...

08007e50 <__gethex>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	ed2d 8b02 	vpush	{d8}
 8007e58:	b089      	sub	sp, #36	; 0x24
 8007e5a:	ee08 0a10 	vmov	s16, r0
 8007e5e:	9304      	str	r3, [sp, #16]
 8007e60:	4bbc      	ldr	r3, [pc, #752]	; (8008154 <__gethex+0x304>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	4618      	mov	r0, r3
 8007e68:	468b      	mov	fp, r1
 8007e6a:	4690      	mov	r8, r2
 8007e6c:	f7f8 f9b8 	bl	80001e0 <strlen>
 8007e70:	9b01      	ldr	r3, [sp, #4]
 8007e72:	f8db 2000 	ldr.w	r2, [fp]
 8007e76:	4403      	add	r3, r0
 8007e78:	4682      	mov	sl, r0
 8007e7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007e7e:	9305      	str	r3, [sp, #20]
 8007e80:	1c93      	adds	r3, r2, #2
 8007e82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007e86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007e8a:	32fe      	adds	r2, #254	; 0xfe
 8007e8c:	18d1      	adds	r1, r2, r3
 8007e8e:	461f      	mov	r7, r3
 8007e90:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e94:	9100      	str	r1, [sp, #0]
 8007e96:	2830      	cmp	r0, #48	; 0x30
 8007e98:	d0f8      	beq.n	8007e8c <__gethex+0x3c>
 8007e9a:	f7ff ffc3 	bl	8007e24 <__hexdig_fun>
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d13a      	bne.n	8007f1a <__gethex+0xca>
 8007ea4:	9901      	ldr	r1, [sp, #4]
 8007ea6:	4652      	mov	r2, sl
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f001 f9e1 	bl	8009270 <strncmp>
 8007eae:	4605      	mov	r5, r0
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d168      	bne.n	8007f86 <__gethex+0x136>
 8007eb4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007eb8:	eb07 060a 	add.w	r6, r7, sl
 8007ebc:	f7ff ffb2 	bl	8007e24 <__hexdig_fun>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d062      	beq.n	8007f8a <__gethex+0x13a>
 8007ec4:	4633      	mov	r3, r6
 8007ec6:	7818      	ldrb	r0, [r3, #0]
 8007ec8:	2830      	cmp	r0, #48	; 0x30
 8007eca:	461f      	mov	r7, r3
 8007ecc:	f103 0301 	add.w	r3, r3, #1
 8007ed0:	d0f9      	beq.n	8007ec6 <__gethex+0x76>
 8007ed2:	f7ff ffa7 	bl	8007e24 <__hexdig_fun>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	fab0 f480 	clz	r4, r0
 8007edc:	0964      	lsrs	r4, r4, #5
 8007ede:	4635      	mov	r5, r6
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	463a      	mov	r2, r7
 8007ee4:	4616      	mov	r6, r2
 8007ee6:	3201      	adds	r2, #1
 8007ee8:	7830      	ldrb	r0, [r6, #0]
 8007eea:	f7ff ff9b 	bl	8007e24 <__hexdig_fun>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d1f8      	bne.n	8007ee4 <__gethex+0x94>
 8007ef2:	9901      	ldr	r1, [sp, #4]
 8007ef4:	4652      	mov	r2, sl
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f001 f9ba 	bl	8009270 <strncmp>
 8007efc:	b980      	cbnz	r0, 8007f20 <__gethex+0xd0>
 8007efe:	b94d      	cbnz	r5, 8007f14 <__gethex+0xc4>
 8007f00:	eb06 050a 	add.w	r5, r6, sl
 8007f04:	462a      	mov	r2, r5
 8007f06:	4616      	mov	r6, r2
 8007f08:	3201      	adds	r2, #1
 8007f0a:	7830      	ldrb	r0, [r6, #0]
 8007f0c:	f7ff ff8a 	bl	8007e24 <__hexdig_fun>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d1f8      	bne.n	8007f06 <__gethex+0xb6>
 8007f14:	1bad      	subs	r5, r5, r6
 8007f16:	00ad      	lsls	r5, r5, #2
 8007f18:	e004      	b.n	8007f24 <__gethex+0xd4>
 8007f1a:	2400      	movs	r4, #0
 8007f1c:	4625      	mov	r5, r4
 8007f1e:	e7e0      	b.n	8007ee2 <__gethex+0x92>
 8007f20:	2d00      	cmp	r5, #0
 8007f22:	d1f7      	bne.n	8007f14 <__gethex+0xc4>
 8007f24:	7833      	ldrb	r3, [r6, #0]
 8007f26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f2a:	2b50      	cmp	r3, #80	; 0x50
 8007f2c:	d13b      	bne.n	8007fa6 <__gethex+0x156>
 8007f2e:	7873      	ldrb	r3, [r6, #1]
 8007f30:	2b2b      	cmp	r3, #43	; 0x2b
 8007f32:	d02c      	beq.n	8007f8e <__gethex+0x13e>
 8007f34:	2b2d      	cmp	r3, #45	; 0x2d
 8007f36:	d02e      	beq.n	8007f96 <__gethex+0x146>
 8007f38:	1c71      	adds	r1, r6, #1
 8007f3a:	f04f 0900 	mov.w	r9, #0
 8007f3e:	7808      	ldrb	r0, [r1, #0]
 8007f40:	f7ff ff70 	bl	8007e24 <__hexdig_fun>
 8007f44:	1e43      	subs	r3, r0, #1
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b18      	cmp	r3, #24
 8007f4a:	d82c      	bhi.n	8007fa6 <__gethex+0x156>
 8007f4c:	f1a0 0210 	sub.w	r2, r0, #16
 8007f50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f54:	f7ff ff66 	bl	8007e24 <__hexdig_fun>
 8007f58:	1e43      	subs	r3, r0, #1
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b18      	cmp	r3, #24
 8007f5e:	d91d      	bls.n	8007f9c <__gethex+0x14c>
 8007f60:	f1b9 0f00 	cmp.w	r9, #0
 8007f64:	d000      	beq.n	8007f68 <__gethex+0x118>
 8007f66:	4252      	negs	r2, r2
 8007f68:	4415      	add	r5, r2
 8007f6a:	f8cb 1000 	str.w	r1, [fp]
 8007f6e:	b1e4      	cbz	r4, 8007faa <__gethex+0x15a>
 8007f70:	9b00      	ldr	r3, [sp, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bf14      	ite	ne
 8007f76:	2700      	movne	r7, #0
 8007f78:	2706      	moveq	r7, #6
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	b009      	add	sp, #36	; 0x24
 8007f7e:	ecbd 8b02 	vpop	{d8}
 8007f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f86:	463e      	mov	r6, r7
 8007f88:	4625      	mov	r5, r4
 8007f8a:	2401      	movs	r4, #1
 8007f8c:	e7ca      	b.n	8007f24 <__gethex+0xd4>
 8007f8e:	f04f 0900 	mov.w	r9, #0
 8007f92:	1cb1      	adds	r1, r6, #2
 8007f94:	e7d3      	b.n	8007f3e <__gethex+0xee>
 8007f96:	f04f 0901 	mov.w	r9, #1
 8007f9a:	e7fa      	b.n	8007f92 <__gethex+0x142>
 8007f9c:	230a      	movs	r3, #10
 8007f9e:	fb03 0202 	mla	r2, r3, r2, r0
 8007fa2:	3a10      	subs	r2, #16
 8007fa4:	e7d4      	b.n	8007f50 <__gethex+0x100>
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	e7df      	b.n	8007f6a <__gethex+0x11a>
 8007faa:	1bf3      	subs	r3, r6, r7
 8007fac:	3b01      	subs	r3, #1
 8007fae:	4621      	mov	r1, r4
 8007fb0:	2b07      	cmp	r3, #7
 8007fb2:	dc0b      	bgt.n	8007fcc <__gethex+0x17c>
 8007fb4:	ee18 0a10 	vmov	r0, s16
 8007fb8:	f000 fa70 	bl	800849c <_Balloc>
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	b940      	cbnz	r0, 8007fd2 <__gethex+0x182>
 8007fc0:	4b65      	ldr	r3, [pc, #404]	; (8008158 <__gethex+0x308>)
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	21de      	movs	r1, #222	; 0xde
 8007fc6:	4865      	ldr	r0, [pc, #404]	; (800815c <__gethex+0x30c>)
 8007fc8:	f001 f972 	bl	80092b0 <__assert_func>
 8007fcc:	3101      	adds	r1, #1
 8007fce:	105b      	asrs	r3, r3, #1
 8007fd0:	e7ee      	b.n	8007fb0 <__gethex+0x160>
 8007fd2:	f100 0914 	add.w	r9, r0, #20
 8007fd6:	f04f 0b00 	mov.w	fp, #0
 8007fda:	f1ca 0301 	rsb	r3, sl, #1
 8007fde:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fe2:	f8cd b000 	str.w	fp, [sp]
 8007fe6:	9306      	str	r3, [sp, #24]
 8007fe8:	42b7      	cmp	r7, r6
 8007fea:	d340      	bcc.n	800806e <__gethex+0x21e>
 8007fec:	9802      	ldr	r0, [sp, #8]
 8007fee:	9b00      	ldr	r3, [sp, #0]
 8007ff0:	f840 3b04 	str.w	r3, [r0], #4
 8007ff4:	eba0 0009 	sub.w	r0, r0, r9
 8007ff8:	1080      	asrs	r0, r0, #2
 8007ffa:	0146      	lsls	r6, r0, #5
 8007ffc:	6120      	str	r0, [r4, #16]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fb42 	bl	8008688 <__hi0bits>
 8008004:	1a30      	subs	r0, r6, r0
 8008006:	f8d8 6000 	ldr.w	r6, [r8]
 800800a:	42b0      	cmp	r0, r6
 800800c:	dd63      	ble.n	80080d6 <__gethex+0x286>
 800800e:	1b87      	subs	r7, r0, r6
 8008010:	4639      	mov	r1, r7
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fedc 	bl	8008dd0 <__any_on>
 8008018:	4682      	mov	sl, r0
 800801a:	b1a8      	cbz	r0, 8008048 <__gethex+0x1f8>
 800801c:	1e7b      	subs	r3, r7, #1
 800801e:	1159      	asrs	r1, r3, #5
 8008020:	f003 021f 	and.w	r2, r3, #31
 8008024:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008028:	f04f 0a01 	mov.w	sl, #1
 800802c:	fa0a f202 	lsl.w	r2, sl, r2
 8008030:	420a      	tst	r2, r1
 8008032:	d009      	beq.n	8008048 <__gethex+0x1f8>
 8008034:	4553      	cmp	r3, sl
 8008036:	dd05      	ble.n	8008044 <__gethex+0x1f4>
 8008038:	1eb9      	subs	r1, r7, #2
 800803a:	4620      	mov	r0, r4
 800803c:	f000 fec8 	bl	8008dd0 <__any_on>
 8008040:	2800      	cmp	r0, #0
 8008042:	d145      	bne.n	80080d0 <__gethex+0x280>
 8008044:	f04f 0a02 	mov.w	sl, #2
 8008048:	4639      	mov	r1, r7
 800804a:	4620      	mov	r0, r4
 800804c:	f7ff fe98 	bl	8007d80 <rshift>
 8008050:	443d      	add	r5, r7
 8008052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008056:	42ab      	cmp	r3, r5
 8008058:	da4c      	bge.n	80080f4 <__gethex+0x2a4>
 800805a:	ee18 0a10 	vmov	r0, s16
 800805e:	4621      	mov	r1, r4
 8008060:	f000 fa5c 	bl	800851c <_Bfree>
 8008064:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008066:	2300      	movs	r3, #0
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	27a3      	movs	r7, #163	; 0xa3
 800806c:	e785      	b.n	8007f7a <__gethex+0x12a>
 800806e:	1e73      	subs	r3, r6, #1
 8008070:	9a05      	ldr	r2, [sp, #20]
 8008072:	9303      	str	r3, [sp, #12]
 8008074:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008078:	4293      	cmp	r3, r2
 800807a:	d019      	beq.n	80080b0 <__gethex+0x260>
 800807c:	f1bb 0f20 	cmp.w	fp, #32
 8008080:	d107      	bne.n	8008092 <__gethex+0x242>
 8008082:	9b02      	ldr	r3, [sp, #8]
 8008084:	9a00      	ldr	r2, [sp, #0]
 8008086:	f843 2b04 	str.w	r2, [r3], #4
 800808a:	9302      	str	r3, [sp, #8]
 800808c:	2300      	movs	r3, #0
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	469b      	mov	fp, r3
 8008092:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008096:	f7ff fec5 	bl	8007e24 <__hexdig_fun>
 800809a:	9b00      	ldr	r3, [sp, #0]
 800809c:	f000 000f 	and.w	r0, r0, #15
 80080a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80080a4:	4303      	orrs	r3, r0
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	f10b 0b04 	add.w	fp, fp, #4
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	e00d      	b.n	80080cc <__gethex+0x27c>
 80080b0:	9b03      	ldr	r3, [sp, #12]
 80080b2:	9a06      	ldr	r2, [sp, #24]
 80080b4:	4413      	add	r3, r2
 80080b6:	42bb      	cmp	r3, r7
 80080b8:	d3e0      	bcc.n	800807c <__gethex+0x22c>
 80080ba:	4618      	mov	r0, r3
 80080bc:	9901      	ldr	r1, [sp, #4]
 80080be:	9307      	str	r3, [sp, #28]
 80080c0:	4652      	mov	r2, sl
 80080c2:	f001 f8d5 	bl	8009270 <strncmp>
 80080c6:	9b07      	ldr	r3, [sp, #28]
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d1d7      	bne.n	800807c <__gethex+0x22c>
 80080cc:	461e      	mov	r6, r3
 80080ce:	e78b      	b.n	8007fe8 <__gethex+0x198>
 80080d0:	f04f 0a03 	mov.w	sl, #3
 80080d4:	e7b8      	b.n	8008048 <__gethex+0x1f8>
 80080d6:	da0a      	bge.n	80080ee <__gethex+0x29e>
 80080d8:	1a37      	subs	r7, r6, r0
 80080da:	4621      	mov	r1, r4
 80080dc:	ee18 0a10 	vmov	r0, s16
 80080e0:	463a      	mov	r2, r7
 80080e2:	f000 fc37 	bl	8008954 <__lshift>
 80080e6:	1bed      	subs	r5, r5, r7
 80080e8:	4604      	mov	r4, r0
 80080ea:	f100 0914 	add.w	r9, r0, #20
 80080ee:	f04f 0a00 	mov.w	sl, #0
 80080f2:	e7ae      	b.n	8008052 <__gethex+0x202>
 80080f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80080f8:	42a8      	cmp	r0, r5
 80080fa:	dd72      	ble.n	80081e2 <__gethex+0x392>
 80080fc:	1b45      	subs	r5, r0, r5
 80080fe:	42ae      	cmp	r6, r5
 8008100:	dc36      	bgt.n	8008170 <__gethex+0x320>
 8008102:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d02a      	beq.n	8008160 <__gethex+0x310>
 800810a:	2b03      	cmp	r3, #3
 800810c:	d02c      	beq.n	8008168 <__gethex+0x318>
 800810e:	2b01      	cmp	r3, #1
 8008110:	d115      	bne.n	800813e <__gethex+0x2ee>
 8008112:	42ae      	cmp	r6, r5
 8008114:	d113      	bne.n	800813e <__gethex+0x2ee>
 8008116:	2e01      	cmp	r6, #1
 8008118:	d10b      	bne.n	8008132 <__gethex+0x2e2>
 800811a:	9a04      	ldr	r2, [sp, #16]
 800811c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	2301      	movs	r3, #1
 8008124:	6123      	str	r3, [r4, #16]
 8008126:	f8c9 3000 	str.w	r3, [r9]
 800812a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800812c:	2762      	movs	r7, #98	; 0x62
 800812e:	601c      	str	r4, [r3, #0]
 8008130:	e723      	b.n	8007f7a <__gethex+0x12a>
 8008132:	1e71      	subs	r1, r6, #1
 8008134:	4620      	mov	r0, r4
 8008136:	f000 fe4b 	bl	8008dd0 <__any_on>
 800813a:	2800      	cmp	r0, #0
 800813c:	d1ed      	bne.n	800811a <__gethex+0x2ca>
 800813e:	ee18 0a10 	vmov	r0, s16
 8008142:	4621      	mov	r1, r4
 8008144:	f000 f9ea 	bl	800851c <_Bfree>
 8008148:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800814a:	2300      	movs	r3, #0
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	2750      	movs	r7, #80	; 0x50
 8008150:	e713      	b.n	8007f7a <__gethex+0x12a>
 8008152:	bf00      	nop
 8008154:	0800afb0 	.word	0x0800afb0
 8008158:	0800af33 	.word	0x0800af33
 800815c:	0800af44 	.word	0x0800af44
 8008160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1eb      	bne.n	800813e <__gethex+0x2ee>
 8008166:	e7d8      	b.n	800811a <__gethex+0x2ca>
 8008168:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1d5      	bne.n	800811a <__gethex+0x2ca>
 800816e:	e7e6      	b.n	800813e <__gethex+0x2ee>
 8008170:	1e6f      	subs	r7, r5, #1
 8008172:	f1ba 0f00 	cmp.w	sl, #0
 8008176:	d131      	bne.n	80081dc <__gethex+0x38c>
 8008178:	b127      	cbz	r7, 8008184 <__gethex+0x334>
 800817a:	4639      	mov	r1, r7
 800817c:	4620      	mov	r0, r4
 800817e:	f000 fe27 	bl	8008dd0 <__any_on>
 8008182:	4682      	mov	sl, r0
 8008184:	117b      	asrs	r3, r7, #5
 8008186:	2101      	movs	r1, #1
 8008188:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800818c:	f007 071f 	and.w	r7, r7, #31
 8008190:	fa01 f707 	lsl.w	r7, r1, r7
 8008194:	421f      	tst	r7, r3
 8008196:	4629      	mov	r1, r5
 8008198:	4620      	mov	r0, r4
 800819a:	bf18      	it	ne
 800819c:	f04a 0a02 	orrne.w	sl, sl, #2
 80081a0:	1b76      	subs	r6, r6, r5
 80081a2:	f7ff fded 	bl	8007d80 <rshift>
 80081a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80081aa:	2702      	movs	r7, #2
 80081ac:	f1ba 0f00 	cmp.w	sl, #0
 80081b0:	d048      	beq.n	8008244 <__gethex+0x3f4>
 80081b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d015      	beq.n	80081e6 <__gethex+0x396>
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d017      	beq.n	80081ee <__gethex+0x39e>
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d109      	bne.n	80081d6 <__gethex+0x386>
 80081c2:	f01a 0f02 	tst.w	sl, #2
 80081c6:	d006      	beq.n	80081d6 <__gethex+0x386>
 80081c8:	f8d9 0000 	ldr.w	r0, [r9]
 80081cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80081d0:	f01a 0f01 	tst.w	sl, #1
 80081d4:	d10e      	bne.n	80081f4 <__gethex+0x3a4>
 80081d6:	f047 0710 	orr.w	r7, r7, #16
 80081da:	e033      	b.n	8008244 <__gethex+0x3f4>
 80081dc:	f04f 0a01 	mov.w	sl, #1
 80081e0:	e7d0      	b.n	8008184 <__gethex+0x334>
 80081e2:	2701      	movs	r7, #1
 80081e4:	e7e2      	b.n	80081ac <__gethex+0x35c>
 80081e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081e8:	f1c3 0301 	rsb	r3, r3, #1
 80081ec:	9315      	str	r3, [sp, #84]	; 0x54
 80081ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0f0      	beq.n	80081d6 <__gethex+0x386>
 80081f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80081f8:	f104 0314 	add.w	r3, r4, #20
 80081fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008200:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008204:	f04f 0c00 	mov.w	ip, #0
 8008208:	4618      	mov	r0, r3
 800820a:	f853 2b04 	ldr.w	r2, [r3], #4
 800820e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008212:	d01c      	beq.n	800824e <__gethex+0x3fe>
 8008214:	3201      	adds	r2, #1
 8008216:	6002      	str	r2, [r0, #0]
 8008218:	2f02      	cmp	r7, #2
 800821a:	f104 0314 	add.w	r3, r4, #20
 800821e:	d13f      	bne.n	80082a0 <__gethex+0x450>
 8008220:	f8d8 2000 	ldr.w	r2, [r8]
 8008224:	3a01      	subs	r2, #1
 8008226:	42b2      	cmp	r2, r6
 8008228:	d10a      	bne.n	8008240 <__gethex+0x3f0>
 800822a:	1171      	asrs	r1, r6, #5
 800822c:	2201      	movs	r2, #1
 800822e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008232:	f006 061f 	and.w	r6, r6, #31
 8008236:	fa02 f606 	lsl.w	r6, r2, r6
 800823a:	421e      	tst	r6, r3
 800823c:	bf18      	it	ne
 800823e:	4617      	movne	r7, r2
 8008240:	f047 0720 	orr.w	r7, r7, #32
 8008244:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008246:	601c      	str	r4, [r3, #0]
 8008248:	9b04      	ldr	r3, [sp, #16]
 800824a:	601d      	str	r5, [r3, #0]
 800824c:	e695      	b.n	8007f7a <__gethex+0x12a>
 800824e:	4299      	cmp	r1, r3
 8008250:	f843 cc04 	str.w	ip, [r3, #-4]
 8008254:	d8d8      	bhi.n	8008208 <__gethex+0x3b8>
 8008256:	68a3      	ldr	r3, [r4, #8]
 8008258:	459b      	cmp	fp, r3
 800825a:	db19      	blt.n	8008290 <__gethex+0x440>
 800825c:	6861      	ldr	r1, [r4, #4]
 800825e:	ee18 0a10 	vmov	r0, s16
 8008262:	3101      	adds	r1, #1
 8008264:	f000 f91a 	bl	800849c <_Balloc>
 8008268:	4681      	mov	r9, r0
 800826a:	b918      	cbnz	r0, 8008274 <__gethex+0x424>
 800826c:	4b1a      	ldr	r3, [pc, #104]	; (80082d8 <__gethex+0x488>)
 800826e:	4602      	mov	r2, r0
 8008270:	2184      	movs	r1, #132	; 0x84
 8008272:	e6a8      	b.n	8007fc6 <__gethex+0x176>
 8008274:	6922      	ldr	r2, [r4, #16]
 8008276:	3202      	adds	r2, #2
 8008278:	f104 010c 	add.w	r1, r4, #12
 800827c:	0092      	lsls	r2, r2, #2
 800827e:	300c      	adds	r0, #12
 8008280:	f7fd fc32 	bl	8005ae8 <memcpy>
 8008284:	4621      	mov	r1, r4
 8008286:	ee18 0a10 	vmov	r0, s16
 800828a:	f000 f947 	bl	800851c <_Bfree>
 800828e:	464c      	mov	r4, r9
 8008290:	6923      	ldr	r3, [r4, #16]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008298:	6122      	str	r2, [r4, #16]
 800829a:	2201      	movs	r2, #1
 800829c:	615a      	str	r2, [r3, #20]
 800829e:	e7bb      	b.n	8008218 <__gethex+0x3c8>
 80082a0:	6922      	ldr	r2, [r4, #16]
 80082a2:	455a      	cmp	r2, fp
 80082a4:	dd0b      	ble.n	80082be <__gethex+0x46e>
 80082a6:	2101      	movs	r1, #1
 80082a8:	4620      	mov	r0, r4
 80082aa:	f7ff fd69 	bl	8007d80 <rshift>
 80082ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082b2:	3501      	adds	r5, #1
 80082b4:	42ab      	cmp	r3, r5
 80082b6:	f6ff aed0 	blt.w	800805a <__gethex+0x20a>
 80082ba:	2701      	movs	r7, #1
 80082bc:	e7c0      	b.n	8008240 <__gethex+0x3f0>
 80082be:	f016 061f 	ands.w	r6, r6, #31
 80082c2:	d0fa      	beq.n	80082ba <__gethex+0x46a>
 80082c4:	449a      	add	sl, r3
 80082c6:	f1c6 0620 	rsb	r6, r6, #32
 80082ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082ce:	f000 f9db 	bl	8008688 <__hi0bits>
 80082d2:	42b0      	cmp	r0, r6
 80082d4:	dbe7      	blt.n	80082a6 <__gethex+0x456>
 80082d6:	e7f0      	b.n	80082ba <__gethex+0x46a>
 80082d8:	0800af33 	.word	0x0800af33

080082dc <L_shift>:
 80082dc:	f1c2 0208 	rsb	r2, r2, #8
 80082e0:	0092      	lsls	r2, r2, #2
 80082e2:	b570      	push	{r4, r5, r6, lr}
 80082e4:	f1c2 0620 	rsb	r6, r2, #32
 80082e8:	6843      	ldr	r3, [r0, #4]
 80082ea:	6804      	ldr	r4, [r0, #0]
 80082ec:	fa03 f506 	lsl.w	r5, r3, r6
 80082f0:	432c      	orrs	r4, r5
 80082f2:	40d3      	lsrs	r3, r2
 80082f4:	6004      	str	r4, [r0, #0]
 80082f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80082fa:	4288      	cmp	r0, r1
 80082fc:	d3f4      	bcc.n	80082e8 <L_shift+0xc>
 80082fe:	bd70      	pop	{r4, r5, r6, pc}

08008300 <__match>:
 8008300:	b530      	push	{r4, r5, lr}
 8008302:	6803      	ldr	r3, [r0, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800830a:	b914      	cbnz	r4, 8008312 <__match+0x12>
 800830c:	6003      	str	r3, [r0, #0]
 800830e:	2001      	movs	r0, #1
 8008310:	bd30      	pop	{r4, r5, pc}
 8008312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008316:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800831a:	2d19      	cmp	r5, #25
 800831c:	bf98      	it	ls
 800831e:	3220      	addls	r2, #32
 8008320:	42a2      	cmp	r2, r4
 8008322:	d0f0      	beq.n	8008306 <__match+0x6>
 8008324:	2000      	movs	r0, #0
 8008326:	e7f3      	b.n	8008310 <__match+0x10>

08008328 <__hexnan>:
 8008328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	680b      	ldr	r3, [r1, #0]
 800832e:	6801      	ldr	r1, [r0, #0]
 8008330:	115e      	asrs	r6, r3, #5
 8008332:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008336:	f013 031f 	ands.w	r3, r3, #31
 800833a:	b087      	sub	sp, #28
 800833c:	bf18      	it	ne
 800833e:	3604      	addne	r6, #4
 8008340:	2500      	movs	r5, #0
 8008342:	1f37      	subs	r7, r6, #4
 8008344:	4682      	mov	sl, r0
 8008346:	4690      	mov	r8, r2
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	f846 5c04 	str.w	r5, [r6, #-4]
 800834e:	46b9      	mov	r9, r7
 8008350:	463c      	mov	r4, r7
 8008352:	9502      	str	r5, [sp, #8]
 8008354:	46ab      	mov	fp, r5
 8008356:	784a      	ldrb	r2, [r1, #1]
 8008358:	1c4b      	adds	r3, r1, #1
 800835a:	9303      	str	r3, [sp, #12]
 800835c:	b342      	cbz	r2, 80083b0 <__hexnan+0x88>
 800835e:	4610      	mov	r0, r2
 8008360:	9105      	str	r1, [sp, #20]
 8008362:	9204      	str	r2, [sp, #16]
 8008364:	f7ff fd5e 	bl	8007e24 <__hexdig_fun>
 8008368:	2800      	cmp	r0, #0
 800836a:	d14f      	bne.n	800840c <__hexnan+0xe4>
 800836c:	9a04      	ldr	r2, [sp, #16]
 800836e:	9905      	ldr	r1, [sp, #20]
 8008370:	2a20      	cmp	r2, #32
 8008372:	d818      	bhi.n	80083a6 <__hexnan+0x7e>
 8008374:	9b02      	ldr	r3, [sp, #8]
 8008376:	459b      	cmp	fp, r3
 8008378:	dd13      	ble.n	80083a2 <__hexnan+0x7a>
 800837a:	454c      	cmp	r4, r9
 800837c:	d206      	bcs.n	800838c <__hexnan+0x64>
 800837e:	2d07      	cmp	r5, #7
 8008380:	dc04      	bgt.n	800838c <__hexnan+0x64>
 8008382:	462a      	mov	r2, r5
 8008384:	4649      	mov	r1, r9
 8008386:	4620      	mov	r0, r4
 8008388:	f7ff ffa8 	bl	80082dc <L_shift>
 800838c:	4544      	cmp	r4, r8
 800838e:	d950      	bls.n	8008432 <__hexnan+0x10a>
 8008390:	2300      	movs	r3, #0
 8008392:	f1a4 0904 	sub.w	r9, r4, #4
 8008396:	f844 3c04 	str.w	r3, [r4, #-4]
 800839a:	f8cd b008 	str.w	fp, [sp, #8]
 800839e:	464c      	mov	r4, r9
 80083a0:	461d      	mov	r5, r3
 80083a2:	9903      	ldr	r1, [sp, #12]
 80083a4:	e7d7      	b.n	8008356 <__hexnan+0x2e>
 80083a6:	2a29      	cmp	r2, #41	; 0x29
 80083a8:	d156      	bne.n	8008458 <__hexnan+0x130>
 80083aa:	3102      	adds	r1, #2
 80083ac:	f8ca 1000 	str.w	r1, [sl]
 80083b0:	f1bb 0f00 	cmp.w	fp, #0
 80083b4:	d050      	beq.n	8008458 <__hexnan+0x130>
 80083b6:	454c      	cmp	r4, r9
 80083b8:	d206      	bcs.n	80083c8 <__hexnan+0xa0>
 80083ba:	2d07      	cmp	r5, #7
 80083bc:	dc04      	bgt.n	80083c8 <__hexnan+0xa0>
 80083be:	462a      	mov	r2, r5
 80083c0:	4649      	mov	r1, r9
 80083c2:	4620      	mov	r0, r4
 80083c4:	f7ff ff8a 	bl	80082dc <L_shift>
 80083c8:	4544      	cmp	r4, r8
 80083ca:	d934      	bls.n	8008436 <__hexnan+0x10e>
 80083cc:	f1a8 0204 	sub.w	r2, r8, #4
 80083d0:	4623      	mov	r3, r4
 80083d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80083d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80083da:	429f      	cmp	r7, r3
 80083dc:	d2f9      	bcs.n	80083d2 <__hexnan+0xaa>
 80083de:	1b3b      	subs	r3, r7, r4
 80083e0:	f023 0303 	bic.w	r3, r3, #3
 80083e4:	3304      	adds	r3, #4
 80083e6:	3401      	adds	r4, #1
 80083e8:	3e03      	subs	r6, #3
 80083ea:	42b4      	cmp	r4, r6
 80083ec:	bf88      	it	hi
 80083ee:	2304      	movhi	r3, #4
 80083f0:	4443      	add	r3, r8
 80083f2:	2200      	movs	r2, #0
 80083f4:	f843 2b04 	str.w	r2, [r3], #4
 80083f8:	429f      	cmp	r7, r3
 80083fa:	d2fb      	bcs.n	80083f4 <__hexnan+0xcc>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	b91b      	cbnz	r3, 8008408 <__hexnan+0xe0>
 8008400:	4547      	cmp	r7, r8
 8008402:	d127      	bne.n	8008454 <__hexnan+0x12c>
 8008404:	2301      	movs	r3, #1
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	2005      	movs	r0, #5
 800840a:	e026      	b.n	800845a <__hexnan+0x132>
 800840c:	3501      	adds	r5, #1
 800840e:	2d08      	cmp	r5, #8
 8008410:	f10b 0b01 	add.w	fp, fp, #1
 8008414:	dd06      	ble.n	8008424 <__hexnan+0xfc>
 8008416:	4544      	cmp	r4, r8
 8008418:	d9c3      	bls.n	80083a2 <__hexnan+0x7a>
 800841a:	2300      	movs	r3, #0
 800841c:	f844 3c04 	str.w	r3, [r4, #-4]
 8008420:	2501      	movs	r5, #1
 8008422:	3c04      	subs	r4, #4
 8008424:	6822      	ldr	r2, [r4, #0]
 8008426:	f000 000f 	and.w	r0, r0, #15
 800842a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800842e:	6022      	str	r2, [r4, #0]
 8008430:	e7b7      	b.n	80083a2 <__hexnan+0x7a>
 8008432:	2508      	movs	r5, #8
 8008434:	e7b5      	b.n	80083a2 <__hexnan+0x7a>
 8008436:	9b01      	ldr	r3, [sp, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0df      	beq.n	80083fc <__hexnan+0xd4>
 800843c:	f04f 32ff 	mov.w	r2, #4294967295
 8008440:	f1c3 0320 	rsb	r3, r3, #32
 8008444:	fa22 f303 	lsr.w	r3, r2, r3
 8008448:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800844c:	401a      	ands	r2, r3
 800844e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008452:	e7d3      	b.n	80083fc <__hexnan+0xd4>
 8008454:	3f04      	subs	r7, #4
 8008456:	e7d1      	b.n	80083fc <__hexnan+0xd4>
 8008458:	2004      	movs	r0, #4
 800845a:	b007      	add	sp, #28
 800845c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008460 <_localeconv_r>:
 8008460:	4800      	ldr	r0, [pc, #0]	; (8008464 <_localeconv_r+0x4>)
 8008462:	4770      	bx	lr
 8008464:	20000174 	.word	0x20000174

08008468 <malloc>:
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <malloc+0xc>)
 800846a:	4601      	mov	r1, r0
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	f000 bd2f 	b.w	8008ed0 <_malloc_r>
 8008472:	bf00      	nop
 8008474:	2000001c 	.word	0x2000001c

08008478 <__ascii_mbtowc>:
 8008478:	b082      	sub	sp, #8
 800847a:	b901      	cbnz	r1, 800847e <__ascii_mbtowc+0x6>
 800847c:	a901      	add	r1, sp, #4
 800847e:	b142      	cbz	r2, 8008492 <__ascii_mbtowc+0x1a>
 8008480:	b14b      	cbz	r3, 8008496 <__ascii_mbtowc+0x1e>
 8008482:	7813      	ldrb	r3, [r2, #0]
 8008484:	600b      	str	r3, [r1, #0]
 8008486:	7812      	ldrb	r2, [r2, #0]
 8008488:	1e10      	subs	r0, r2, #0
 800848a:	bf18      	it	ne
 800848c:	2001      	movne	r0, #1
 800848e:	b002      	add	sp, #8
 8008490:	4770      	bx	lr
 8008492:	4610      	mov	r0, r2
 8008494:	e7fb      	b.n	800848e <__ascii_mbtowc+0x16>
 8008496:	f06f 0001 	mvn.w	r0, #1
 800849a:	e7f8      	b.n	800848e <__ascii_mbtowc+0x16>

0800849c <_Balloc>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084a0:	4604      	mov	r4, r0
 80084a2:	460d      	mov	r5, r1
 80084a4:	b976      	cbnz	r6, 80084c4 <_Balloc+0x28>
 80084a6:	2010      	movs	r0, #16
 80084a8:	f7ff ffde 	bl	8008468 <malloc>
 80084ac:	4602      	mov	r2, r0
 80084ae:	6260      	str	r0, [r4, #36]	; 0x24
 80084b0:	b920      	cbnz	r0, 80084bc <_Balloc+0x20>
 80084b2:	4b18      	ldr	r3, [pc, #96]	; (8008514 <_Balloc+0x78>)
 80084b4:	4818      	ldr	r0, [pc, #96]	; (8008518 <_Balloc+0x7c>)
 80084b6:	2166      	movs	r1, #102	; 0x66
 80084b8:	f000 fefa 	bl	80092b0 <__assert_func>
 80084bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084c0:	6006      	str	r6, [r0, #0]
 80084c2:	60c6      	str	r6, [r0, #12]
 80084c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084c6:	68f3      	ldr	r3, [r6, #12]
 80084c8:	b183      	cbz	r3, 80084ec <_Balloc+0x50>
 80084ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084d2:	b9b8      	cbnz	r0, 8008504 <_Balloc+0x68>
 80084d4:	2101      	movs	r1, #1
 80084d6:	fa01 f605 	lsl.w	r6, r1, r5
 80084da:	1d72      	adds	r2, r6, #5
 80084dc:	0092      	lsls	r2, r2, #2
 80084de:	4620      	mov	r0, r4
 80084e0:	f000 fc97 	bl	8008e12 <_calloc_r>
 80084e4:	b160      	cbz	r0, 8008500 <_Balloc+0x64>
 80084e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084ea:	e00e      	b.n	800850a <_Balloc+0x6e>
 80084ec:	2221      	movs	r2, #33	; 0x21
 80084ee:	2104      	movs	r1, #4
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 fc8e 	bl	8008e12 <_calloc_r>
 80084f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084f8:	60f0      	str	r0, [r6, #12]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e4      	bne.n	80084ca <_Balloc+0x2e>
 8008500:	2000      	movs	r0, #0
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	6802      	ldr	r2, [r0, #0]
 8008506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800850a:	2300      	movs	r3, #0
 800850c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008510:	e7f7      	b.n	8008502 <_Balloc+0x66>
 8008512:	bf00      	nop
 8008514:	0800aebd 	.word	0x0800aebd
 8008518:	0800afc4 	.word	0x0800afc4

0800851c <_Bfree>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008520:	4605      	mov	r5, r0
 8008522:	460c      	mov	r4, r1
 8008524:	b976      	cbnz	r6, 8008544 <_Bfree+0x28>
 8008526:	2010      	movs	r0, #16
 8008528:	f7ff ff9e 	bl	8008468 <malloc>
 800852c:	4602      	mov	r2, r0
 800852e:	6268      	str	r0, [r5, #36]	; 0x24
 8008530:	b920      	cbnz	r0, 800853c <_Bfree+0x20>
 8008532:	4b09      	ldr	r3, [pc, #36]	; (8008558 <_Bfree+0x3c>)
 8008534:	4809      	ldr	r0, [pc, #36]	; (800855c <_Bfree+0x40>)
 8008536:	218a      	movs	r1, #138	; 0x8a
 8008538:	f000 feba 	bl	80092b0 <__assert_func>
 800853c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008540:	6006      	str	r6, [r0, #0]
 8008542:	60c6      	str	r6, [r0, #12]
 8008544:	b13c      	cbz	r4, 8008556 <_Bfree+0x3a>
 8008546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008548:	6862      	ldr	r2, [r4, #4]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008550:	6021      	str	r1, [r4, #0]
 8008552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	0800aebd 	.word	0x0800aebd
 800855c:	0800afc4 	.word	0x0800afc4

08008560 <__multadd>:
 8008560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008564:	690e      	ldr	r6, [r1, #16]
 8008566:	4607      	mov	r7, r0
 8008568:	4698      	mov	r8, r3
 800856a:	460c      	mov	r4, r1
 800856c:	f101 0014 	add.w	r0, r1, #20
 8008570:	2300      	movs	r3, #0
 8008572:	6805      	ldr	r5, [r0, #0]
 8008574:	b2a9      	uxth	r1, r5
 8008576:	fb02 8101 	mla	r1, r2, r1, r8
 800857a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800857e:	0c2d      	lsrs	r5, r5, #16
 8008580:	fb02 c505 	mla	r5, r2, r5, ip
 8008584:	b289      	uxth	r1, r1
 8008586:	3301      	adds	r3, #1
 8008588:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800858c:	429e      	cmp	r6, r3
 800858e:	f840 1b04 	str.w	r1, [r0], #4
 8008592:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008596:	dcec      	bgt.n	8008572 <__multadd+0x12>
 8008598:	f1b8 0f00 	cmp.w	r8, #0
 800859c:	d022      	beq.n	80085e4 <__multadd+0x84>
 800859e:	68a3      	ldr	r3, [r4, #8]
 80085a0:	42b3      	cmp	r3, r6
 80085a2:	dc19      	bgt.n	80085d8 <__multadd+0x78>
 80085a4:	6861      	ldr	r1, [r4, #4]
 80085a6:	4638      	mov	r0, r7
 80085a8:	3101      	adds	r1, #1
 80085aa:	f7ff ff77 	bl	800849c <_Balloc>
 80085ae:	4605      	mov	r5, r0
 80085b0:	b928      	cbnz	r0, 80085be <__multadd+0x5e>
 80085b2:	4602      	mov	r2, r0
 80085b4:	4b0d      	ldr	r3, [pc, #52]	; (80085ec <__multadd+0x8c>)
 80085b6:	480e      	ldr	r0, [pc, #56]	; (80085f0 <__multadd+0x90>)
 80085b8:	21b5      	movs	r1, #181	; 0xb5
 80085ba:	f000 fe79 	bl	80092b0 <__assert_func>
 80085be:	6922      	ldr	r2, [r4, #16]
 80085c0:	3202      	adds	r2, #2
 80085c2:	f104 010c 	add.w	r1, r4, #12
 80085c6:	0092      	lsls	r2, r2, #2
 80085c8:	300c      	adds	r0, #12
 80085ca:	f7fd fa8d 	bl	8005ae8 <memcpy>
 80085ce:	4621      	mov	r1, r4
 80085d0:	4638      	mov	r0, r7
 80085d2:	f7ff ffa3 	bl	800851c <_Bfree>
 80085d6:	462c      	mov	r4, r5
 80085d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80085dc:	3601      	adds	r6, #1
 80085de:	f8c3 8014 	str.w	r8, [r3, #20]
 80085e2:	6126      	str	r6, [r4, #16]
 80085e4:	4620      	mov	r0, r4
 80085e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ea:	bf00      	nop
 80085ec:	0800af33 	.word	0x0800af33
 80085f0:	0800afc4 	.word	0x0800afc4

080085f4 <__s2b>:
 80085f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f8:	460c      	mov	r4, r1
 80085fa:	4615      	mov	r5, r2
 80085fc:	461f      	mov	r7, r3
 80085fe:	2209      	movs	r2, #9
 8008600:	3308      	adds	r3, #8
 8008602:	4606      	mov	r6, r0
 8008604:	fb93 f3f2 	sdiv	r3, r3, r2
 8008608:	2100      	movs	r1, #0
 800860a:	2201      	movs	r2, #1
 800860c:	429a      	cmp	r2, r3
 800860e:	db09      	blt.n	8008624 <__s2b+0x30>
 8008610:	4630      	mov	r0, r6
 8008612:	f7ff ff43 	bl	800849c <_Balloc>
 8008616:	b940      	cbnz	r0, 800862a <__s2b+0x36>
 8008618:	4602      	mov	r2, r0
 800861a:	4b19      	ldr	r3, [pc, #100]	; (8008680 <__s2b+0x8c>)
 800861c:	4819      	ldr	r0, [pc, #100]	; (8008684 <__s2b+0x90>)
 800861e:	21ce      	movs	r1, #206	; 0xce
 8008620:	f000 fe46 	bl	80092b0 <__assert_func>
 8008624:	0052      	lsls	r2, r2, #1
 8008626:	3101      	adds	r1, #1
 8008628:	e7f0      	b.n	800860c <__s2b+0x18>
 800862a:	9b08      	ldr	r3, [sp, #32]
 800862c:	6143      	str	r3, [r0, #20]
 800862e:	2d09      	cmp	r5, #9
 8008630:	f04f 0301 	mov.w	r3, #1
 8008634:	6103      	str	r3, [r0, #16]
 8008636:	dd16      	ble.n	8008666 <__s2b+0x72>
 8008638:	f104 0909 	add.w	r9, r4, #9
 800863c:	46c8      	mov	r8, r9
 800863e:	442c      	add	r4, r5
 8008640:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008644:	4601      	mov	r1, r0
 8008646:	3b30      	subs	r3, #48	; 0x30
 8008648:	220a      	movs	r2, #10
 800864a:	4630      	mov	r0, r6
 800864c:	f7ff ff88 	bl	8008560 <__multadd>
 8008650:	45a0      	cmp	r8, r4
 8008652:	d1f5      	bne.n	8008640 <__s2b+0x4c>
 8008654:	f1a5 0408 	sub.w	r4, r5, #8
 8008658:	444c      	add	r4, r9
 800865a:	1b2d      	subs	r5, r5, r4
 800865c:	1963      	adds	r3, r4, r5
 800865e:	42bb      	cmp	r3, r7
 8008660:	db04      	blt.n	800866c <__s2b+0x78>
 8008662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008666:	340a      	adds	r4, #10
 8008668:	2509      	movs	r5, #9
 800866a:	e7f6      	b.n	800865a <__s2b+0x66>
 800866c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008670:	4601      	mov	r1, r0
 8008672:	3b30      	subs	r3, #48	; 0x30
 8008674:	220a      	movs	r2, #10
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ff72 	bl	8008560 <__multadd>
 800867c:	e7ee      	b.n	800865c <__s2b+0x68>
 800867e:	bf00      	nop
 8008680:	0800af33 	.word	0x0800af33
 8008684:	0800afc4 	.word	0x0800afc4

08008688 <__hi0bits>:
 8008688:	0c03      	lsrs	r3, r0, #16
 800868a:	041b      	lsls	r3, r3, #16
 800868c:	b9d3      	cbnz	r3, 80086c4 <__hi0bits+0x3c>
 800868e:	0400      	lsls	r0, r0, #16
 8008690:	2310      	movs	r3, #16
 8008692:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008696:	bf04      	itt	eq
 8008698:	0200      	lsleq	r0, r0, #8
 800869a:	3308      	addeq	r3, #8
 800869c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086a0:	bf04      	itt	eq
 80086a2:	0100      	lsleq	r0, r0, #4
 80086a4:	3304      	addeq	r3, #4
 80086a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086aa:	bf04      	itt	eq
 80086ac:	0080      	lsleq	r0, r0, #2
 80086ae:	3302      	addeq	r3, #2
 80086b0:	2800      	cmp	r0, #0
 80086b2:	db05      	blt.n	80086c0 <__hi0bits+0x38>
 80086b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086b8:	f103 0301 	add.w	r3, r3, #1
 80086bc:	bf08      	it	eq
 80086be:	2320      	moveq	r3, #32
 80086c0:	4618      	mov	r0, r3
 80086c2:	4770      	bx	lr
 80086c4:	2300      	movs	r3, #0
 80086c6:	e7e4      	b.n	8008692 <__hi0bits+0xa>

080086c8 <__lo0bits>:
 80086c8:	6803      	ldr	r3, [r0, #0]
 80086ca:	f013 0207 	ands.w	r2, r3, #7
 80086ce:	4601      	mov	r1, r0
 80086d0:	d00b      	beq.n	80086ea <__lo0bits+0x22>
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d424      	bmi.n	8008720 <__lo0bits+0x58>
 80086d6:	0798      	lsls	r0, r3, #30
 80086d8:	bf49      	itett	mi
 80086da:	085b      	lsrmi	r3, r3, #1
 80086dc:	089b      	lsrpl	r3, r3, #2
 80086de:	2001      	movmi	r0, #1
 80086e0:	600b      	strmi	r3, [r1, #0]
 80086e2:	bf5c      	itt	pl
 80086e4:	600b      	strpl	r3, [r1, #0]
 80086e6:	2002      	movpl	r0, #2
 80086e8:	4770      	bx	lr
 80086ea:	b298      	uxth	r0, r3
 80086ec:	b9b0      	cbnz	r0, 800871c <__lo0bits+0x54>
 80086ee:	0c1b      	lsrs	r3, r3, #16
 80086f0:	2010      	movs	r0, #16
 80086f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086f6:	bf04      	itt	eq
 80086f8:	0a1b      	lsreq	r3, r3, #8
 80086fa:	3008      	addeq	r0, #8
 80086fc:	071a      	lsls	r2, r3, #28
 80086fe:	bf04      	itt	eq
 8008700:	091b      	lsreq	r3, r3, #4
 8008702:	3004      	addeq	r0, #4
 8008704:	079a      	lsls	r2, r3, #30
 8008706:	bf04      	itt	eq
 8008708:	089b      	lsreq	r3, r3, #2
 800870a:	3002      	addeq	r0, #2
 800870c:	07da      	lsls	r2, r3, #31
 800870e:	d403      	bmi.n	8008718 <__lo0bits+0x50>
 8008710:	085b      	lsrs	r3, r3, #1
 8008712:	f100 0001 	add.w	r0, r0, #1
 8008716:	d005      	beq.n	8008724 <__lo0bits+0x5c>
 8008718:	600b      	str	r3, [r1, #0]
 800871a:	4770      	bx	lr
 800871c:	4610      	mov	r0, r2
 800871e:	e7e8      	b.n	80086f2 <__lo0bits+0x2a>
 8008720:	2000      	movs	r0, #0
 8008722:	4770      	bx	lr
 8008724:	2020      	movs	r0, #32
 8008726:	4770      	bx	lr

08008728 <__i2b>:
 8008728:	b510      	push	{r4, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	2101      	movs	r1, #1
 800872e:	f7ff feb5 	bl	800849c <_Balloc>
 8008732:	4602      	mov	r2, r0
 8008734:	b928      	cbnz	r0, 8008742 <__i2b+0x1a>
 8008736:	4b05      	ldr	r3, [pc, #20]	; (800874c <__i2b+0x24>)
 8008738:	4805      	ldr	r0, [pc, #20]	; (8008750 <__i2b+0x28>)
 800873a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800873e:	f000 fdb7 	bl	80092b0 <__assert_func>
 8008742:	2301      	movs	r3, #1
 8008744:	6144      	str	r4, [r0, #20]
 8008746:	6103      	str	r3, [r0, #16]
 8008748:	bd10      	pop	{r4, pc}
 800874a:	bf00      	nop
 800874c:	0800af33 	.word	0x0800af33
 8008750:	0800afc4 	.word	0x0800afc4

08008754 <__multiply>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	4614      	mov	r4, r2
 800875a:	690a      	ldr	r2, [r1, #16]
 800875c:	6923      	ldr	r3, [r4, #16]
 800875e:	429a      	cmp	r2, r3
 8008760:	bfb8      	it	lt
 8008762:	460b      	movlt	r3, r1
 8008764:	460d      	mov	r5, r1
 8008766:	bfbc      	itt	lt
 8008768:	4625      	movlt	r5, r4
 800876a:	461c      	movlt	r4, r3
 800876c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008770:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008774:	68ab      	ldr	r3, [r5, #8]
 8008776:	6869      	ldr	r1, [r5, #4]
 8008778:	eb0a 0709 	add.w	r7, sl, r9
 800877c:	42bb      	cmp	r3, r7
 800877e:	b085      	sub	sp, #20
 8008780:	bfb8      	it	lt
 8008782:	3101      	addlt	r1, #1
 8008784:	f7ff fe8a 	bl	800849c <_Balloc>
 8008788:	b930      	cbnz	r0, 8008798 <__multiply+0x44>
 800878a:	4602      	mov	r2, r0
 800878c:	4b42      	ldr	r3, [pc, #264]	; (8008898 <__multiply+0x144>)
 800878e:	4843      	ldr	r0, [pc, #268]	; (800889c <__multiply+0x148>)
 8008790:	f240 115d 	movw	r1, #349	; 0x15d
 8008794:	f000 fd8c 	bl	80092b0 <__assert_func>
 8008798:	f100 0614 	add.w	r6, r0, #20
 800879c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80087a0:	4633      	mov	r3, r6
 80087a2:	2200      	movs	r2, #0
 80087a4:	4543      	cmp	r3, r8
 80087a6:	d31e      	bcc.n	80087e6 <__multiply+0x92>
 80087a8:	f105 0c14 	add.w	ip, r5, #20
 80087ac:	f104 0314 	add.w	r3, r4, #20
 80087b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80087b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80087b8:	9202      	str	r2, [sp, #8]
 80087ba:	ebac 0205 	sub.w	r2, ip, r5
 80087be:	3a15      	subs	r2, #21
 80087c0:	f022 0203 	bic.w	r2, r2, #3
 80087c4:	3204      	adds	r2, #4
 80087c6:	f105 0115 	add.w	r1, r5, #21
 80087ca:	458c      	cmp	ip, r1
 80087cc:	bf38      	it	cc
 80087ce:	2204      	movcc	r2, #4
 80087d0:	9201      	str	r2, [sp, #4]
 80087d2:	9a02      	ldr	r2, [sp, #8]
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d808      	bhi.n	80087ec <__multiply+0x98>
 80087da:	2f00      	cmp	r7, #0
 80087dc:	dc55      	bgt.n	800888a <__multiply+0x136>
 80087de:	6107      	str	r7, [r0, #16]
 80087e0:	b005      	add	sp, #20
 80087e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e6:	f843 2b04 	str.w	r2, [r3], #4
 80087ea:	e7db      	b.n	80087a4 <__multiply+0x50>
 80087ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80087f0:	f1ba 0f00 	cmp.w	sl, #0
 80087f4:	d020      	beq.n	8008838 <__multiply+0xe4>
 80087f6:	f105 0e14 	add.w	lr, r5, #20
 80087fa:	46b1      	mov	r9, r6
 80087fc:	2200      	movs	r2, #0
 80087fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008802:	f8d9 b000 	ldr.w	fp, [r9]
 8008806:	b2a1      	uxth	r1, r4
 8008808:	fa1f fb8b 	uxth.w	fp, fp
 800880c:	fb0a b101 	mla	r1, sl, r1, fp
 8008810:	4411      	add	r1, r2
 8008812:	f8d9 2000 	ldr.w	r2, [r9]
 8008816:	0c24      	lsrs	r4, r4, #16
 8008818:	0c12      	lsrs	r2, r2, #16
 800881a:	fb0a 2404 	mla	r4, sl, r4, r2
 800881e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008822:	b289      	uxth	r1, r1
 8008824:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008828:	45f4      	cmp	ip, lr
 800882a:	f849 1b04 	str.w	r1, [r9], #4
 800882e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008832:	d8e4      	bhi.n	80087fe <__multiply+0xaa>
 8008834:	9901      	ldr	r1, [sp, #4]
 8008836:	5072      	str	r2, [r6, r1]
 8008838:	9a03      	ldr	r2, [sp, #12]
 800883a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800883e:	3304      	adds	r3, #4
 8008840:	f1b9 0f00 	cmp.w	r9, #0
 8008844:	d01f      	beq.n	8008886 <__multiply+0x132>
 8008846:	6834      	ldr	r4, [r6, #0]
 8008848:	f105 0114 	add.w	r1, r5, #20
 800884c:	46b6      	mov	lr, r6
 800884e:	f04f 0a00 	mov.w	sl, #0
 8008852:	880a      	ldrh	r2, [r1, #0]
 8008854:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008858:	fb09 b202 	mla	r2, r9, r2, fp
 800885c:	4492      	add	sl, r2
 800885e:	b2a4      	uxth	r4, r4
 8008860:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008864:	f84e 4b04 	str.w	r4, [lr], #4
 8008868:	f851 4b04 	ldr.w	r4, [r1], #4
 800886c:	f8be 2000 	ldrh.w	r2, [lr]
 8008870:	0c24      	lsrs	r4, r4, #16
 8008872:	fb09 2404 	mla	r4, r9, r4, r2
 8008876:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800887a:	458c      	cmp	ip, r1
 800887c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008880:	d8e7      	bhi.n	8008852 <__multiply+0xfe>
 8008882:	9a01      	ldr	r2, [sp, #4]
 8008884:	50b4      	str	r4, [r6, r2]
 8008886:	3604      	adds	r6, #4
 8008888:	e7a3      	b.n	80087d2 <__multiply+0x7e>
 800888a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1a5      	bne.n	80087de <__multiply+0x8a>
 8008892:	3f01      	subs	r7, #1
 8008894:	e7a1      	b.n	80087da <__multiply+0x86>
 8008896:	bf00      	nop
 8008898:	0800af33 	.word	0x0800af33
 800889c:	0800afc4 	.word	0x0800afc4

080088a0 <__pow5mult>:
 80088a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a4:	4615      	mov	r5, r2
 80088a6:	f012 0203 	ands.w	r2, r2, #3
 80088aa:	4606      	mov	r6, r0
 80088ac:	460f      	mov	r7, r1
 80088ae:	d007      	beq.n	80088c0 <__pow5mult+0x20>
 80088b0:	4c25      	ldr	r4, [pc, #148]	; (8008948 <__pow5mult+0xa8>)
 80088b2:	3a01      	subs	r2, #1
 80088b4:	2300      	movs	r3, #0
 80088b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088ba:	f7ff fe51 	bl	8008560 <__multadd>
 80088be:	4607      	mov	r7, r0
 80088c0:	10ad      	asrs	r5, r5, #2
 80088c2:	d03d      	beq.n	8008940 <__pow5mult+0xa0>
 80088c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088c6:	b97c      	cbnz	r4, 80088e8 <__pow5mult+0x48>
 80088c8:	2010      	movs	r0, #16
 80088ca:	f7ff fdcd 	bl	8008468 <malloc>
 80088ce:	4602      	mov	r2, r0
 80088d0:	6270      	str	r0, [r6, #36]	; 0x24
 80088d2:	b928      	cbnz	r0, 80088e0 <__pow5mult+0x40>
 80088d4:	4b1d      	ldr	r3, [pc, #116]	; (800894c <__pow5mult+0xac>)
 80088d6:	481e      	ldr	r0, [pc, #120]	; (8008950 <__pow5mult+0xb0>)
 80088d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80088dc:	f000 fce8 	bl	80092b0 <__assert_func>
 80088e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088e4:	6004      	str	r4, [r0, #0]
 80088e6:	60c4      	str	r4, [r0, #12]
 80088e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088f0:	b94c      	cbnz	r4, 8008906 <__pow5mult+0x66>
 80088f2:	f240 2171 	movw	r1, #625	; 0x271
 80088f6:	4630      	mov	r0, r6
 80088f8:	f7ff ff16 	bl	8008728 <__i2b>
 80088fc:	2300      	movs	r3, #0
 80088fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008902:	4604      	mov	r4, r0
 8008904:	6003      	str	r3, [r0, #0]
 8008906:	f04f 0900 	mov.w	r9, #0
 800890a:	07eb      	lsls	r3, r5, #31
 800890c:	d50a      	bpl.n	8008924 <__pow5mult+0x84>
 800890e:	4639      	mov	r1, r7
 8008910:	4622      	mov	r2, r4
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ff1e 	bl	8008754 <__multiply>
 8008918:	4639      	mov	r1, r7
 800891a:	4680      	mov	r8, r0
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff fdfd 	bl	800851c <_Bfree>
 8008922:	4647      	mov	r7, r8
 8008924:	106d      	asrs	r5, r5, #1
 8008926:	d00b      	beq.n	8008940 <__pow5mult+0xa0>
 8008928:	6820      	ldr	r0, [r4, #0]
 800892a:	b938      	cbnz	r0, 800893c <__pow5mult+0x9c>
 800892c:	4622      	mov	r2, r4
 800892e:	4621      	mov	r1, r4
 8008930:	4630      	mov	r0, r6
 8008932:	f7ff ff0f 	bl	8008754 <__multiply>
 8008936:	6020      	str	r0, [r4, #0]
 8008938:	f8c0 9000 	str.w	r9, [r0]
 800893c:	4604      	mov	r4, r0
 800893e:	e7e4      	b.n	800890a <__pow5mult+0x6a>
 8008940:	4638      	mov	r0, r7
 8008942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008946:	bf00      	nop
 8008948:	0800b118 	.word	0x0800b118
 800894c:	0800aebd 	.word	0x0800aebd
 8008950:	0800afc4 	.word	0x0800afc4

08008954 <__lshift>:
 8008954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008958:	460c      	mov	r4, r1
 800895a:	6849      	ldr	r1, [r1, #4]
 800895c:	6923      	ldr	r3, [r4, #16]
 800895e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008962:	68a3      	ldr	r3, [r4, #8]
 8008964:	4607      	mov	r7, r0
 8008966:	4691      	mov	r9, r2
 8008968:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800896c:	f108 0601 	add.w	r6, r8, #1
 8008970:	42b3      	cmp	r3, r6
 8008972:	db0b      	blt.n	800898c <__lshift+0x38>
 8008974:	4638      	mov	r0, r7
 8008976:	f7ff fd91 	bl	800849c <_Balloc>
 800897a:	4605      	mov	r5, r0
 800897c:	b948      	cbnz	r0, 8008992 <__lshift+0x3e>
 800897e:	4602      	mov	r2, r0
 8008980:	4b28      	ldr	r3, [pc, #160]	; (8008a24 <__lshift+0xd0>)
 8008982:	4829      	ldr	r0, [pc, #164]	; (8008a28 <__lshift+0xd4>)
 8008984:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008988:	f000 fc92 	bl	80092b0 <__assert_func>
 800898c:	3101      	adds	r1, #1
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	e7ee      	b.n	8008970 <__lshift+0x1c>
 8008992:	2300      	movs	r3, #0
 8008994:	f100 0114 	add.w	r1, r0, #20
 8008998:	f100 0210 	add.w	r2, r0, #16
 800899c:	4618      	mov	r0, r3
 800899e:	4553      	cmp	r3, sl
 80089a0:	db33      	blt.n	8008a0a <__lshift+0xb6>
 80089a2:	6920      	ldr	r0, [r4, #16]
 80089a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089a8:	f104 0314 	add.w	r3, r4, #20
 80089ac:	f019 091f 	ands.w	r9, r9, #31
 80089b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089b8:	d02b      	beq.n	8008a12 <__lshift+0xbe>
 80089ba:	f1c9 0e20 	rsb	lr, r9, #32
 80089be:	468a      	mov	sl, r1
 80089c0:	2200      	movs	r2, #0
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	fa00 f009 	lsl.w	r0, r0, r9
 80089c8:	4302      	orrs	r2, r0
 80089ca:	f84a 2b04 	str.w	r2, [sl], #4
 80089ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d2:	459c      	cmp	ip, r3
 80089d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80089d8:	d8f3      	bhi.n	80089c2 <__lshift+0x6e>
 80089da:	ebac 0304 	sub.w	r3, ip, r4
 80089de:	3b15      	subs	r3, #21
 80089e0:	f023 0303 	bic.w	r3, r3, #3
 80089e4:	3304      	adds	r3, #4
 80089e6:	f104 0015 	add.w	r0, r4, #21
 80089ea:	4584      	cmp	ip, r0
 80089ec:	bf38      	it	cc
 80089ee:	2304      	movcc	r3, #4
 80089f0:	50ca      	str	r2, [r1, r3]
 80089f2:	b10a      	cbz	r2, 80089f8 <__lshift+0xa4>
 80089f4:	f108 0602 	add.w	r6, r8, #2
 80089f8:	3e01      	subs	r6, #1
 80089fa:	4638      	mov	r0, r7
 80089fc:	612e      	str	r6, [r5, #16]
 80089fe:	4621      	mov	r1, r4
 8008a00:	f7ff fd8c 	bl	800851c <_Bfree>
 8008a04:	4628      	mov	r0, r5
 8008a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a0e:	3301      	adds	r3, #1
 8008a10:	e7c5      	b.n	800899e <__lshift+0x4a>
 8008a12:	3904      	subs	r1, #4
 8008a14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a18:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a1c:	459c      	cmp	ip, r3
 8008a1e:	d8f9      	bhi.n	8008a14 <__lshift+0xc0>
 8008a20:	e7ea      	b.n	80089f8 <__lshift+0xa4>
 8008a22:	bf00      	nop
 8008a24:	0800af33 	.word	0x0800af33
 8008a28:	0800afc4 	.word	0x0800afc4

08008a2c <__mcmp>:
 8008a2c:	b530      	push	{r4, r5, lr}
 8008a2e:	6902      	ldr	r2, [r0, #16]
 8008a30:	690c      	ldr	r4, [r1, #16]
 8008a32:	1b12      	subs	r2, r2, r4
 8008a34:	d10e      	bne.n	8008a54 <__mcmp+0x28>
 8008a36:	f100 0314 	add.w	r3, r0, #20
 8008a3a:	3114      	adds	r1, #20
 8008a3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a4c:	42a5      	cmp	r5, r4
 8008a4e:	d003      	beq.n	8008a58 <__mcmp+0x2c>
 8008a50:	d305      	bcc.n	8008a5e <__mcmp+0x32>
 8008a52:	2201      	movs	r2, #1
 8008a54:	4610      	mov	r0, r2
 8008a56:	bd30      	pop	{r4, r5, pc}
 8008a58:	4283      	cmp	r3, r0
 8008a5a:	d3f3      	bcc.n	8008a44 <__mcmp+0x18>
 8008a5c:	e7fa      	b.n	8008a54 <__mcmp+0x28>
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a62:	e7f7      	b.n	8008a54 <__mcmp+0x28>

08008a64 <__mdiff>:
 8008a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a68:	460c      	mov	r4, r1
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	4620      	mov	r0, r4
 8008a70:	4617      	mov	r7, r2
 8008a72:	f7ff ffdb 	bl	8008a2c <__mcmp>
 8008a76:	1e05      	subs	r5, r0, #0
 8008a78:	d110      	bne.n	8008a9c <__mdiff+0x38>
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff fd0d 	bl	800849c <_Balloc>
 8008a82:	b930      	cbnz	r0, 8008a92 <__mdiff+0x2e>
 8008a84:	4b39      	ldr	r3, [pc, #228]	; (8008b6c <__mdiff+0x108>)
 8008a86:	4602      	mov	r2, r0
 8008a88:	f240 2132 	movw	r1, #562	; 0x232
 8008a8c:	4838      	ldr	r0, [pc, #224]	; (8008b70 <__mdiff+0x10c>)
 8008a8e:	f000 fc0f 	bl	80092b0 <__assert_func>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	bfa4      	itt	ge
 8008a9e:	463b      	movge	r3, r7
 8008aa0:	4627      	movge	r7, r4
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	bfa6      	itte	ge
 8008aa8:	461c      	movge	r4, r3
 8008aaa:	2500      	movge	r5, #0
 8008aac:	2501      	movlt	r5, #1
 8008aae:	f7ff fcf5 	bl	800849c <_Balloc>
 8008ab2:	b920      	cbnz	r0, 8008abe <__mdiff+0x5a>
 8008ab4:	4b2d      	ldr	r3, [pc, #180]	; (8008b6c <__mdiff+0x108>)
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008abc:	e7e6      	b.n	8008a8c <__mdiff+0x28>
 8008abe:	693e      	ldr	r6, [r7, #16]
 8008ac0:	60c5      	str	r5, [r0, #12]
 8008ac2:	6925      	ldr	r5, [r4, #16]
 8008ac4:	f107 0114 	add.w	r1, r7, #20
 8008ac8:	f104 0914 	add.w	r9, r4, #20
 8008acc:	f100 0e14 	add.w	lr, r0, #20
 8008ad0:	f107 0210 	add.w	r2, r7, #16
 8008ad4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008ad8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008adc:	46f2      	mov	sl, lr
 8008ade:	2700      	movs	r7, #0
 8008ae0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ae4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ae8:	fa1f f883 	uxth.w	r8, r3
 8008aec:	fa17 f78b 	uxtah	r7, r7, fp
 8008af0:	0c1b      	lsrs	r3, r3, #16
 8008af2:	eba7 0808 	sub.w	r8, r7, r8
 8008af6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008afa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008afe:	fa1f f888 	uxth.w	r8, r8
 8008b02:	141f      	asrs	r7, r3, #16
 8008b04:	454d      	cmp	r5, r9
 8008b06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b0a:	f84a 3b04 	str.w	r3, [sl], #4
 8008b0e:	d8e7      	bhi.n	8008ae0 <__mdiff+0x7c>
 8008b10:	1b2b      	subs	r3, r5, r4
 8008b12:	3b15      	subs	r3, #21
 8008b14:	f023 0303 	bic.w	r3, r3, #3
 8008b18:	3304      	adds	r3, #4
 8008b1a:	3415      	adds	r4, #21
 8008b1c:	42a5      	cmp	r5, r4
 8008b1e:	bf38      	it	cc
 8008b20:	2304      	movcc	r3, #4
 8008b22:	4419      	add	r1, r3
 8008b24:	4473      	add	r3, lr
 8008b26:	469e      	mov	lr, r3
 8008b28:	460d      	mov	r5, r1
 8008b2a:	4565      	cmp	r5, ip
 8008b2c:	d30e      	bcc.n	8008b4c <__mdiff+0xe8>
 8008b2e:	f10c 0203 	add.w	r2, ip, #3
 8008b32:	1a52      	subs	r2, r2, r1
 8008b34:	f022 0203 	bic.w	r2, r2, #3
 8008b38:	3903      	subs	r1, #3
 8008b3a:	458c      	cmp	ip, r1
 8008b3c:	bf38      	it	cc
 8008b3e:	2200      	movcc	r2, #0
 8008b40:	441a      	add	r2, r3
 8008b42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b46:	b17b      	cbz	r3, 8008b68 <__mdiff+0x104>
 8008b48:	6106      	str	r6, [r0, #16]
 8008b4a:	e7a5      	b.n	8008a98 <__mdiff+0x34>
 8008b4c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b50:	fa17 f488 	uxtah	r4, r7, r8
 8008b54:	1422      	asrs	r2, r4, #16
 8008b56:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008b5a:	b2a4      	uxth	r4, r4
 8008b5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008b60:	f84e 4b04 	str.w	r4, [lr], #4
 8008b64:	1417      	asrs	r7, r2, #16
 8008b66:	e7e0      	b.n	8008b2a <__mdiff+0xc6>
 8008b68:	3e01      	subs	r6, #1
 8008b6a:	e7ea      	b.n	8008b42 <__mdiff+0xde>
 8008b6c:	0800af33 	.word	0x0800af33
 8008b70:	0800afc4 	.word	0x0800afc4

08008b74 <__ulp>:
 8008b74:	b082      	sub	sp, #8
 8008b76:	ed8d 0b00 	vstr	d0, [sp]
 8008b7a:	9b01      	ldr	r3, [sp, #4]
 8008b7c:	4912      	ldr	r1, [pc, #72]	; (8008bc8 <__ulp+0x54>)
 8008b7e:	4019      	ands	r1, r3
 8008b80:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008b84:	2900      	cmp	r1, #0
 8008b86:	dd05      	ble.n	8008b94 <__ulp+0x20>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	ec43 2b10 	vmov	d0, r2, r3
 8008b90:	b002      	add	sp, #8
 8008b92:	4770      	bx	lr
 8008b94:	4249      	negs	r1, r1
 8008b96:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008b9a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	da04      	bge.n	8008bb2 <__ulp+0x3e>
 8008ba8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008bac:	fa41 f300 	asr.w	r3, r1, r0
 8008bb0:	e7ec      	b.n	8008b8c <__ulp+0x18>
 8008bb2:	f1a0 0114 	sub.w	r1, r0, #20
 8008bb6:	291e      	cmp	r1, #30
 8008bb8:	bfda      	itte	le
 8008bba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008bbe:	fa20 f101 	lsrle.w	r1, r0, r1
 8008bc2:	2101      	movgt	r1, #1
 8008bc4:	460a      	mov	r2, r1
 8008bc6:	e7e1      	b.n	8008b8c <__ulp+0x18>
 8008bc8:	7ff00000 	.word	0x7ff00000

08008bcc <__b2d>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	6905      	ldr	r5, [r0, #16]
 8008bd0:	f100 0714 	add.w	r7, r0, #20
 8008bd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008bd8:	1f2e      	subs	r6, r5, #4
 8008bda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff fd52 	bl	8008688 <__hi0bits>
 8008be4:	f1c0 0320 	rsb	r3, r0, #32
 8008be8:	280a      	cmp	r0, #10
 8008bea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008c68 <__b2d+0x9c>
 8008bee:	600b      	str	r3, [r1, #0]
 8008bf0:	dc14      	bgt.n	8008c1c <__b2d+0x50>
 8008bf2:	f1c0 0e0b 	rsb	lr, r0, #11
 8008bf6:	fa24 f10e 	lsr.w	r1, r4, lr
 8008bfa:	42b7      	cmp	r7, r6
 8008bfc:	ea41 030c 	orr.w	r3, r1, ip
 8008c00:	bf34      	ite	cc
 8008c02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c06:	2100      	movcs	r1, #0
 8008c08:	3015      	adds	r0, #21
 8008c0a:	fa04 f000 	lsl.w	r0, r4, r0
 8008c0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008c12:	ea40 0201 	orr.w	r2, r0, r1
 8008c16:	ec43 2b10 	vmov	d0, r2, r3
 8008c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c1c:	42b7      	cmp	r7, r6
 8008c1e:	bf3a      	itte	cc
 8008c20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c24:	f1a5 0608 	subcc.w	r6, r5, #8
 8008c28:	2100      	movcs	r1, #0
 8008c2a:	380b      	subs	r0, #11
 8008c2c:	d017      	beq.n	8008c5e <__b2d+0x92>
 8008c2e:	f1c0 0c20 	rsb	ip, r0, #32
 8008c32:	fa04 f500 	lsl.w	r5, r4, r0
 8008c36:	42be      	cmp	r6, r7
 8008c38:	fa21 f40c 	lsr.w	r4, r1, ip
 8008c3c:	ea45 0504 	orr.w	r5, r5, r4
 8008c40:	bf8c      	ite	hi
 8008c42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008c46:	2400      	movls	r4, #0
 8008c48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008c4c:	fa01 f000 	lsl.w	r0, r1, r0
 8008c50:	fa24 f40c 	lsr.w	r4, r4, ip
 8008c54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c58:	ea40 0204 	orr.w	r2, r0, r4
 8008c5c:	e7db      	b.n	8008c16 <__b2d+0x4a>
 8008c5e:	ea44 030c 	orr.w	r3, r4, ip
 8008c62:	460a      	mov	r2, r1
 8008c64:	e7d7      	b.n	8008c16 <__b2d+0x4a>
 8008c66:	bf00      	nop
 8008c68:	3ff00000 	.word	0x3ff00000

08008c6c <__d2b>:
 8008c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c70:	4689      	mov	r9, r1
 8008c72:	2101      	movs	r1, #1
 8008c74:	ec57 6b10 	vmov	r6, r7, d0
 8008c78:	4690      	mov	r8, r2
 8008c7a:	f7ff fc0f 	bl	800849c <_Balloc>
 8008c7e:	4604      	mov	r4, r0
 8008c80:	b930      	cbnz	r0, 8008c90 <__d2b+0x24>
 8008c82:	4602      	mov	r2, r0
 8008c84:	4b25      	ldr	r3, [pc, #148]	; (8008d1c <__d2b+0xb0>)
 8008c86:	4826      	ldr	r0, [pc, #152]	; (8008d20 <__d2b+0xb4>)
 8008c88:	f240 310a 	movw	r1, #778	; 0x30a
 8008c8c:	f000 fb10 	bl	80092b0 <__assert_func>
 8008c90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c98:	bb35      	cbnz	r5, 8008ce8 <__d2b+0x7c>
 8008c9a:	2e00      	cmp	r6, #0
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	d028      	beq.n	8008cf2 <__d2b+0x86>
 8008ca0:	4668      	mov	r0, sp
 8008ca2:	9600      	str	r6, [sp, #0]
 8008ca4:	f7ff fd10 	bl	80086c8 <__lo0bits>
 8008ca8:	9900      	ldr	r1, [sp, #0]
 8008caa:	b300      	cbz	r0, 8008cee <__d2b+0x82>
 8008cac:	9a01      	ldr	r2, [sp, #4]
 8008cae:	f1c0 0320 	rsb	r3, r0, #32
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	430b      	orrs	r3, r1
 8008cb8:	40c2      	lsrs	r2, r0
 8008cba:	6163      	str	r3, [r4, #20]
 8008cbc:	9201      	str	r2, [sp, #4]
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	61a3      	str	r3, [r4, #24]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	bf14      	ite	ne
 8008cc6:	2202      	movne	r2, #2
 8008cc8:	2201      	moveq	r2, #1
 8008cca:	6122      	str	r2, [r4, #16]
 8008ccc:	b1d5      	cbz	r5, 8008d04 <__d2b+0x98>
 8008cce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cd2:	4405      	add	r5, r0
 8008cd4:	f8c9 5000 	str.w	r5, [r9]
 8008cd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cdc:	f8c8 0000 	str.w	r0, [r8]
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	b003      	add	sp, #12
 8008ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cec:	e7d5      	b.n	8008c9a <__d2b+0x2e>
 8008cee:	6161      	str	r1, [r4, #20]
 8008cf0:	e7e5      	b.n	8008cbe <__d2b+0x52>
 8008cf2:	a801      	add	r0, sp, #4
 8008cf4:	f7ff fce8 	bl	80086c8 <__lo0bits>
 8008cf8:	9b01      	ldr	r3, [sp, #4]
 8008cfa:	6163      	str	r3, [r4, #20]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	6122      	str	r2, [r4, #16]
 8008d00:	3020      	adds	r0, #32
 8008d02:	e7e3      	b.n	8008ccc <__d2b+0x60>
 8008d04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d0c:	f8c9 0000 	str.w	r0, [r9]
 8008d10:	6918      	ldr	r0, [r3, #16]
 8008d12:	f7ff fcb9 	bl	8008688 <__hi0bits>
 8008d16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d1a:	e7df      	b.n	8008cdc <__d2b+0x70>
 8008d1c:	0800af33 	.word	0x0800af33
 8008d20:	0800afc4 	.word	0x0800afc4

08008d24 <__ratio>:
 8008d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d28:	4688      	mov	r8, r1
 8008d2a:	4669      	mov	r1, sp
 8008d2c:	4681      	mov	r9, r0
 8008d2e:	f7ff ff4d 	bl	8008bcc <__b2d>
 8008d32:	a901      	add	r1, sp, #4
 8008d34:	4640      	mov	r0, r8
 8008d36:	ec55 4b10 	vmov	r4, r5, d0
 8008d3a:	f7ff ff47 	bl	8008bcc <__b2d>
 8008d3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d46:	eba3 0c02 	sub.w	ip, r3, r2
 8008d4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d4e:	1a9b      	subs	r3, r3, r2
 8008d50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d54:	ec51 0b10 	vmov	r0, r1, d0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bfd6      	itet	le
 8008d5c:	460a      	movle	r2, r1
 8008d5e:	462a      	movgt	r2, r5
 8008d60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d64:	468b      	mov	fp, r1
 8008d66:	462f      	mov	r7, r5
 8008d68:	bfd4      	ite	le
 8008d6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008d6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d72:	4620      	mov	r0, r4
 8008d74:	ee10 2a10 	vmov	r2, s0
 8008d78:	465b      	mov	r3, fp
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	f7f7 fd6e 	bl	800085c <__aeabi_ddiv>
 8008d80:	ec41 0b10 	vmov	d0, r0, r1
 8008d84:	b003      	add	sp, #12
 8008d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d8a <__copybits>:
 8008d8a:	3901      	subs	r1, #1
 8008d8c:	b570      	push	{r4, r5, r6, lr}
 8008d8e:	1149      	asrs	r1, r1, #5
 8008d90:	6914      	ldr	r4, [r2, #16]
 8008d92:	3101      	adds	r1, #1
 8008d94:	f102 0314 	add.w	r3, r2, #20
 8008d98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008da0:	1f05      	subs	r5, r0, #4
 8008da2:	42a3      	cmp	r3, r4
 8008da4:	d30c      	bcc.n	8008dc0 <__copybits+0x36>
 8008da6:	1aa3      	subs	r3, r4, r2
 8008da8:	3b11      	subs	r3, #17
 8008daa:	f023 0303 	bic.w	r3, r3, #3
 8008dae:	3211      	adds	r2, #17
 8008db0:	42a2      	cmp	r2, r4
 8008db2:	bf88      	it	hi
 8008db4:	2300      	movhi	r3, #0
 8008db6:	4418      	add	r0, r3
 8008db8:	2300      	movs	r3, #0
 8008dba:	4288      	cmp	r0, r1
 8008dbc:	d305      	bcc.n	8008dca <__copybits+0x40>
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}
 8008dc0:	f853 6b04 	ldr.w	r6, [r3], #4
 8008dc4:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dc8:	e7eb      	b.n	8008da2 <__copybits+0x18>
 8008dca:	f840 3b04 	str.w	r3, [r0], #4
 8008dce:	e7f4      	b.n	8008dba <__copybits+0x30>

08008dd0 <__any_on>:
 8008dd0:	f100 0214 	add.w	r2, r0, #20
 8008dd4:	6900      	ldr	r0, [r0, #16]
 8008dd6:	114b      	asrs	r3, r1, #5
 8008dd8:	4298      	cmp	r0, r3
 8008dda:	b510      	push	{r4, lr}
 8008ddc:	db11      	blt.n	8008e02 <__any_on+0x32>
 8008dde:	dd0a      	ble.n	8008df6 <__any_on+0x26>
 8008de0:	f011 011f 	ands.w	r1, r1, #31
 8008de4:	d007      	beq.n	8008df6 <__any_on+0x26>
 8008de6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008dea:	fa24 f001 	lsr.w	r0, r4, r1
 8008dee:	fa00 f101 	lsl.w	r1, r0, r1
 8008df2:	428c      	cmp	r4, r1
 8008df4:	d10b      	bne.n	8008e0e <__any_on+0x3e>
 8008df6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d803      	bhi.n	8008e06 <__any_on+0x36>
 8008dfe:	2000      	movs	r0, #0
 8008e00:	bd10      	pop	{r4, pc}
 8008e02:	4603      	mov	r3, r0
 8008e04:	e7f7      	b.n	8008df6 <__any_on+0x26>
 8008e06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e0a:	2900      	cmp	r1, #0
 8008e0c:	d0f5      	beq.n	8008dfa <__any_on+0x2a>
 8008e0e:	2001      	movs	r0, #1
 8008e10:	e7f6      	b.n	8008e00 <__any_on+0x30>

08008e12 <_calloc_r>:
 8008e12:	b513      	push	{r0, r1, r4, lr}
 8008e14:	434a      	muls	r2, r1
 8008e16:	4611      	mov	r1, r2
 8008e18:	9201      	str	r2, [sp, #4]
 8008e1a:	f000 f859 	bl	8008ed0 <_malloc_r>
 8008e1e:	4604      	mov	r4, r0
 8008e20:	b118      	cbz	r0, 8008e2a <_calloc_r+0x18>
 8008e22:	9a01      	ldr	r2, [sp, #4]
 8008e24:	2100      	movs	r1, #0
 8008e26:	f7fc fe6d 	bl	8005b04 <memset>
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	b002      	add	sp, #8
 8008e2e:	bd10      	pop	{r4, pc}

08008e30 <_free_r>:
 8008e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e32:	2900      	cmp	r1, #0
 8008e34:	d048      	beq.n	8008ec8 <_free_r+0x98>
 8008e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e3a:	9001      	str	r0, [sp, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e42:	bfb8      	it	lt
 8008e44:	18e4      	addlt	r4, r4, r3
 8008e46:	f000 fa7d 	bl	8009344 <__malloc_lock>
 8008e4a:	4a20      	ldr	r2, [pc, #128]	; (8008ecc <_free_r+0x9c>)
 8008e4c:	9801      	ldr	r0, [sp, #4]
 8008e4e:	6813      	ldr	r3, [r2, #0]
 8008e50:	4615      	mov	r5, r2
 8008e52:	b933      	cbnz	r3, 8008e62 <_free_r+0x32>
 8008e54:	6063      	str	r3, [r4, #4]
 8008e56:	6014      	str	r4, [r2, #0]
 8008e58:	b003      	add	sp, #12
 8008e5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e5e:	f000 ba77 	b.w	8009350 <__malloc_unlock>
 8008e62:	42a3      	cmp	r3, r4
 8008e64:	d90b      	bls.n	8008e7e <_free_r+0x4e>
 8008e66:	6821      	ldr	r1, [r4, #0]
 8008e68:	1862      	adds	r2, r4, r1
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	bf04      	itt	eq
 8008e6e:	681a      	ldreq	r2, [r3, #0]
 8008e70:	685b      	ldreq	r3, [r3, #4]
 8008e72:	6063      	str	r3, [r4, #4]
 8008e74:	bf04      	itt	eq
 8008e76:	1852      	addeq	r2, r2, r1
 8008e78:	6022      	streq	r2, [r4, #0]
 8008e7a:	602c      	str	r4, [r5, #0]
 8008e7c:	e7ec      	b.n	8008e58 <_free_r+0x28>
 8008e7e:	461a      	mov	r2, r3
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	b10b      	cbz	r3, 8008e88 <_free_r+0x58>
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	d9fa      	bls.n	8008e7e <_free_r+0x4e>
 8008e88:	6811      	ldr	r1, [r2, #0]
 8008e8a:	1855      	adds	r5, r2, r1
 8008e8c:	42a5      	cmp	r5, r4
 8008e8e:	d10b      	bne.n	8008ea8 <_free_r+0x78>
 8008e90:	6824      	ldr	r4, [r4, #0]
 8008e92:	4421      	add	r1, r4
 8008e94:	1854      	adds	r4, r2, r1
 8008e96:	42a3      	cmp	r3, r4
 8008e98:	6011      	str	r1, [r2, #0]
 8008e9a:	d1dd      	bne.n	8008e58 <_free_r+0x28>
 8008e9c:	681c      	ldr	r4, [r3, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	6053      	str	r3, [r2, #4]
 8008ea2:	4421      	add	r1, r4
 8008ea4:	6011      	str	r1, [r2, #0]
 8008ea6:	e7d7      	b.n	8008e58 <_free_r+0x28>
 8008ea8:	d902      	bls.n	8008eb0 <_free_r+0x80>
 8008eaa:	230c      	movs	r3, #12
 8008eac:	6003      	str	r3, [r0, #0]
 8008eae:	e7d3      	b.n	8008e58 <_free_r+0x28>
 8008eb0:	6825      	ldr	r5, [r4, #0]
 8008eb2:	1961      	adds	r1, r4, r5
 8008eb4:	428b      	cmp	r3, r1
 8008eb6:	bf04      	itt	eq
 8008eb8:	6819      	ldreq	r1, [r3, #0]
 8008eba:	685b      	ldreq	r3, [r3, #4]
 8008ebc:	6063      	str	r3, [r4, #4]
 8008ebe:	bf04      	itt	eq
 8008ec0:	1949      	addeq	r1, r1, r5
 8008ec2:	6021      	streq	r1, [r4, #0]
 8008ec4:	6054      	str	r4, [r2, #4]
 8008ec6:	e7c7      	b.n	8008e58 <_free_r+0x28>
 8008ec8:	b003      	add	sp, #12
 8008eca:	bd30      	pop	{r4, r5, pc}
 8008ecc:	200006d0 	.word	0x200006d0

08008ed0 <_malloc_r>:
 8008ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed2:	1ccd      	adds	r5, r1, #3
 8008ed4:	f025 0503 	bic.w	r5, r5, #3
 8008ed8:	3508      	adds	r5, #8
 8008eda:	2d0c      	cmp	r5, #12
 8008edc:	bf38      	it	cc
 8008ede:	250c      	movcc	r5, #12
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	db01      	blt.n	8008eea <_malloc_r+0x1a>
 8008ee6:	42a9      	cmp	r1, r5
 8008ee8:	d903      	bls.n	8008ef2 <_malloc_r+0x22>
 8008eea:	230c      	movs	r3, #12
 8008eec:	6033      	str	r3, [r6, #0]
 8008eee:	2000      	movs	r0, #0
 8008ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef2:	f000 fa27 	bl	8009344 <__malloc_lock>
 8008ef6:	4921      	ldr	r1, [pc, #132]	; (8008f7c <_malloc_r+0xac>)
 8008ef8:	680a      	ldr	r2, [r1, #0]
 8008efa:	4614      	mov	r4, r2
 8008efc:	b99c      	cbnz	r4, 8008f26 <_malloc_r+0x56>
 8008efe:	4f20      	ldr	r7, [pc, #128]	; (8008f80 <_malloc_r+0xb0>)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	b923      	cbnz	r3, 8008f0e <_malloc_r+0x3e>
 8008f04:	4621      	mov	r1, r4
 8008f06:	4630      	mov	r0, r6
 8008f08:	f000 f9a2 	bl	8009250 <_sbrk_r>
 8008f0c:	6038      	str	r0, [r7, #0]
 8008f0e:	4629      	mov	r1, r5
 8008f10:	4630      	mov	r0, r6
 8008f12:	f000 f99d 	bl	8009250 <_sbrk_r>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	d123      	bne.n	8008f62 <_malloc_r+0x92>
 8008f1a:	230c      	movs	r3, #12
 8008f1c:	6033      	str	r3, [r6, #0]
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f000 fa16 	bl	8009350 <__malloc_unlock>
 8008f24:	e7e3      	b.n	8008eee <_malloc_r+0x1e>
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	1b5b      	subs	r3, r3, r5
 8008f2a:	d417      	bmi.n	8008f5c <_malloc_r+0x8c>
 8008f2c:	2b0b      	cmp	r3, #11
 8008f2e:	d903      	bls.n	8008f38 <_malloc_r+0x68>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	441c      	add	r4, r3
 8008f34:	6025      	str	r5, [r4, #0]
 8008f36:	e004      	b.n	8008f42 <_malloc_r+0x72>
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	42a2      	cmp	r2, r4
 8008f3c:	bf0c      	ite	eq
 8008f3e:	600b      	streq	r3, [r1, #0]
 8008f40:	6053      	strne	r3, [r2, #4]
 8008f42:	4630      	mov	r0, r6
 8008f44:	f000 fa04 	bl	8009350 <__malloc_unlock>
 8008f48:	f104 000b 	add.w	r0, r4, #11
 8008f4c:	1d23      	adds	r3, r4, #4
 8008f4e:	f020 0007 	bic.w	r0, r0, #7
 8008f52:	1ac2      	subs	r2, r0, r3
 8008f54:	d0cc      	beq.n	8008ef0 <_malloc_r+0x20>
 8008f56:	1a1b      	subs	r3, r3, r0
 8008f58:	50a3      	str	r3, [r4, r2]
 8008f5a:	e7c9      	b.n	8008ef0 <_malloc_r+0x20>
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	6864      	ldr	r4, [r4, #4]
 8008f60:	e7cc      	b.n	8008efc <_malloc_r+0x2c>
 8008f62:	1cc4      	adds	r4, r0, #3
 8008f64:	f024 0403 	bic.w	r4, r4, #3
 8008f68:	42a0      	cmp	r0, r4
 8008f6a:	d0e3      	beq.n	8008f34 <_malloc_r+0x64>
 8008f6c:	1a21      	subs	r1, r4, r0
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f000 f96e 	bl	8009250 <_sbrk_r>
 8008f74:	3001      	adds	r0, #1
 8008f76:	d1dd      	bne.n	8008f34 <_malloc_r+0x64>
 8008f78:	e7cf      	b.n	8008f1a <_malloc_r+0x4a>
 8008f7a:	bf00      	nop
 8008f7c:	200006d0 	.word	0x200006d0
 8008f80:	200006d4 	.word	0x200006d4

08008f84 <__ssputs_r>:
 8008f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	688e      	ldr	r6, [r1, #8]
 8008f8a:	429e      	cmp	r6, r3
 8008f8c:	4682      	mov	sl, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	4690      	mov	r8, r2
 8008f92:	461f      	mov	r7, r3
 8008f94:	d838      	bhi.n	8009008 <__ssputs_r+0x84>
 8008f96:	898a      	ldrh	r2, [r1, #12]
 8008f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f9c:	d032      	beq.n	8009004 <__ssputs_r+0x80>
 8008f9e:	6825      	ldr	r5, [r4, #0]
 8008fa0:	6909      	ldr	r1, [r1, #16]
 8008fa2:	eba5 0901 	sub.w	r9, r5, r1
 8008fa6:	6965      	ldr	r5, [r4, #20]
 8008fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	444b      	add	r3, r9
 8008fb4:	106d      	asrs	r5, r5, #1
 8008fb6:	429d      	cmp	r5, r3
 8008fb8:	bf38      	it	cc
 8008fba:	461d      	movcc	r5, r3
 8008fbc:	0553      	lsls	r3, r2, #21
 8008fbe:	d531      	bpl.n	8009024 <__ssputs_r+0xa0>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	f7ff ff85 	bl	8008ed0 <_malloc_r>
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	b950      	cbnz	r0, 8008fe0 <__ssputs_r+0x5c>
 8008fca:	230c      	movs	r3, #12
 8008fcc:	f8ca 3000 	str.w	r3, [sl]
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe0:	6921      	ldr	r1, [r4, #16]
 8008fe2:	464a      	mov	r2, r9
 8008fe4:	f7fc fd80 	bl	8005ae8 <memcpy>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	6126      	str	r6, [r4, #16]
 8008ff6:	6165      	str	r5, [r4, #20]
 8008ff8:	444e      	add	r6, r9
 8008ffa:	eba5 0509 	sub.w	r5, r5, r9
 8008ffe:	6026      	str	r6, [r4, #0]
 8009000:	60a5      	str	r5, [r4, #8]
 8009002:	463e      	mov	r6, r7
 8009004:	42be      	cmp	r6, r7
 8009006:	d900      	bls.n	800900a <__ssputs_r+0x86>
 8009008:	463e      	mov	r6, r7
 800900a:	4632      	mov	r2, r6
 800900c:	6820      	ldr	r0, [r4, #0]
 800900e:	4641      	mov	r1, r8
 8009010:	f000 f97e 	bl	8009310 <memmove>
 8009014:	68a3      	ldr	r3, [r4, #8]
 8009016:	6822      	ldr	r2, [r4, #0]
 8009018:	1b9b      	subs	r3, r3, r6
 800901a:	4432      	add	r2, r6
 800901c:	60a3      	str	r3, [r4, #8]
 800901e:	6022      	str	r2, [r4, #0]
 8009020:	2000      	movs	r0, #0
 8009022:	e7db      	b.n	8008fdc <__ssputs_r+0x58>
 8009024:	462a      	mov	r2, r5
 8009026:	f000 f999 	bl	800935c <_realloc_r>
 800902a:	4606      	mov	r6, r0
 800902c:	2800      	cmp	r0, #0
 800902e:	d1e1      	bne.n	8008ff4 <__ssputs_r+0x70>
 8009030:	6921      	ldr	r1, [r4, #16]
 8009032:	4650      	mov	r0, sl
 8009034:	f7ff fefc 	bl	8008e30 <_free_r>
 8009038:	e7c7      	b.n	8008fca <__ssputs_r+0x46>
	...

0800903c <_svfiprintf_r>:
 800903c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009040:	4698      	mov	r8, r3
 8009042:	898b      	ldrh	r3, [r1, #12]
 8009044:	061b      	lsls	r3, r3, #24
 8009046:	b09d      	sub	sp, #116	; 0x74
 8009048:	4607      	mov	r7, r0
 800904a:	460d      	mov	r5, r1
 800904c:	4614      	mov	r4, r2
 800904e:	d50e      	bpl.n	800906e <_svfiprintf_r+0x32>
 8009050:	690b      	ldr	r3, [r1, #16]
 8009052:	b963      	cbnz	r3, 800906e <_svfiprintf_r+0x32>
 8009054:	2140      	movs	r1, #64	; 0x40
 8009056:	f7ff ff3b 	bl	8008ed0 <_malloc_r>
 800905a:	6028      	str	r0, [r5, #0]
 800905c:	6128      	str	r0, [r5, #16]
 800905e:	b920      	cbnz	r0, 800906a <_svfiprintf_r+0x2e>
 8009060:	230c      	movs	r3, #12
 8009062:	603b      	str	r3, [r7, #0]
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	e0d1      	b.n	800920e <_svfiprintf_r+0x1d2>
 800906a:	2340      	movs	r3, #64	; 0x40
 800906c:	616b      	str	r3, [r5, #20]
 800906e:	2300      	movs	r3, #0
 8009070:	9309      	str	r3, [sp, #36]	; 0x24
 8009072:	2320      	movs	r3, #32
 8009074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009078:	f8cd 800c 	str.w	r8, [sp, #12]
 800907c:	2330      	movs	r3, #48	; 0x30
 800907e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009228 <_svfiprintf_r+0x1ec>
 8009082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009086:	f04f 0901 	mov.w	r9, #1
 800908a:	4623      	mov	r3, r4
 800908c:	469a      	mov	sl, r3
 800908e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009092:	b10a      	cbz	r2, 8009098 <_svfiprintf_r+0x5c>
 8009094:	2a25      	cmp	r2, #37	; 0x25
 8009096:	d1f9      	bne.n	800908c <_svfiprintf_r+0x50>
 8009098:	ebba 0b04 	subs.w	fp, sl, r4
 800909c:	d00b      	beq.n	80090b6 <_svfiprintf_r+0x7a>
 800909e:	465b      	mov	r3, fp
 80090a0:	4622      	mov	r2, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	4638      	mov	r0, r7
 80090a6:	f7ff ff6d 	bl	8008f84 <__ssputs_r>
 80090aa:	3001      	adds	r0, #1
 80090ac:	f000 80aa 	beq.w	8009204 <_svfiprintf_r+0x1c8>
 80090b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b2:	445a      	add	r2, fp
 80090b4:	9209      	str	r2, [sp, #36]	; 0x24
 80090b6:	f89a 3000 	ldrb.w	r3, [sl]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 80a2 	beq.w	8009204 <_svfiprintf_r+0x1c8>
 80090c0:	2300      	movs	r3, #0
 80090c2:	f04f 32ff 	mov.w	r2, #4294967295
 80090c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ca:	f10a 0a01 	add.w	sl, sl, #1
 80090ce:	9304      	str	r3, [sp, #16]
 80090d0:	9307      	str	r3, [sp, #28]
 80090d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090d6:	931a      	str	r3, [sp, #104]	; 0x68
 80090d8:	4654      	mov	r4, sl
 80090da:	2205      	movs	r2, #5
 80090dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e0:	4851      	ldr	r0, [pc, #324]	; (8009228 <_svfiprintf_r+0x1ec>)
 80090e2:	f7f7 f885 	bl	80001f0 <memchr>
 80090e6:	9a04      	ldr	r2, [sp, #16]
 80090e8:	b9d8      	cbnz	r0, 8009122 <_svfiprintf_r+0xe6>
 80090ea:	06d0      	lsls	r0, r2, #27
 80090ec:	bf44      	itt	mi
 80090ee:	2320      	movmi	r3, #32
 80090f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f4:	0711      	lsls	r1, r2, #28
 80090f6:	bf44      	itt	mi
 80090f8:	232b      	movmi	r3, #43	; 0x2b
 80090fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009102:	2b2a      	cmp	r3, #42	; 0x2a
 8009104:	d015      	beq.n	8009132 <_svfiprintf_r+0xf6>
 8009106:	9a07      	ldr	r2, [sp, #28]
 8009108:	4654      	mov	r4, sl
 800910a:	2000      	movs	r0, #0
 800910c:	f04f 0c0a 	mov.w	ip, #10
 8009110:	4621      	mov	r1, r4
 8009112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009116:	3b30      	subs	r3, #48	; 0x30
 8009118:	2b09      	cmp	r3, #9
 800911a:	d94e      	bls.n	80091ba <_svfiprintf_r+0x17e>
 800911c:	b1b0      	cbz	r0, 800914c <_svfiprintf_r+0x110>
 800911e:	9207      	str	r2, [sp, #28]
 8009120:	e014      	b.n	800914c <_svfiprintf_r+0x110>
 8009122:	eba0 0308 	sub.w	r3, r0, r8
 8009126:	fa09 f303 	lsl.w	r3, r9, r3
 800912a:	4313      	orrs	r3, r2
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	46a2      	mov	sl, r4
 8009130:	e7d2      	b.n	80090d8 <_svfiprintf_r+0x9c>
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	1d19      	adds	r1, r3, #4
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	9103      	str	r1, [sp, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	bfbb      	ittet	lt
 800913e:	425b      	neglt	r3, r3
 8009140:	f042 0202 	orrlt.w	r2, r2, #2
 8009144:	9307      	strge	r3, [sp, #28]
 8009146:	9307      	strlt	r3, [sp, #28]
 8009148:	bfb8      	it	lt
 800914a:	9204      	strlt	r2, [sp, #16]
 800914c:	7823      	ldrb	r3, [r4, #0]
 800914e:	2b2e      	cmp	r3, #46	; 0x2e
 8009150:	d10c      	bne.n	800916c <_svfiprintf_r+0x130>
 8009152:	7863      	ldrb	r3, [r4, #1]
 8009154:	2b2a      	cmp	r3, #42	; 0x2a
 8009156:	d135      	bne.n	80091c4 <_svfiprintf_r+0x188>
 8009158:	9b03      	ldr	r3, [sp, #12]
 800915a:	1d1a      	adds	r2, r3, #4
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	9203      	str	r2, [sp, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfb8      	it	lt
 8009164:	f04f 33ff 	movlt.w	r3, #4294967295
 8009168:	3402      	adds	r4, #2
 800916a:	9305      	str	r3, [sp, #20]
 800916c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009238 <_svfiprintf_r+0x1fc>
 8009170:	7821      	ldrb	r1, [r4, #0]
 8009172:	2203      	movs	r2, #3
 8009174:	4650      	mov	r0, sl
 8009176:	f7f7 f83b 	bl	80001f0 <memchr>
 800917a:	b140      	cbz	r0, 800918e <_svfiprintf_r+0x152>
 800917c:	2340      	movs	r3, #64	; 0x40
 800917e:	eba0 000a 	sub.w	r0, r0, sl
 8009182:	fa03 f000 	lsl.w	r0, r3, r0
 8009186:	9b04      	ldr	r3, [sp, #16]
 8009188:	4303      	orrs	r3, r0
 800918a:	3401      	adds	r4, #1
 800918c:	9304      	str	r3, [sp, #16]
 800918e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009192:	4826      	ldr	r0, [pc, #152]	; (800922c <_svfiprintf_r+0x1f0>)
 8009194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009198:	2206      	movs	r2, #6
 800919a:	f7f7 f829 	bl	80001f0 <memchr>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d038      	beq.n	8009214 <_svfiprintf_r+0x1d8>
 80091a2:	4b23      	ldr	r3, [pc, #140]	; (8009230 <_svfiprintf_r+0x1f4>)
 80091a4:	bb1b      	cbnz	r3, 80091ee <_svfiprintf_r+0x1b2>
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	3307      	adds	r3, #7
 80091aa:	f023 0307 	bic.w	r3, r3, #7
 80091ae:	3308      	adds	r3, #8
 80091b0:	9303      	str	r3, [sp, #12]
 80091b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b4:	4433      	add	r3, r6
 80091b6:	9309      	str	r3, [sp, #36]	; 0x24
 80091b8:	e767      	b.n	800908a <_svfiprintf_r+0x4e>
 80091ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80091be:	460c      	mov	r4, r1
 80091c0:	2001      	movs	r0, #1
 80091c2:	e7a5      	b.n	8009110 <_svfiprintf_r+0xd4>
 80091c4:	2300      	movs	r3, #0
 80091c6:	3401      	adds	r4, #1
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	4619      	mov	r1, r3
 80091cc:	f04f 0c0a 	mov.w	ip, #10
 80091d0:	4620      	mov	r0, r4
 80091d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d6:	3a30      	subs	r2, #48	; 0x30
 80091d8:	2a09      	cmp	r2, #9
 80091da:	d903      	bls.n	80091e4 <_svfiprintf_r+0x1a8>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0c5      	beq.n	800916c <_svfiprintf_r+0x130>
 80091e0:	9105      	str	r1, [sp, #20]
 80091e2:	e7c3      	b.n	800916c <_svfiprintf_r+0x130>
 80091e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80091e8:	4604      	mov	r4, r0
 80091ea:	2301      	movs	r3, #1
 80091ec:	e7f0      	b.n	80091d0 <_svfiprintf_r+0x194>
 80091ee:	ab03      	add	r3, sp, #12
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	462a      	mov	r2, r5
 80091f4:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <_svfiprintf_r+0x1f8>)
 80091f6:	a904      	add	r1, sp, #16
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7fc fd2b 	bl	8005c54 <_printf_float>
 80091fe:	1c42      	adds	r2, r0, #1
 8009200:	4606      	mov	r6, r0
 8009202:	d1d6      	bne.n	80091b2 <_svfiprintf_r+0x176>
 8009204:	89ab      	ldrh	r3, [r5, #12]
 8009206:	065b      	lsls	r3, r3, #25
 8009208:	f53f af2c 	bmi.w	8009064 <_svfiprintf_r+0x28>
 800920c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800920e:	b01d      	add	sp, #116	; 0x74
 8009210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009214:	ab03      	add	r3, sp, #12
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	462a      	mov	r2, r5
 800921a:	4b06      	ldr	r3, [pc, #24]	; (8009234 <_svfiprintf_r+0x1f8>)
 800921c:	a904      	add	r1, sp, #16
 800921e:	4638      	mov	r0, r7
 8009220:	f7fc ffbc 	bl	800619c <_printf_i>
 8009224:	e7eb      	b.n	80091fe <_svfiprintf_r+0x1c2>
 8009226:	bf00      	nop
 8009228:	0800b124 	.word	0x0800b124
 800922c:	0800b12e 	.word	0x0800b12e
 8009230:	08005c55 	.word	0x08005c55
 8009234:	08008f85 	.word	0x08008f85
 8009238:	0800b12a 	.word	0x0800b12a
 800923c:	00000000 	.word	0x00000000

08009240 <nan>:
 8009240:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009248 <nan+0x8>
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	00000000 	.word	0x00000000
 800924c:	7ff80000 	.word	0x7ff80000

08009250 <_sbrk_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d06      	ldr	r5, [pc, #24]	; (800926c <_sbrk_r+0x1c>)
 8009254:	2300      	movs	r3, #0
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	f7f9 fec6 	bl	8002fec <_sbrk>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_sbrk_r+0x1a>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_sbrk_r+0x1a>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	20000864 	.word	0x20000864

08009270 <strncmp>:
 8009270:	b510      	push	{r4, lr}
 8009272:	b16a      	cbz	r2, 8009290 <strncmp+0x20>
 8009274:	3901      	subs	r1, #1
 8009276:	1884      	adds	r4, r0, r2
 8009278:	f810 3b01 	ldrb.w	r3, [r0], #1
 800927c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009280:	4293      	cmp	r3, r2
 8009282:	d103      	bne.n	800928c <strncmp+0x1c>
 8009284:	42a0      	cmp	r0, r4
 8009286:	d001      	beq.n	800928c <strncmp+0x1c>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1f5      	bne.n	8009278 <strncmp+0x8>
 800928c:	1a98      	subs	r0, r3, r2
 800928e:	bd10      	pop	{r4, pc}
 8009290:	4610      	mov	r0, r2
 8009292:	e7fc      	b.n	800928e <strncmp+0x1e>

08009294 <__ascii_wctomb>:
 8009294:	b149      	cbz	r1, 80092aa <__ascii_wctomb+0x16>
 8009296:	2aff      	cmp	r2, #255	; 0xff
 8009298:	bf85      	ittet	hi
 800929a:	238a      	movhi	r3, #138	; 0x8a
 800929c:	6003      	strhi	r3, [r0, #0]
 800929e:	700a      	strbls	r2, [r1, #0]
 80092a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80092a4:	bf98      	it	ls
 80092a6:	2001      	movls	r0, #1
 80092a8:	4770      	bx	lr
 80092aa:	4608      	mov	r0, r1
 80092ac:	4770      	bx	lr
	...

080092b0 <__assert_func>:
 80092b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092b2:	4614      	mov	r4, r2
 80092b4:	461a      	mov	r2, r3
 80092b6:	4b09      	ldr	r3, [pc, #36]	; (80092dc <__assert_func+0x2c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4605      	mov	r5, r0
 80092bc:	68d8      	ldr	r0, [r3, #12]
 80092be:	b14c      	cbz	r4, 80092d4 <__assert_func+0x24>
 80092c0:	4b07      	ldr	r3, [pc, #28]	; (80092e0 <__assert_func+0x30>)
 80092c2:	9100      	str	r1, [sp, #0]
 80092c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092c8:	4906      	ldr	r1, [pc, #24]	; (80092e4 <__assert_func+0x34>)
 80092ca:	462b      	mov	r3, r5
 80092cc:	f000 f80e 	bl	80092ec <fiprintf>
 80092d0:	f000 fa84 	bl	80097dc <abort>
 80092d4:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <__assert_func+0x38>)
 80092d6:	461c      	mov	r4, r3
 80092d8:	e7f3      	b.n	80092c2 <__assert_func+0x12>
 80092da:	bf00      	nop
 80092dc:	2000001c 	.word	0x2000001c
 80092e0:	0800b135 	.word	0x0800b135
 80092e4:	0800b142 	.word	0x0800b142
 80092e8:	0800b170 	.word	0x0800b170

080092ec <fiprintf>:
 80092ec:	b40e      	push	{r1, r2, r3}
 80092ee:	b503      	push	{r0, r1, lr}
 80092f0:	4601      	mov	r1, r0
 80092f2:	ab03      	add	r3, sp, #12
 80092f4:	4805      	ldr	r0, [pc, #20]	; (800930c <fiprintf+0x20>)
 80092f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fa:	6800      	ldr	r0, [r0, #0]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	f000 f87d 	bl	80093fc <_vfiprintf_r>
 8009302:	b002      	add	sp, #8
 8009304:	f85d eb04 	ldr.w	lr, [sp], #4
 8009308:	b003      	add	sp, #12
 800930a:	4770      	bx	lr
 800930c:	2000001c 	.word	0x2000001c

08009310 <memmove>:
 8009310:	4288      	cmp	r0, r1
 8009312:	b510      	push	{r4, lr}
 8009314:	eb01 0402 	add.w	r4, r1, r2
 8009318:	d902      	bls.n	8009320 <memmove+0x10>
 800931a:	4284      	cmp	r4, r0
 800931c:	4623      	mov	r3, r4
 800931e:	d807      	bhi.n	8009330 <memmove+0x20>
 8009320:	1e43      	subs	r3, r0, #1
 8009322:	42a1      	cmp	r1, r4
 8009324:	d008      	beq.n	8009338 <memmove+0x28>
 8009326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800932a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800932e:	e7f8      	b.n	8009322 <memmove+0x12>
 8009330:	4402      	add	r2, r0
 8009332:	4601      	mov	r1, r0
 8009334:	428a      	cmp	r2, r1
 8009336:	d100      	bne.n	800933a <memmove+0x2a>
 8009338:	bd10      	pop	{r4, pc}
 800933a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800933e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009342:	e7f7      	b.n	8009334 <memmove+0x24>

08009344 <__malloc_lock>:
 8009344:	4801      	ldr	r0, [pc, #4]	; (800934c <__malloc_lock+0x8>)
 8009346:	f000 bc09 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 800934a:	bf00      	nop
 800934c:	2000086c 	.word	0x2000086c

08009350 <__malloc_unlock>:
 8009350:	4801      	ldr	r0, [pc, #4]	; (8009358 <__malloc_unlock+0x8>)
 8009352:	f000 bc04 	b.w	8009b5e <__retarget_lock_release_recursive>
 8009356:	bf00      	nop
 8009358:	2000086c 	.word	0x2000086c

0800935c <_realloc_r>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	4607      	mov	r7, r0
 8009360:	4614      	mov	r4, r2
 8009362:	460e      	mov	r6, r1
 8009364:	b921      	cbnz	r1, 8009370 <_realloc_r+0x14>
 8009366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800936a:	4611      	mov	r1, r2
 800936c:	f7ff bdb0 	b.w	8008ed0 <_malloc_r>
 8009370:	b922      	cbnz	r2, 800937c <_realloc_r+0x20>
 8009372:	f7ff fd5d 	bl	8008e30 <_free_r>
 8009376:	4625      	mov	r5, r4
 8009378:	4628      	mov	r0, r5
 800937a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800937c:	f000 fc54 	bl	8009c28 <_malloc_usable_size_r>
 8009380:	42a0      	cmp	r0, r4
 8009382:	d20f      	bcs.n	80093a4 <_realloc_r+0x48>
 8009384:	4621      	mov	r1, r4
 8009386:	4638      	mov	r0, r7
 8009388:	f7ff fda2 	bl	8008ed0 <_malloc_r>
 800938c:	4605      	mov	r5, r0
 800938e:	2800      	cmp	r0, #0
 8009390:	d0f2      	beq.n	8009378 <_realloc_r+0x1c>
 8009392:	4631      	mov	r1, r6
 8009394:	4622      	mov	r2, r4
 8009396:	f7fc fba7 	bl	8005ae8 <memcpy>
 800939a:	4631      	mov	r1, r6
 800939c:	4638      	mov	r0, r7
 800939e:	f7ff fd47 	bl	8008e30 <_free_r>
 80093a2:	e7e9      	b.n	8009378 <_realloc_r+0x1c>
 80093a4:	4635      	mov	r5, r6
 80093a6:	e7e7      	b.n	8009378 <_realloc_r+0x1c>

080093a8 <__sfputc_r>:
 80093a8:	6893      	ldr	r3, [r2, #8]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	b410      	push	{r4}
 80093b0:	6093      	str	r3, [r2, #8]
 80093b2:	da08      	bge.n	80093c6 <__sfputc_r+0x1e>
 80093b4:	6994      	ldr	r4, [r2, #24]
 80093b6:	42a3      	cmp	r3, r4
 80093b8:	db01      	blt.n	80093be <__sfputc_r+0x16>
 80093ba:	290a      	cmp	r1, #10
 80093bc:	d103      	bne.n	80093c6 <__sfputc_r+0x1e>
 80093be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093c2:	f000 b94b 	b.w	800965c <__swbuf_r>
 80093c6:	6813      	ldr	r3, [r2, #0]
 80093c8:	1c58      	adds	r0, r3, #1
 80093ca:	6010      	str	r0, [r2, #0]
 80093cc:	7019      	strb	r1, [r3, #0]
 80093ce:	4608      	mov	r0, r1
 80093d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <__sfputs_r>:
 80093d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d8:	4606      	mov	r6, r0
 80093da:	460f      	mov	r7, r1
 80093dc:	4614      	mov	r4, r2
 80093de:	18d5      	adds	r5, r2, r3
 80093e0:	42ac      	cmp	r4, r5
 80093e2:	d101      	bne.n	80093e8 <__sfputs_r+0x12>
 80093e4:	2000      	movs	r0, #0
 80093e6:	e007      	b.n	80093f8 <__sfputs_r+0x22>
 80093e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ec:	463a      	mov	r2, r7
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7ff ffda 	bl	80093a8 <__sfputc_r>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d1f3      	bne.n	80093e0 <__sfputs_r+0xa>
 80093f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093fc <_vfiprintf_r>:
 80093fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	460d      	mov	r5, r1
 8009402:	b09d      	sub	sp, #116	; 0x74
 8009404:	4614      	mov	r4, r2
 8009406:	4698      	mov	r8, r3
 8009408:	4606      	mov	r6, r0
 800940a:	b118      	cbz	r0, 8009414 <_vfiprintf_r+0x18>
 800940c:	6983      	ldr	r3, [r0, #24]
 800940e:	b90b      	cbnz	r3, 8009414 <_vfiprintf_r+0x18>
 8009410:	f000 fb06 	bl	8009a20 <__sinit>
 8009414:	4b89      	ldr	r3, [pc, #548]	; (800963c <_vfiprintf_r+0x240>)
 8009416:	429d      	cmp	r5, r3
 8009418:	d11b      	bne.n	8009452 <_vfiprintf_r+0x56>
 800941a:	6875      	ldr	r5, [r6, #4]
 800941c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800941e:	07d9      	lsls	r1, r3, #31
 8009420:	d405      	bmi.n	800942e <_vfiprintf_r+0x32>
 8009422:	89ab      	ldrh	r3, [r5, #12]
 8009424:	059a      	lsls	r2, r3, #22
 8009426:	d402      	bmi.n	800942e <_vfiprintf_r+0x32>
 8009428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800942a:	f000 fb97 	bl	8009b5c <__retarget_lock_acquire_recursive>
 800942e:	89ab      	ldrh	r3, [r5, #12]
 8009430:	071b      	lsls	r3, r3, #28
 8009432:	d501      	bpl.n	8009438 <_vfiprintf_r+0x3c>
 8009434:	692b      	ldr	r3, [r5, #16]
 8009436:	b9eb      	cbnz	r3, 8009474 <_vfiprintf_r+0x78>
 8009438:	4629      	mov	r1, r5
 800943a:	4630      	mov	r0, r6
 800943c:	f000 f960 	bl	8009700 <__swsetup_r>
 8009440:	b1c0      	cbz	r0, 8009474 <_vfiprintf_r+0x78>
 8009442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009444:	07dc      	lsls	r4, r3, #31
 8009446:	d50e      	bpl.n	8009466 <_vfiprintf_r+0x6a>
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	b01d      	add	sp, #116	; 0x74
 800944e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009452:	4b7b      	ldr	r3, [pc, #492]	; (8009640 <_vfiprintf_r+0x244>)
 8009454:	429d      	cmp	r5, r3
 8009456:	d101      	bne.n	800945c <_vfiprintf_r+0x60>
 8009458:	68b5      	ldr	r5, [r6, #8]
 800945a:	e7df      	b.n	800941c <_vfiprintf_r+0x20>
 800945c:	4b79      	ldr	r3, [pc, #484]	; (8009644 <_vfiprintf_r+0x248>)
 800945e:	429d      	cmp	r5, r3
 8009460:	bf08      	it	eq
 8009462:	68f5      	ldreq	r5, [r6, #12]
 8009464:	e7da      	b.n	800941c <_vfiprintf_r+0x20>
 8009466:	89ab      	ldrh	r3, [r5, #12]
 8009468:	0598      	lsls	r0, r3, #22
 800946a:	d4ed      	bmi.n	8009448 <_vfiprintf_r+0x4c>
 800946c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800946e:	f000 fb76 	bl	8009b5e <__retarget_lock_release_recursive>
 8009472:	e7e9      	b.n	8009448 <_vfiprintf_r+0x4c>
 8009474:	2300      	movs	r3, #0
 8009476:	9309      	str	r3, [sp, #36]	; 0x24
 8009478:	2320      	movs	r3, #32
 800947a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800947e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009482:	2330      	movs	r3, #48	; 0x30
 8009484:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009648 <_vfiprintf_r+0x24c>
 8009488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800948c:	f04f 0901 	mov.w	r9, #1
 8009490:	4623      	mov	r3, r4
 8009492:	469a      	mov	sl, r3
 8009494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009498:	b10a      	cbz	r2, 800949e <_vfiprintf_r+0xa2>
 800949a:	2a25      	cmp	r2, #37	; 0x25
 800949c:	d1f9      	bne.n	8009492 <_vfiprintf_r+0x96>
 800949e:	ebba 0b04 	subs.w	fp, sl, r4
 80094a2:	d00b      	beq.n	80094bc <_vfiprintf_r+0xc0>
 80094a4:	465b      	mov	r3, fp
 80094a6:	4622      	mov	r2, r4
 80094a8:	4629      	mov	r1, r5
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7ff ff93 	bl	80093d6 <__sfputs_r>
 80094b0:	3001      	adds	r0, #1
 80094b2:	f000 80aa 	beq.w	800960a <_vfiprintf_r+0x20e>
 80094b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094b8:	445a      	add	r2, fp
 80094ba:	9209      	str	r2, [sp, #36]	; 0x24
 80094bc:	f89a 3000 	ldrb.w	r3, [sl]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 80a2 	beq.w	800960a <_vfiprintf_r+0x20e>
 80094c6:	2300      	movs	r3, #0
 80094c8:	f04f 32ff 	mov.w	r2, #4294967295
 80094cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094d0:	f10a 0a01 	add.w	sl, sl, #1
 80094d4:	9304      	str	r3, [sp, #16]
 80094d6:	9307      	str	r3, [sp, #28]
 80094d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094dc:	931a      	str	r3, [sp, #104]	; 0x68
 80094de:	4654      	mov	r4, sl
 80094e0:	2205      	movs	r2, #5
 80094e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e6:	4858      	ldr	r0, [pc, #352]	; (8009648 <_vfiprintf_r+0x24c>)
 80094e8:	f7f6 fe82 	bl	80001f0 <memchr>
 80094ec:	9a04      	ldr	r2, [sp, #16]
 80094ee:	b9d8      	cbnz	r0, 8009528 <_vfiprintf_r+0x12c>
 80094f0:	06d1      	lsls	r1, r2, #27
 80094f2:	bf44      	itt	mi
 80094f4:	2320      	movmi	r3, #32
 80094f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094fa:	0713      	lsls	r3, r2, #28
 80094fc:	bf44      	itt	mi
 80094fe:	232b      	movmi	r3, #43	; 0x2b
 8009500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009504:	f89a 3000 	ldrb.w	r3, [sl]
 8009508:	2b2a      	cmp	r3, #42	; 0x2a
 800950a:	d015      	beq.n	8009538 <_vfiprintf_r+0x13c>
 800950c:	9a07      	ldr	r2, [sp, #28]
 800950e:	4654      	mov	r4, sl
 8009510:	2000      	movs	r0, #0
 8009512:	f04f 0c0a 	mov.w	ip, #10
 8009516:	4621      	mov	r1, r4
 8009518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800951c:	3b30      	subs	r3, #48	; 0x30
 800951e:	2b09      	cmp	r3, #9
 8009520:	d94e      	bls.n	80095c0 <_vfiprintf_r+0x1c4>
 8009522:	b1b0      	cbz	r0, 8009552 <_vfiprintf_r+0x156>
 8009524:	9207      	str	r2, [sp, #28]
 8009526:	e014      	b.n	8009552 <_vfiprintf_r+0x156>
 8009528:	eba0 0308 	sub.w	r3, r0, r8
 800952c:	fa09 f303 	lsl.w	r3, r9, r3
 8009530:	4313      	orrs	r3, r2
 8009532:	9304      	str	r3, [sp, #16]
 8009534:	46a2      	mov	sl, r4
 8009536:	e7d2      	b.n	80094de <_vfiprintf_r+0xe2>
 8009538:	9b03      	ldr	r3, [sp, #12]
 800953a:	1d19      	adds	r1, r3, #4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	9103      	str	r1, [sp, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	bfbb      	ittet	lt
 8009544:	425b      	neglt	r3, r3
 8009546:	f042 0202 	orrlt.w	r2, r2, #2
 800954a:	9307      	strge	r3, [sp, #28]
 800954c:	9307      	strlt	r3, [sp, #28]
 800954e:	bfb8      	it	lt
 8009550:	9204      	strlt	r2, [sp, #16]
 8009552:	7823      	ldrb	r3, [r4, #0]
 8009554:	2b2e      	cmp	r3, #46	; 0x2e
 8009556:	d10c      	bne.n	8009572 <_vfiprintf_r+0x176>
 8009558:	7863      	ldrb	r3, [r4, #1]
 800955a:	2b2a      	cmp	r3, #42	; 0x2a
 800955c:	d135      	bne.n	80095ca <_vfiprintf_r+0x1ce>
 800955e:	9b03      	ldr	r3, [sp, #12]
 8009560:	1d1a      	adds	r2, r3, #4
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	9203      	str	r2, [sp, #12]
 8009566:	2b00      	cmp	r3, #0
 8009568:	bfb8      	it	lt
 800956a:	f04f 33ff 	movlt.w	r3, #4294967295
 800956e:	3402      	adds	r4, #2
 8009570:	9305      	str	r3, [sp, #20]
 8009572:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009658 <_vfiprintf_r+0x25c>
 8009576:	7821      	ldrb	r1, [r4, #0]
 8009578:	2203      	movs	r2, #3
 800957a:	4650      	mov	r0, sl
 800957c:	f7f6 fe38 	bl	80001f0 <memchr>
 8009580:	b140      	cbz	r0, 8009594 <_vfiprintf_r+0x198>
 8009582:	2340      	movs	r3, #64	; 0x40
 8009584:	eba0 000a 	sub.w	r0, r0, sl
 8009588:	fa03 f000 	lsl.w	r0, r3, r0
 800958c:	9b04      	ldr	r3, [sp, #16]
 800958e:	4303      	orrs	r3, r0
 8009590:	3401      	adds	r4, #1
 8009592:	9304      	str	r3, [sp, #16]
 8009594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009598:	482c      	ldr	r0, [pc, #176]	; (800964c <_vfiprintf_r+0x250>)
 800959a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800959e:	2206      	movs	r2, #6
 80095a0:	f7f6 fe26 	bl	80001f0 <memchr>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d03f      	beq.n	8009628 <_vfiprintf_r+0x22c>
 80095a8:	4b29      	ldr	r3, [pc, #164]	; (8009650 <_vfiprintf_r+0x254>)
 80095aa:	bb1b      	cbnz	r3, 80095f4 <_vfiprintf_r+0x1f8>
 80095ac:	9b03      	ldr	r3, [sp, #12]
 80095ae:	3307      	adds	r3, #7
 80095b0:	f023 0307 	bic.w	r3, r3, #7
 80095b4:	3308      	adds	r3, #8
 80095b6:	9303      	str	r3, [sp, #12]
 80095b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ba:	443b      	add	r3, r7
 80095bc:	9309      	str	r3, [sp, #36]	; 0x24
 80095be:	e767      	b.n	8009490 <_vfiprintf_r+0x94>
 80095c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80095c4:	460c      	mov	r4, r1
 80095c6:	2001      	movs	r0, #1
 80095c8:	e7a5      	b.n	8009516 <_vfiprintf_r+0x11a>
 80095ca:	2300      	movs	r3, #0
 80095cc:	3401      	adds	r4, #1
 80095ce:	9305      	str	r3, [sp, #20]
 80095d0:	4619      	mov	r1, r3
 80095d2:	f04f 0c0a 	mov.w	ip, #10
 80095d6:	4620      	mov	r0, r4
 80095d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095dc:	3a30      	subs	r2, #48	; 0x30
 80095de:	2a09      	cmp	r2, #9
 80095e0:	d903      	bls.n	80095ea <_vfiprintf_r+0x1ee>
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0c5      	beq.n	8009572 <_vfiprintf_r+0x176>
 80095e6:	9105      	str	r1, [sp, #20]
 80095e8:	e7c3      	b.n	8009572 <_vfiprintf_r+0x176>
 80095ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ee:	4604      	mov	r4, r0
 80095f0:	2301      	movs	r3, #1
 80095f2:	e7f0      	b.n	80095d6 <_vfiprintf_r+0x1da>
 80095f4:	ab03      	add	r3, sp, #12
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	462a      	mov	r2, r5
 80095fa:	4b16      	ldr	r3, [pc, #88]	; (8009654 <_vfiprintf_r+0x258>)
 80095fc:	a904      	add	r1, sp, #16
 80095fe:	4630      	mov	r0, r6
 8009600:	f7fc fb28 	bl	8005c54 <_printf_float>
 8009604:	4607      	mov	r7, r0
 8009606:	1c78      	adds	r0, r7, #1
 8009608:	d1d6      	bne.n	80095b8 <_vfiprintf_r+0x1bc>
 800960a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800960c:	07d9      	lsls	r1, r3, #31
 800960e:	d405      	bmi.n	800961c <_vfiprintf_r+0x220>
 8009610:	89ab      	ldrh	r3, [r5, #12]
 8009612:	059a      	lsls	r2, r3, #22
 8009614:	d402      	bmi.n	800961c <_vfiprintf_r+0x220>
 8009616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009618:	f000 faa1 	bl	8009b5e <__retarget_lock_release_recursive>
 800961c:	89ab      	ldrh	r3, [r5, #12]
 800961e:	065b      	lsls	r3, r3, #25
 8009620:	f53f af12 	bmi.w	8009448 <_vfiprintf_r+0x4c>
 8009624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009626:	e711      	b.n	800944c <_vfiprintf_r+0x50>
 8009628:	ab03      	add	r3, sp, #12
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	462a      	mov	r2, r5
 800962e:	4b09      	ldr	r3, [pc, #36]	; (8009654 <_vfiprintf_r+0x258>)
 8009630:	a904      	add	r1, sp, #16
 8009632:	4630      	mov	r0, r6
 8009634:	f7fc fdb2 	bl	800619c <_printf_i>
 8009638:	e7e4      	b.n	8009604 <_vfiprintf_r+0x208>
 800963a:	bf00      	nop
 800963c:	0800b294 	.word	0x0800b294
 8009640:	0800b2b4 	.word	0x0800b2b4
 8009644:	0800b274 	.word	0x0800b274
 8009648:	0800b124 	.word	0x0800b124
 800964c:	0800b12e 	.word	0x0800b12e
 8009650:	08005c55 	.word	0x08005c55
 8009654:	080093d7 	.word	0x080093d7
 8009658:	0800b12a 	.word	0x0800b12a

0800965c <__swbuf_r>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	460e      	mov	r6, r1
 8009660:	4614      	mov	r4, r2
 8009662:	4605      	mov	r5, r0
 8009664:	b118      	cbz	r0, 800966e <__swbuf_r+0x12>
 8009666:	6983      	ldr	r3, [r0, #24]
 8009668:	b90b      	cbnz	r3, 800966e <__swbuf_r+0x12>
 800966a:	f000 f9d9 	bl	8009a20 <__sinit>
 800966e:	4b21      	ldr	r3, [pc, #132]	; (80096f4 <__swbuf_r+0x98>)
 8009670:	429c      	cmp	r4, r3
 8009672:	d12b      	bne.n	80096cc <__swbuf_r+0x70>
 8009674:	686c      	ldr	r4, [r5, #4]
 8009676:	69a3      	ldr	r3, [r4, #24]
 8009678:	60a3      	str	r3, [r4, #8]
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	071a      	lsls	r2, r3, #28
 800967e:	d52f      	bpl.n	80096e0 <__swbuf_r+0x84>
 8009680:	6923      	ldr	r3, [r4, #16]
 8009682:	b36b      	cbz	r3, 80096e0 <__swbuf_r+0x84>
 8009684:	6923      	ldr	r3, [r4, #16]
 8009686:	6820      	ldr	r0, [r4, #0]
 8009688:	1ac0      	subs	r0, r0, r3
 800968a:	6963      	ldr	r3, [r4, #20]
 800968c:	b2f6      	uxtb	r6, r6
 800968e:	4283      	cmp	r3, r0
 8009690:	4637      	mov	r7, r6
 8009692:	dc04      	bgt.n	800969e <__swbuf_r+0x42>
 8009694:	4621      	mov	r1, r4
 8009696:	4628      	mov	r0, r5
 8009698:	f000 f92e 	bl	80098f8 <_fflush_r>
 800969c:	bb30      	cbnz	r0, 80096ec <__swbuf_r+0x90>
 800969e:	68a3      	ldr	r3, [r4, #8]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	60a3      	str	r3, [r4, #8]
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	6022      	str	r2, [r4, #0]
 80096aa:	701e      	strb	r6, [r3, #0]
 80096ac:	6963      	ldr	r3, [r4, #20]
 80096ae:	3001      	adds	r0, #1
 80096b0:	4283      	cmp	r3, r0
 80096b2:	d004      	beq.n	80096be <__swbuf_r+0x62>
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	07db      	lsls	r3, r3, #31
 80096b8:	d506      	bpl.n	80096c8 <__swbuf_r+0x6c>
 80096ba:	2e0a      	cmp	r6, #10
 80096bc:	d104      	bne.n	80096c8 <__swbuf_r+0x6c>
 80096be:	4621      	mov	r1, r4
 80096c0:	4628      	mov	r0, r5
 80096c2:	f000 f919 	bl	80098f8 <_fflush_r>
 80096c6:	b988      	cbnz	r0, 80096ec <__swbuf_r+0x90>
 80096c8:	4638      	mov	r0, r7
 80096ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <__swbuf_r+0x9c>)
 80096ce:	429c      	cmp	r4, r3
 80096d0:	d101      	bne.n	80096d6 <__swbuf_r+0x7a>
 80096d2:	68ac      	ldr	r4, [r5, #8]
 80096d4:	e7cf      	b.n	8009676 <__swbuf_r+0x1a>
 80096d6:	4b09      	ldr	r3, [pc, #36]	; (80096fc <__swbuf_r+0xa0>)
 80096d8:	429c      	cmp	r4, r3
 80096da:	bf08      	it	eq
 80096dc:	68ec      	ldreq	r4, [r5, #12]
 80096de:	e7ca      	b.n	8009676 <__swbuf_r+0x1a>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	f000 f80c 	bl	8009700 <__swsetup_r>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d0cb      	beq.n	8009684 <__swbuf_r+0x28>
 80096ec:	f04f 37ff 	mov.w	r7, #4294967295
 80096f0:	e7ea      	b.n	80096c8 <__swbuf_r+0x6c>
 80096f2:	bf00      	nop
 80096f4:	0800b294 	.word	0x0800b294
 80096f8:	0800b2b4 	.word	0x0800b2b4
 80096fc:	0800b274 	.word	0x0800b274

08009700 <__swsetup_r>:
 8009700:	4b32      	ldr	r3, [pc, #200]	; (80097cc <__swsetup_r+0xcc>)
 8009702:	b570      	push	{r4, r5, r6, lr}
 8009704:	681d      	ldr	r5, [r3, #0]
 8009706:	4606      	mov	r6, r0
 8009708:	460c      	mov	r4, r1
 800970a:	b125      	cbz	r5, 8009716 <__swsetup_r+0x16>
 800970c:	69ab      	ldr	r3, [r5, #24]
 800970e:	b913      	cbnz	r3, 8009716 <__swsetup_r+0x16>
 8009710:	4628      	mov	r0, r5
 8009712:	f000 f985 	bl	8009a20 <__sinit>
 8009716:	4b2e      	ldr	r3, [pc, #184]	; (80097d0 <__swsetup_r+0xd0>)
 8009718:	429c      	cmp	r4, r3
 800971a:	d10f      	bne.n	800973c <__swsetup_r+0x3c>
 800971c:	686c      	ldr	r4, [r5, #4]
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009724:	0719      	lsls	r1, r3, #28
 8009726:	d42c      	bmi.n	8009782 <__swsetup_r+0x82>
 8009728:	06dd      	lsls	r5, r3, #27
 800972a:	d411      	bmi.n	8009750 <__swsetup_r+0x50>
 800972c:	2309      	movs	r3, #9
 800972e:	6033      	str	r3, [r6, #0]
 8009730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	f04f 30ff 	mov.w	r0, #4294967295
 800973a:	e03e      	b.n	80097ba <__swsetup_r+0xba>
 800973c:	4b25      	ldr	r3, [pc, #148]	; (80097d4 <__swsetup_r+0xd4>)
 800973e:	429c      	cmp	r4, r3
 8009740:	d101      	bne.n	8009746 <__swsetup_r+0x46>
 8009742:	68ac      	ldr	r4, [r5, #8]
 8009744:	e7eb      	b.n	800971e <__swsetup_r+0x1e>
 8009746:	4b24      	ldr	r3, [pc, #144]	; (80097d8 <__swsetup_r+0xd8>)
 8009748:	429c      	cmp	r4, r3
 800974a:	bf08      	it	eq
 800974c:	68ec      	ldreq	r4, [r5, #12]
 800974e:	e7e6      	b.n	800971e <__swsetup_r+0x1e>
 8009750:	0758      	lsls	r0, r3, #29
 8009752:	d512      	bpl.n	800977a <__swsetup_r+0x7a>
 8009754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009756:	b141      	cbz	r1, 800976a <__swsetup_r+0x6a>
 8009758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800975c:	4299      	cmp	r1, r3
 800975e:	d002      	beq.n	8009766 <__swsetup_r+0x66>
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff fb65 	bl	8008e30 <_free_r>
 8009766:	2300      	movs	r3, #0
 8009768:	6363      	str	r3, [r4, #52]	; 0x34
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	2300      	movs	r3, #0
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	6923      	ldr	r3, [r4, #16]
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f043 0308 	orr.w	r3, r3, #8
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	b94b      	cbnz	r3, 800979a <__swsetup_r+0x9a>
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800978c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009790:	d003      	beq.n	800979a <__swsetup_r+0x9a>
 8009792:	4621      	mov	r1, r4
 8009794:	4630      	mov	r0, r6
 8009796:	f000 fa07 	bl	8009ba8 <__smakebuf_r>
 800979a:	89a0      	ldrh	r0, [r4, #12]
 800979c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a0:	f010 0301 	ands.w	r3, r0, #1
 80097a4:	d00a      	beq.n	80097bc <__swsetup_r+0xbc>
 80097a6:	2300      	movs	r3, #0
 80097a8:	60a3      	str	r3, [r4, #8]
 80097aa:	6963      	ldr	r3, [r4, #20]
 80097ac:	425b      	negs	r3, r3
 80097ae:	61a3      	str	r3, [r4, #24]
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	b943      	cbnz	r3, 80097c6 <__swsetup_r+0xc6>
 80097b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097b8:	d1ba      	bne.n	8009730 <__swsetup_r+0x30>
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	0781      	lsls	r1, r0, #30
 80097be:	bf58      	it	pl
 80097c0:	6963      	ldrpl	r3, [r4, #20]
 80097c2:	60a3      	str	r3, [r4, #8]
 80097c4:	e7f4      	b.n	80097b0 <__swsetup_r+0xb0>
 80097c6:	2000      	movs	r0, #0
 80097c8:	e7f7      	b.n	80097ba <__swsetup_r+0xba>
 80097ca:	bf00      	nop
 80097cc:	2000001c 	.word	0x2000001c
 80097d0:	0800b294 	.word	0x0800b294
 80097d4:	0800b2b4 	.word	0x0800b2b4
 80097d8:	0800b274 	.word	0x0800b274

080097dc <abort>:
 80097dc:	b508      	push	{r3, lr}
 80097de:	2006      	movs	r0, #6
 80097e0:	f000 fa52 	bl	8009c88 <raise>
 80097e4:	2001      	movs	r0, #1
 80097e6:	f7f9 fb89 	bl	8002efc <_exit>
	...

080097ec <__sflush_r>:
 80097ec:	898a      	ldrh	r2, [r1, #12]
 80097ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f2:	4605      	mov	r5, r0
 80097f4:	0710      	lsls	r0, r2, #28
 80097f6:	460c      	mov	r4, r1
 80097f8:	d458      	bmi.n	80098ac <__sflush_r+0xc0>
 80097fa:	684b      	ldr	r3, [r1, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dc05      	bgt.n	800980c <__sflush_r+0x20>
 8009800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009802:	2b00      	cmp	r3, #0
 8009804:	dc02      	bgt.n	800980c <__sflush_r+0x20>
 8009806:	2000      	movs	r0, #0
 8009808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800980c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800980e:	2e00      	cmp	r6, #0
 8009810:	d0f9      	beq.n	8009806 <__sflush_r+0x1a>
 8009812:	2300      	movs	r3, #0
 8009814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009818:	682f      	ldr	r7, [r5, #0]
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	d032      	beq.n	8009884 <__sflush_r+0x98>
 800981e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	075a      	lsls	r2, r3, #29
 8009824:	d505      	bpl.n	8009832 <__sflush_r+0x46>
 8009826:	6863      	ldr	r3, [r4, #4]
 8009828:	1ac0      	subs	r0, r0, r3
 800982a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800982c:	b10b      	cbz	r3, 8009832 <__sflush_r+0x46>
 800982e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009830:	1ac0      	subs	r0, r0, r3
 8009832:	2300      	movs	r3, #0
 8009834:	4602      	mov	r2, r0
 8009836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009838:	6a21      	ldr	r1, [r4, #32]
 800983a:	4628      	mov	r0, r5
 800983c:	47b0      	blx	r6
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	d106      	bne.n	8009852 <__sflush_r+0x66>
 8009844:	6829      	ldr	r1, [r5, #0]
 8009846:	291d      	cmp	r1, #29
 8009848:	d82c      	bhi.n	80098a4 <__sflush_r+0xb8>
 800984a:	4a2a      	ldr	r2, [pc, #168]	; (80098f4 <__sflush_r+0x108>)
 800984c:	40ca      	lsrs	r2, r1
 800984e:	07d6      	lsls	r6, r2, #31
 8009850:	d528      	bpl.n	80098a4 <__sflush_r+0xb8>
 8009852:	2200      	movs	r2, #0
 8009854:	6062      	str	r2, [r4, #4]
 8009856:	04d9      	lsls	r1, r3, #19
 8009858:	6922      	ldr	r2, [r4, #16]
 800985a:	6022      	str	r2, [r4, #0]
 800985c:	d504      	bpl.n	8009868 <__sflush_r+0x7c>
 800985e:	1c42      	adds	r2, r0, #1
 8009860:	d101      	bne.n	8009866 <__sflush_r+0x7a>
 8009862:	682b      	ldr	r3, [r5, #0]
 8009864:	b903      	cbnz	r3, 8009868 <__sflush_r+0x7c>
 8009866:	6560      	str	r0, [r4, #84]	; 0x54
 8009868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800986a:	602f      	str	r7, [r5, #0]
 800986c:	2900      	cmp	r1, #0
 800986e:	d0ca      	beq.n	8009806 <__sflush_r+0x1a>
 8009870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009874:	4299      	cmp	r1, r3
 8009876:	d002      	beq.n	800987e <__sflush_r+0x92>
 8009878:	4628      	mov	r0, r5
 800987a:	f7ff fad9 	bl	8008e30 <_free_r>
 800987e:	2000      	movs	r0, #0
 8009880:	6360      	str	r0, [r4, #52]	; 0x34
 8009882:	e7c1      	b.n	8009808 <__sflush_r+0x1c>
 8009884:	6a21      	ldr	r1, [r4, #32]
 8009886:	2301      	movs	r3, #1
 8009888:	4628      	mov	r0, r5
 800988a:	47b0      	blx	r6
 800988c:	1c41      	adds	r1, r0, #1
 800988e:	d1c7      	bne.n	8009820 <__sflush_r+0x34>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c4      	beq.n	8009820 <__sflush_r+0x34>
 8009896:	2b1d      	cmp	r3, #29
 8009898:	d001      	beq.n	800989e <__sflush_r+0xb2>
 800989a:	2b16      	cmp	r3, #22
 800989c:	d101      	bne.n	80098a2 <__sflush_r+0xb6>
 800989e:	602f      	str	r7, [r5, #0]
 80098a0:	e7b1      	b.n	8009806 <__sflush_r+0x1a>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	e7ad      	b.n	8009808 <__sflush_r+0x1c>
 80098ac:	690f      	ldr	r7, [r1, #16]
 80098ae:	2f00      	cmp	r7, #0
 80098b0:	d0a9      	beq.n	8009806 <__sflush_r+0x1a>
 80098b2:	0793      	lsls	r3, r2, #30
 80098b4:	680e      	ldr	r6, [r1, #0]
 80098b6:	bf08      	it	eq
 80098b8:	694b      	ldreq	r3, [r1, #20]
 80098ba:	600f      	str	r7, [r1, #0]
 80098bc:	bf18      	it	ne
 80098be:	2300      	movne	r3, #0
 80098c0:	eba6 0807 	sub.w	r8, r6, r7
 80098c4:	608b      	str	r3, [r1, #8]
 80098c6:	f1b8 0f00 	cmp.w	r8, #0
 80098ca:	dd9c      	ble.n	8009806 <__sflush_r+0x1a>
 80098cc:	6a21      	ldr	r1, [r4, #32]
 80098ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098d0:	4643      	mov	r3, r8
 80098d2:	463a      	mov	r2, r7
 80098d4:	4628      	mov	r0, r5
 80098d6:	47b0      	blx	r6
 80098d8:	2800      	cmp	r0, #0
 80098da:	dc06      	bgt.n	80098ea <__sflush_r+0xfe>
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	e78e      	b.n	8009808 <__sflush_r+0x1c>
 80098ea:	4407      	add	r7, r0
 80098ec:	eba8 0800 	sub.w	r8, r8, r0
 80098f0:	e7e9      	b.n	80098c6 <__sflush_r+0xda>
 80098f2:	bf00      	nop
 80098f4:	20400001 	.word	0x20400001

080098f8 <_fflush_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	690b      	ldr	r3, [r1, #16]
 80098fc:	4605      	mov	r5, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	b913      	cbnz	r3, 8009908 <_fflush_r+0x10>
 8009902:	2500      	movs	r5, #0
 8009904:	4628      	mov	r0, r5
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	b118      	cbz	r0, 8009912 <_fflush_r+0x1a>
 800990a:	6983      	ldr	r3, [r0, #24]
 800990c:	b90b      	cbnz	r3, 8009912 <_fflush_r+0x1a>
 800990e:	f000 f887 	bl	8009a20 <__sinit>
 8009912:	4b14      	ldr	r3, [pc, #80]	; (8009964 <_fflush_r+0x6c>)
 8009914:	429c      	cmp	r4, r3
 8009916:	d11b      	bne.n	8009950 <_fflush_r+0x58>
 8009918:	686c      	ldr	r4, [r5, #4]
 800991a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0ef      	beq.n	8009902 <_fflush_r+0xa>
 8009922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009924:	07d0      	lsls	r0, r2, #31
 8009926:	d404      	bmi.n	8009932 <_fflush_r+0x3a>
 8009928:	0599      	lsls	r1, r3, #22
 800992a:	d402      	bmi.n	8009932 <_fflush_r+0x3a>
 800992c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800992e:	f000 f915 	bl	8009b5c <__retarget_lock_acquire_recursive>
 8009932:	4628      	mov	r0, r5
 8009934:	4621      	mov	r1, r4
 8009936:	f7ff ff59 	bl	80097ec <__sflush_r>
 800993a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800993c:	07da      	lsls	r2, r3, #31
 800993e:	4605      	mov	r5, r0
 8009940:	d4e0      	bmi.n	8009904 <_fflush_r+0xc>
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	059b      	lsls	r3, r3, #22
 8009946:	d4dd      	bmi.n	8009904 <_fflush_r+0xc>
 8009948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800994a:	f000 f908 	bl	8009b5e <__retarget_lock_release_recursive>
 800994e:	e7d9      	b.n	8009904 <_fflush_r+0xc>
 8009950:	4b05      	ldr	r3, [pc, #20]	; (8009968 <_fflush_r+0x70>)
 8009952:	429c      	cmp	r4, r3
 8009954:	d101      	bne.n	800995a <_fflush_r+0x62>
 8009956:	68ac      	ldr	r4, [r5, #8]
 8009958:	e7df      	b.n	800991a <_fflush_r+0x22>
 800995a:	4b04      	ldr	r3, [pc, #16]	; (800996c <_fflush_r+0x74>)
 800995c:	429c      	cmp	r4, r3
 800995e:	bf08      	it	eq
 8009960:	68ec      	ldreq	r4, [r5, #12]
 8009962:	e7da      	b.n	800991a <_fflush_r+0x22>
 8009964:	0800b294 	.word	0x0800b294
 8009968:	0800b2b4 	.word	0x0800b2b4
 800996c:	0800b274 	.word	0x0800b274

08009970 <std>:
 8009970:	2300      	movs	r3, #0
 8009972:	b510      	push	{r4, lr}
 8009974:	4604      	mov	r4, r0
 8009976:	e9c0 3300 	strd	r3, r3, [r0]
 800997a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800997e:	6083      	str	r3, [r0, #8]
 8009980:	8181      	strh	r1, [r0, #12]
 8009982:	6643      	str	r3, [r0, #100]	; 0x64
 8009984:	81c2      	strh	r2, [r0, #14]
 8009986:	6183      	str	r3, [r0, #24]
 8009988:	4619      	mov	r1, r3
 800998a:	2208      	movs	r2, #8
 800998c:	305c      	adds	r0, #92	; 0x5c
 800998e:	f7fc f8b9 	bl	8005b04 <memset>
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <std+0x38>)
 8009994:	6263      	str	r3, [r4, #36]	; 0x24
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <std+0x3c>)
 8009998:	62a3      	str	r3, [r4, #40]	; 0x28
 800999a:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <std+0x40>)
 800999c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800999e:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <std+0x44>)
 80099a0:	6224      	str	r4, [r4, #32]
 80099a2:	6323      	str	r3, [r4, #48]	; 0x30
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	bf00      	nop
 80099a8:	08009cc1 	.word	0x08009cc1
 80099ac:	08009ce3 	.word	0x08009ce3
 80099b0:	08009d1b 	.word	0x08009d1b
 80099b4:	08009d3f 	.word	0x08009d3f

080099b8 <_cleanup_r>:
 80099b8:	4901      	ldr	r1, [pc, #4]	; (80099c0 <_cleanup_r+0x8>)
 80099ba:	f000 b8af 	b.w	8009b1c <_fwalk_reent>
 80099be:	bf00      	nop
 80099c0:	080098f9 	.word	0x080098f9

080099c4 <__sfmoreglue>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	1e4a      	subs	r2, r1, #1
 80099c8:	2568      	movs	r5, #104	; 0x68
 80099ca:	4355      	muls	r5, r2
 80099cc:	460e      	mov	r6, r1
 80099ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099d2:	f7ff fa7d 	bl	8008ed0 <_malloc_r>
 80099d6:	4604      	mov	r4, r0
 80099d8:	b140      	cbz	r0, 80099ec <__sfmoreglue+0x28>
 80099da:	2100      	movs	r1, #0
 80099dc:	e9c0 1600 	strd	r1, r6, [r0]
 80099e0:	300c      	adds	r0, #12
 80099e2:	60a0      	str	r0, [r4, #8]
 80099e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099e8:	f7fc f88c 	bl	8005b04 <memset>
 80099ec:	4620      	mov	r0, r4
 80099ee:	bd70      	pop	{r4, r5, r6, pc}

080099f0 <__sfp_lock_acquire>:
 80099f0:	4801      	ldr	r0, [pc, #4]	; (80099f8 <__sfp_lock_acquire+0x8>)
 80099f2:	f000 b8b3 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 80099f6:	bf00      	nop
 80099f8:	20000870 	.word	0x20000870

080099fc <__sfp_lock_release>:
 80099fc:	4801      	ldr	r0, [pc, #4]	; (8009a04 <__sfp_lock_release+0x8>)
 80099fe:	f000 b8ae 	b.w	8009b5e <__retarget_lock_release_recursive>
 8009a02:	bf00      	nop
 8009a04:	20000870 	.word	0x20000870

08009a08 <__sinit_lock_acquire>:
 8009a08:	4801      	ldr	r0, [pc, #4]	; (8009a10 <__sinit_lock_acquire+0x8>)
 8009a0a:	f000 b8a7 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 8009a0e:	bf00      	nop
 8009a10:	2000086b 	.word	0x2000086b

08009a14 <__sinit_lock_release>:
 8009a14:	4801      	ldr	r0, [pc, #4]	; (8009a1c <__sinit_lock_release+0x8>)
 8009a16:	f000 b8a2 	b.w	8009b5e <__retarget_lock_release_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	2000086b 	.word	0x2000086b

08009a20 <__sinit>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4604      	mov	r4, r0
 8009a24:	f7ff fff0 	bl	8009a08 <__sinit_lock_acquire>
 8009a28:	69a3      	ldr	r3, [r4, #24]
 8009a2a:	b11b      	cbz	r3, 8009a34 <__sinit+0x14>
 8009a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a30:	f7ff bff0 	b.w	8009a14 <__sinit_lock_release>
 8009a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a38:	6523      	str	r3, [r4, #80]	; 0x50
 8009a3a:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <__sinit+0x68>)
 8009a3c:	4a13      	ldr	r2, [pc, #76]	; (8009a8c <__sinit+0x6c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a42:	42a3      	cmp	r3, r4
 8009a44:	bf04      	itt	eq
 8009a46:	2301      	moveq	r3, #1
 8009a48:	61a3      	streq	r3, [r4, #24]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f820 	bl	8009a90 <__sfp>
 8009a50:	6060      	str	r0, [r4, #4]
 8009a52:	4620      	mov	r0, r4
 8009a54:	f000 f81c 	bl	8009a90 <__sfp>
 8009a58:	60a0      	str	r0, [r4, #8]
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f000 f818 	bl	8009a90 <__sfp>
 8009a60:	2200      	movs	r2, #0
 8009a62:	60e0      	str	r0, [r4, #12]
 8009a64:	2104      	movs	r1, #4
 8009a66:	6860      	ldr	r0, [r4, #4]
 8009a68:	f7ff ff82 	bl	8009970 <std>
 8009a6c:	68a0      	ldr	r0, [r4, #8]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	2109      	movs	r1, #9
 8009a72:	f7ff ff7d 	bl	8009970 <std>
 8009a76:	68e0      	ldr	r0, [r4, #12]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	2112      	movs	r1, #18
 8009a7c:	f7ff ff78 	bl	8009970 <std>
 8009a80:	2301      	movs	r3, #1
 8009a82:	61a3      	str	r3, [r4, #24]
 8009a84:	e7d2      	b.n	8009a2c <__sinit+0xc>
 8009a86:	bf00      	nop
 8009a88:	0800ae28 	.word	0x0800ae28
 8009a8c:	080099b9 	.word	0x080099b9

08009a90 <__sfp>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	4607      	mov	r7, r0
 8009a94:	f7ff ffac 	bl	80099f0 <__sfp_lock_acquire>
 8009a98:	4b1e      	ldr	r3, [pc, #120]	; (8009b14 <__sfp+0x84>)
 8009a9a:	681e      	ldr	r6, [r3, #0]
 8009a9c:	69b3      	ldr	r3, [r6, #24]
 8009a9e:	b913      	cbnz	r3, 8009aa6 <__sfp+0x16>
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7ff ffbd 	bl	8009a20 <__sinit>
 8009aa6:	3648      	adds	r6, #72	; 0x48
 8009aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	d503      	bpl.n	8009ab8 <__sfp+0x28>
 8009ab0:	6833      	ldr	r3, [r6, #0]
 8009ab2:	b30b      	cbz	r3, 8009af8 <__sfp+0x68>
 8009ab4:	6836      	ldr	r6, [r6, #0]
 8009ab6:	e7f7      	b.n	8009aa8 <__sfp+0x18>
 8009ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009abc:	b9d5      	cbnz	r5, 8009af4 <__sfp+0x64>
 8009abe:	4b16      	ldr	r3, [pc, #88]	; (8009b18 <__sfp+0x88>)
 8009ac0:	60e3      	str	r3, [r4, #12]
 8009ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ac8:	f000 f847 	bl	8009b5a <__retarget_lock_init_recursive>
 8009acc:	f7ff ff96 	bl	80099fc <__sfp_lock_release>
 8009ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ad8:	6025      	str	r5, [r4, #0]
 8009ada:	61a5      	str	r5, [r4, #24]
 8009adc:	2208      	movs	r2, #8
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ae4:	f7fc f80e 	bl	8005b04 <memset>
 8009ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009af0:	4620      	mov	r0, r4
 8009af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009af4:	3468      	adds	r4, #104	; 0x68
 8009af6:	e7d9      	b.n	8009aac <__sfp+0x1c>
 8009af8:	2104      	movs	r1, #4
 8009afa:	4638      	mov	r0, r7
 8009afc:	f7ff ff62 	bl	80099c4 <__sfmoreglue>
 8009b00:	4604      	mov	r4, r0
 8009b02:	6030      	str	r0, [r6, #0]
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d1d5      	bne.n	8009ab4 <__sfp+0x24>
 8009b08:	f7ff ff78 	bl	80099fc <__sfp_lock_release>
 8009b0c:	230c      	movs	r3, #12
 8009b0e:	603b      	str	r3, [r7, #0]
 8009b10:	e7ee      	b.n	8009af0 <__sfp+0x60>
 8009b12:	bf00      	nop
 8009b14:	0800ae28 	.word	0x0800ae28
 8009b18:	ffff0001 	.word	0xffff0001

08009b1c <_fwalk_reent>:
 8009b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b20:	4606      	mov	r6, r0
 8009b22:	4688      	mov	r8, r1
 8009b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b28:	2700      	movs	r7, #0
 8009b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8009b32:	d505      	bpl.n	8009b40 <_fwalk_reent+0x24>
 8009b34:	6824      	ldr	r4, [r4, #0]
 8009b36:	2c00      	cmp	r4, #0
 8009b38:	d1f7      	bne.n	8009b2a <_fwalk_reent+0xe>
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b40:	89ab      	ldrh	r3, [r5, #12]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d907      	bls.n	8009b56 <_fwalk_reent+0x3a>
 8009b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	d003      	beq.n	8009b56 <_fwalk_reent+0x3a>
 8009b4e:	4629      	mov	r1, r5
 8009b50:	4630      	mov	r0, r6
 8009b52:	47c0      	blx	r8
 8009b54:	4307      	orrs	r7, r0
 8009b56:	3568      	adds	r5, #104	; 0x68
 8009b58:	e7e9      	b.n	8009b2e <_fwalk_reent+0x12>

08009b5a <__retarget_lock_init_recursive>:
 8009b5a:	4770      	bx	lr

08009b5c <__retarget_lock_acquire_recursive>:
 8009b5c:	4770      	bx	lr

08009b5e <__retarget_lock_release_recursive>:
 8009b5e:	4770      	bx	lr

08009b60 <__swhatbuf_r>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	460e      	mov	r6, r1
 8009b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b68:	2900      	cmp	r1, #0
 8009b6a:	b096      	sub	sp, #88	; 0x58
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	461d      	mov	r5, r3
 8009b70:	da07      	bge.n	8009b82 <__swhatbuf_r+0x22>
 8009b72:	2300      	movs	r3, #0
 8009b74:	602b      	str	r3, [r5, #0]
 8009b76:	89b3      	ldrh	r3, [r6, #12]
 8009b78:	061a      	lsls	r2, r3, #24
 8009b7a:	d410      	bmi.n	8009b9e <__swhatbuf_r+0x3e>
 8009b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b80:	e00e      	b.n	8009ba0 <__swhatbuf_r+0x40>
 8009b82:	466a      	mov	r2, sp
 8009b84:	f000 f902 	bl	8009d8c <_fstat_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	dbf2      	blt.n	8009b72 <__swhatbuf_r+0x12>
 8009b8c:	9a01      	ldr	r2, [sp, #4]
 8009b8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b96:	425a      	negs	r2, r3
 8009b98:	415a      	adcs	r2, r3
 8009b9a:	602a      	str	r2, [r5, #0]
 8009b9c:	e7ee      	b.n	8009b7c <__swhatbuf_r+0x1c>
 8009b9e:	2340      	movs	r3, #64	; 0x40
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	6023      	str	r3, [r4, #0]
 8009ba4:	b016      	add	sp, #88	; 0x58
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}

08009ba8 <__smakebuf_r>:
 8009ba8:	898b      	ldrh	r3, [r1, #12]
 8009baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bac:	079d      	lsls	r5, r3, #30
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	d507      	bpl.n	8009bc4 <__smakebuf_r+0x1c>
 8009bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	6163      	str	r3, [r4, #20]
 8009bc0:	b002      	add	sp, #8
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	ab01      	add	r3, sp, #4
 8009bc6:	466a      	mov	r2, sp
 8009bc8:	f7ff ffca 	bl	8009b60 <__swhatbuf_r>
 8009bcc:	9900      	ldr	r1, [sp, #0]
 8009bce:	4605      	mov	r5, r0
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff f97d 	bl	8008ed0 <_malloc_r>
 8009bd6:	b948      	cbnz	r0, 8009bec <__smakebuf_r+0x44>
 8009bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bdc:	059a      	lsls	r2, r3, #22
 8009bde:	d4ef      	bmi.n	8009bc0 <__smakebuf_r+0x18>
 8009be0:	f023 0303 	bic.w	r3, r3, #3
 8009be4:	f043 0302 	orr.w	r3, r3, #2
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	e7e3      	b.n	8009bb4 <__smakebuf_r+0xc>
 8009bec:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <__smakebuf_r+0x7c>)
 8009bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	6020      	str	r0, [r4, #0]
 8009bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	6163      	str	r3, [r4, #20]
 8009bfe:	9b01      	ldr	r3, [sp, #4]
 8009c00:	6120      	str	r0, [r4, #16]
 8009c02:	b15b      	cbz	r3, 8009c1c <__smakebuf_r+0x74>
 8009c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f000 f8d1 	bl	8009db0 <_isatty_r>
 8009c0e:	b128      	cbz	r0, 8009c1c <__smakebuf_r+0x74>
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	f023 0303 	bic.w	r3, r3, #3
 8009c16:	f043 0301 	orr.w	r3, r3, #1
 8009c1a:	81a3      	strh	r3, [r4, #12]
 8009c1c:	89a0      	ldrh	r0, [r4, #12]
 8009c1e:	4305      	orrs	r5, r0
 8009c20:	81a5      	strh	r5, [r4, #12]
 8009c22:	e7cd      	b.n	8009bc0 <__smakebuf_r+0x18>
 8009c24:	080099b9 	.word	0x080099b9

08009c28 <_malloc_usable_size_r>:
 8009c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c2c:	1f18      	subs	r0, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bfbc      	itt	lt
 8009c32:	580b      	ldrlt	r3, [r1, r0]
 8009c34:	18c0      	addlt	r0, r0, r3
 8009c36:	4770      	bx	lr

08009c38 <_raise_r>:
 8009c38:	291f      	cmp	r1, #31
 8009c3a:	b538      	push	{r3, r4, r5, lr}
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	460d      	mov	r5, r1
 8009c40:	d904      	bls.n	8009c4c <_raise_r+0x14>
 8009c42:	2316      	movs	r3, #22
 8009c44:	6003      	str	r3, [r0, #0]
 8009c46:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c4e:	b112      	cbz	r2, 8009c56 <_raise_r+0x1e>
 8009c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c54:	b94b      	cbnz	r3, 8009c6a <_raise_r+0x32>
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f830 	bl	8009cbc <_getpid_r>
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	4601      	mov	r1, r0
 8009c60:	4620      	mov	r0, r4
 8009c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c66:	f000 b817 	b.w	8009c98 <_kill_r>
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d00a      	beq.n	8009c84 <_raise_r+0x4c>
 8009c6e:	1c59      	adds	r1, r3, #1
 8009c70:	d103      	bne.n	8009c7a <_raise_r+0x42>
 8009c72:	2316      	movs	r3, #22
 8009c74:	6003      	str	r3, [r0, #0]
 8009c76:	2001      	movs	r0, #1
 8009c78:	e7e7      	b.n	8009c4a <_raise_r+0x12>
 8009c7a:	2400      	movs	r4, #0
 8009c7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c80:	4628      	mov	r0, r5
 8009c82:	4798      	blx	r3
 8009c84:	2000      	movs	r0, #0
 8009c86:	e7e0      	b.n	8009c4a <_raise_r+0x12>

08009c88 <raise>:
 8009c88:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <raise+0xc>)
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	f7ff bfd3 	b.w	8009c38 <_raise_r>
 8009c92:	bf00      	nop
 8009c94:	2000001c 	.word	0x2000001c

08009c98 <_kill_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d07      	ldr	r5, [pc, #28]	; (8009cb8 <_kill_r+0x20>)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	602b      	str	r3, [r5, #0]
 8009ca6:	f7f9 f919 	bl	8002edc <_kill>
 8009caa:	1c43      	adds	r3, r0, #1
 8009cac:	d102      	bne.n	8009cb4 <_kill_r+0x1c>
 8009cae:	682b      	ldr	r3, [r5, #0]
 8009cb0:	b103      	cbz	r3, 8009cb4 <_kill_r+0x1c>
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	bd38      	pop	{r3, r4, r5, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000864 	.word	0x20000864

08009cbc <_getpid_r>:
 8009cbc:	f7f9 b906 	b.w	8002ecc <_getpid>

08009cc0 <__sread>:
 8009cc0:	b510      	push	{r4, lr}
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc8:	f000 f894 	bl	8009df4 <_read_r>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	bfab      	itete	ge
 8009cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009cd4:	181b      	addge	r3, r3, r0
 8009cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cda:	bfac      	ite	ge
 8009cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cde:	81a3      	strhlt	r3, [r4, #12]
 8009ce0:	bd10      	pop	{r4, pc}

08009ce2 <__swrite>:
 8009ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce6:	461f      	mov	r7, r3
 8009ce8:	898b      	ldrh	r3, [r1, #12]
 8009cea:	05db      	lsls	r3, r3, #23
 8009cec:	4605      	mov	r5, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	4616      	mov	r6, r2
 8009cf2:	d505      	bpl.n	8009d00 <__swrite+0x1e>
 8009cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f000 f868 	bl	8009dd0 <_lseek_r>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	463b      	mov	r3, r7
 8009d10:	4628      	mov	r0, r5
 8009d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d16:	f000 b817 	b.w	8009d48 <_write_r>

08009d1a <__sseek>:
 8009d1a:	b510      	push	{r4, lr}
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d22:	f000 f855 	bl	8009dd0 <_lseek_r>
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	bf15      	itete	ne
 8009d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d36:	81a3      	strheq	r3, [r4, #12]
 8009d38:	bf18      	it	ne
 8009d3a:	81a3      	strhne	r3, [r4, #12]
 8009d3c:	bd10      	pop	{r4, pc}

08009d3e <__sclose>:
 8009d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d42:	f000 b813 	b.w	8009d6c <_close_r>
	...

08009d48 <_write_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d07      	ldr	r5, [pc, #28]	; (8009d68 <_write_r+0x20>)
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	4608      	mov	r0, r1
 8009d50:	4611      	mov	r1, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	602a      	str	r2, [r5, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f7f9 f8f7 	bl	8002f4a <_write>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_write_r+0x1e>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_write_r+0x1e>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	20000864 	.word	0x20000864

08009d6c <_close_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4d06      	ldr	r5, [pc, #24]	; (8009d88 <_close_r+0x1c>)
 8009d70:	2300      	movs	r3, #0
 8009d72:	4604      	mov	r4, r0
 8009d74:	4608      	mov	r0, r1
 8009d76:	602b      	str	r3, [r5, #0]
 8009d78:	f7f9 f903 	bl	8002f82 <_close>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_close_r+0x1a>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_close_r+0x1a>
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	20000864 	.word	0x20000864

08009d8c <_fstat_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d07      	ldr	r5, [pc, #28]	; (8009dac <_fstat_r+0x20>)
 8009d90:	2300      	movs	r3, #0
 8009d92:	4604      	mov	r4, r0
 8009d94:	4608      	mov	r0, r1
 8009d96:	4611      	mov	r1, r2
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	f7f9 f8fe 	bl	8002f9a <_fstat>
 8009d9e:	1c43      	adds	r3, r0, #1
 8009da0:	d102      	bne.n	8009da8 <_fstat_r+0x1c>
 8009da2:	682b      	ldr	r3, [r5, #0]
 8009da4:	b103      	cbz	r3, 8009da8 <_fstat_r+0x1c>
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	bd38      	pop	{r3, r4, r5, pc}
 8009daa:	bf00      	nop
 8009dac:	20000864 	.word	0x20000864

08009db0 <_isatty_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d06      	ldr	r5, [pc, #24]	; (8009dcc <_isatty_r+0x1c>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	602b      	str	r3, [r5, #0]
 8009dbc:	f7f9 f8fd 	bl	8002fba <_isatty>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_isatty_r+0x1a>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_isatty_r+0x1a>
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	20000864 	.word	0x20000864

08009dd0 <_lseek_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d07      	ldr	r5, [pc, #28]	; (8009df0 <_lseek_r+0x20>)
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4611      	mov	r1, r2
 8009dda:	2200      	movs	r2, #0
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	f7f9 f8f6 	bl	8002fd0 <_lseek>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_lseek_r+0x1e>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_lseek_r+0x1e>
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	20000864 	.word	0x20000864

08009df4 <_read_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d07      	ldr	r5, [pc, #28]	; (8009e14 <_read_r+0x20>)
 8009df8:	4604      	mov	r4, r0
 8009dfa:	4608      	mov	r0, r1
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	2200      	movs	r2, #0
 8009e00:	602a      	str	r2, [r5, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	f7f9 f884 	bl	8002f10 <_read>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_read_r+0x1e>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_read_r+0x1e>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	20000864 	.word	0x20000864

08009e18 <_init>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr

08009e24 <_fini>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	bf00      	nop
 8009e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2a:	bc08      	pop	{r3}
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	4770      	bx	lr
