
STM32F401_TX_KALMAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000924c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b8  080093f0  080093f0  000193f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009da8  08009da8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009da8  08009da8  00019da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009db0  08009db0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009db4  08009db4  00019db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009db8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b0  200001e8  08009fa0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  08009fa0  00020898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001233e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a34  00000000  00000000  00032556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00034f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00035df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001836b  00000000  00000000  00036b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011471  00000000  00000000  0004eedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b61d  00000000  00000000  0006034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb969  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d6c  00000000  00000000  000eb9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093d4 	.word	0x080093d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	080093d4 	.word	0x080093d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <NRF24_DelayMicroSeconds+0x3c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <NRF24_DelayMicroSeconds+0x40>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	0c9a      	lsrs	r2, r3, #18
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	fb02 f303 	mul.w	r3, r2, r3
 8000ece:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000ed0:	bf00      	nop
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1e5a      	subs	r2, r3, #1
 8000ed6:	60fa      	str	r2, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1fa      	bne.n	8000ed2 <NRF24_DelayMicroSeconds+0x22>
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	165e9f81 	.word	0x165e9f81

08000ef4 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d008      	beq.n	8000f14 <NRF24_csn+0x20>
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <NRF24_csn+0x38>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <NRF24_csn+0x3c>)
 8000f08:	8811      	ldrh	r1, [r2, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 fb65 	bl	80035dc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000f12:	e007      	b.n	8000f24 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <NRF24_csn+0x38>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <NRF24_csn+0x3c>)
 8000f1a:	8811      	ldrh	r1, [r2, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fb5c 	bl	80035dc <HAL_GPIO_WritePin>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000020c 	.word	0x2000020c
 8000f30:	20000210 	.word	0x20000210

08000f34 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d008      	beq.n	8000f54 <NRF24_ce+0x20>
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <NRF24_ce+0x38>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <NRF24_ce+0x3c>)
 8000f48:	8811      	ldrh	r1, [r2, #0]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 fb45 	bl	80035dc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000f52:	e007      	b.n	8000f64 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <NRF24_ce+0x38>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <NRF24_ce+0x3c>)
 8000f5a:	8811      	ldrh	r1, [r2, #0]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fb3c 	bl	80035dc <HAL_GPIO_WritePin>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000020c 	.word	0x2000020c
 8000f70:	20000212 	.word	0x20000212

08000f74 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff ffb8 	bl	8000ef4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000f8e:	f107 010c 	add.w	r1, r7, #12
 8000f92:	2364      	movs	r3, #100	; 0x64
 8000f94:	2201      	movs	r2, #1
 8000f96:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <NRF24_read_register+0x4c>)
 8000f98:	f003 ffe5 	bl	8004f66 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	1c59      	adds	r1, r3, #1
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <NRF24_read_register+0x4c>)
 8000fa8:	f004 f919 	bl	80051de <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000fac:	7b7b      	ldrb	r3, [r7, #13]
 8000fae:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f7ff ff9f 	bl	8000ef4 <NRF24_csn>
	return retData;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000214 	.word	0x20000214

08000fc4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff ff8d 	bl	8000ef4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	f003 031f 	and.w	r3, r3, #31
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000fe4:	f107 010c 	add.w	r1, r7, #12
 8000fe8:	2364      	movs	r3, #100	; 0x64
 8000fea:	2201      	movs	r2, #1
 8000fec:	4808      	ldr	r0, [pc, #32]	; (8001010 <NRF24_read_registerN+0x4c>)
 8000fee:	f003 ffba 	bl	8004f66 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	2364      	movs	r3, #100	; 0x64
 8000ff8:	6839      	ldr	r1, [r7, #0]
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <NRF24_read_registerN+0x4c>)
 8000ffc:	f004 f8ef 	bl	80051de <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001000:	2001      	movs	r0, #1
 8001002:	f7ff ff77 	bl	8000ef4 <NRF24_csn>
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000214 	.word	0x20000214

08001014 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	460a      	mov	r2, r1
 800101e:	71fb      	strb	r3, [r7, #7]
 8001020:	4613      	mov	r3, r2
 8001022:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001024:	2000      	movs	r0, #0
 8001026:	f7ff ff65 	bl	8000ef4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	b2db      	uxtb	r3, r3
 8001032:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001038:	f107 010c 	add.w	r1, r7, #12
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	2202      	movs	r2, #2
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <NRF24_write_register+0x40>)
 8001042:	f003 ff90 	bl	8004f66 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff ff54 	bl	8000ef4 <NRF24_csn>
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000214 	.word	0x20000214

08001058 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff ff43 	bl	8000ef4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f043 0320 	orr.w	r3, r3, #32
 8001074:	b2db      	uxtb	r3, r3
 8001076:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001078:	f107 010c 	add.w	r1, r7, #12
 800107c:	2364      	movs	r3, #100	; 0x64
 800107e:	2201      	movs	r2, #1
 8001080:	4808      	ldr	r0, [pc, #32]	; (80010a4 <NRF24_write_registerN+0x4c>)
 8001082:	f003 ff70 	bl	8004f66 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	b29a      	uxth	r2, r3
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	6839      	ldr	r1, [r7, #0]
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <NRF24_write_registerN+0x4c>)
 8001090:	f003 ff69 	bl	8004f66 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff2d 	bl	8000ef4 <NRF24_csn>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000214 	.word	0x20000214

080010a8 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ff1d 	bl	8000ef4 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80010ba:	23a0      	movs	r3, #160	; 0xa0
 80010bc:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80010be:	f107 010f 	add.w	r1, r7, #15
 80010c2:	2364      	movs	r3, #100	; 0x64
 80010c4:	2201      	movs	r2, #1
 80010c6:	4808      	ldr	r0, [pc, #32]	; (80010e8 <NRF24_write_payload+0x40>)
 80010c8:	f003 ff4d 	bl	8004f66 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <NRF24_write_payload+0x40>)
 80010d6:	f003 ff46 	bl	8004f66 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff ff0a 	bl	8000ef4 <NRF24_csn>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000214 	.word	0x20000214

080010ec <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80010f0:	21ff      	movs	r1, #255	; 0xff
 80010f2:	20e1      	movs	r0, #225	; 0xe1
 80010f4:	f7ff ff8e 	bl	8001014 <NRF24_write_register>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001100:	21ff      	movs	r1, #255	; 0xff
 8001102:	20e2      	movs	r0, #226	; 0xe2
 8001104:	f7ff ff86 	bl	8001014 <NRF24_write_register>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001112:	2007      	movs	r0, #7
 8001114:	f7ff ff2e 	bl	8000f74 <NRF24_read_register>
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800111c:	79fb      	ldrb	r3, [r7, #7]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001128:	b082      	sub	sp, #8
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800113c:	4b66      	ldr	r3, [pc, #408]	; (80012d8 <NRF24_begin+0x1b0>)
 800113e:	4618      	mov	r0, r3
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	2258      	movs	r2, #88	; 0x58
 8001146:	4619      	mov	r1, r3
 8001148:	f004 ff48 	bl	8005fdc <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800114c:	4a63      	ldr	r2, [pc, #396]	; (80012dc <NRF24_begin+0x1b4>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001152:	4a63      	ldr	r2, [pc, #396]	; (80012e0 <NRF24_begin+0x1b8>)
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001158:	4a62      	ldr	r2, [pc, #392]	; (80012e4 <NRF24_begin+0x1bc>)
 800115a:	883b      	ldrh	r3, [r7, #0]
 800115c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fec8 	bl	8000ef4 <NRF24_csn>
	NRF24_ce(0);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fee5 	bl	8000f34 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800116a:	2005      	movs	r0, #5
 800116c:	f001 ffa8 	bl	80030c0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001170:	2108      	movs	r1, #8
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff ff4e 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001178:	213f      	movs	r1, #63	; 0x3f
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff ff4a 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001180:	2103      	movs	r1, #3
 8001182:	2002      	movs	r0, #2
 8001184:	f7ff ff46 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001188:	2103      	movs	r1, #3
 800118a:	2003      	movs	r0, #3
 800118c:	f7ff ff42 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001190:	2103      	movs	r1, #3
 8001192:	2004      	movs	r0, #4
 8001194:	f7ff ff3e 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001198:	2102      	movs	r1, #2
 800119a:	2005      	movs	r0, #5
 800119c:	f7ff ff3a 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80011a0:	210f      	movs	r1, #15
 80011a2:	2006      	movs	r0, #6
 80011a4:	f7ff ff36 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80011a8:	210e      	movs	r1, #14
 80011aa:	2007      	movs	r0, #7
 80011ac:	f7ff ff32 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80011b0:	2100      	movs	r1, #0
 80011b2:	2008      	movs	r0, #8
 80011b4:	f7ff ff2e 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80011b8:	2100      	movs	r1, #0
 80011ba:	2009      	movs	r0, #9
 80011bc:	f7ff ff2a 	bl	8001014 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80011c0:	23e7      	movs	r3, #231	; 0xe7
 80011c2:	733b      	strb	r3, [r7, #12]
 80011c4:	23e7      	movs	r3, #231	; 0xe7
 80011c6:	72fb      	strb	r3, [r7, #11]
 80011c8:	23e7      	movs	r3, #231	; 0xe7
 80011ca:	72bb      	strb	r3, [r7, #10]
 80011cc:	23e7      	movs	r3, #231	; 0xe7
 80011ce:	727b      	strb	r3, [r7, #9]
 80011d0:	23e7      	movs	r3, #231	; 0xe7
 80011d2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	2205      	movs	r2, #5
 80011da:	4619      	mov	r1, r3
 80011dc:	200a      	movs	r0, #10
 80011de:	f7ff ff3b 	bl	8001058 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80011e2:	23c2      	movs	r3, #194	; 0xc2
 80011e4:	733b      	strb	r3, [r7, #12]
 80011e6:	23c2      	movs	r3, #194	; 0xc2
 80011e8:	72fb      	strb	r3, [r7, #11]
 80011ea:	23c2      	movs	r3, #194	; 0xc2
 80011ec:	72bb      	strb	r3, [r7, #10]
 80011ee:	23c2      	movs	r3, #194	; 0xc2
 80011f0:	727b      	strb	r3, [r7, #9]
 80011f2:	23c2      	movs	r3, #194	; 0xc2
 80011f4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2205      	movs	r2, #5
 80011fc:	4619      	mov	r1, r3
 80011fe:	200b      	movs	r0, #11
 8001200:	f7ff ff2a 	bl	8001058 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001204:	21c3      	movs	r1, #195	; 0xc3
 8001206:	200c      	movs	r0, #12
 8001208:	f7ff ff04 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800120c:	21c4      	movs	r1, #196	; 0xc4
 800120e:	200d      	movs	r0, #13
 8001210:	f7ff ff00 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001214:	21c5      	movs	r1, #197	; 0xc5
 8001216:	200e      	movs	r0, #14
 8001218:	f7ff fefc 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800121c:	21c6      	movs	r1, #198	; 0xc6
 800121e:	200f      	movs	r0, #15
 8001220:	f7ff fef8 	bl	8001014 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001224:	23e7      	movs	r3, #231	; 0xe7
 8001226:	733b      	strb	r3, [r7, #12]
 8001228:	23e7      	movs	r3, #231	; 0xe7
 800122a:	72fb      	strb	r3, [r7, #11]
 800122c:	23e7      	movs	r3, #231	; 0xe7
 800122e:	72bb      	strb	r3, [r7, #10]
 8001230:	23e7      	movs	r3, #231	; 0xe7
 8001232:	727b      	strb	r3, [r7, #9]
 8001234:	23e7      	movs	r3, #231	; 0xe7
 8001236:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	2205      	movs	r2, #5
 800123e:	4619      	mov	r1, r3
 8001240:	2010      	movs	r0, #16
 8001242:	f7ff ff09 	bl	8001058 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001246:	2100      	movs	r1, #0
 8001248:	2011      	movs	r0, #17
 800124a:	f7ff fee3 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800124e:	2100      	movs	r1, #0
 8001250:	2012      	movs	r0, #18
 8001252:	f7ff fedf 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001256:	2100      	movs	r1, #0
 8001258:	2013      	movs	r0, #19
 800125a:	f7ff fedb 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800125e:	2100      	movs	r1, #0
 8001260:	2014      	movs	r0, #20
 8001262:	f7ff fed7 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001266:	2100      	movs	r1, #0
 8001268:	2015      	movs	r0, #21
 800126a:	f7ff fed3 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800126e:	2100      	movs	r1, #0
 8001270:	2016      	movs	r0, #22
 8001272:	f7ff fecf 	bl	8001014 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8001276:	f000 fa89 	bl	800178c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800127a:	2100      	movs	r1, #0
 800127c:	201c      	movs	r0, #28
 800127e:	f7ff fec9 	bl	8001014 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001282:	2100      	movs	r1, #0
 8001284:	201d      	movs	r0, #29
 8001286:	f7ff fec5 	bl	8001014 <NRF24_write_register>
	printRadioSettings();
 800128a:	f000 fa99 	bl	80017c0 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800128e:	210f      	movs	r1, #15
 8001290:	200f      	movs	r0, #15
 8001292:	f000 f8ad 	bl	80013f0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8001296:	2003      	movs	r0, #3
 8001298:	f000 f927 	bl	80014ea <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800129c:	2001      	movs	r0, #1
 800129e:	f000 f95d 	bl	800155c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80012a2:	2002      	movs	r0, #2
 80012a4:	f000 f9a0 	bl	80015e8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80012a8:	f000 f8f2 	bl	8001490 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80012ac:	2020      	movs	r0, #32
 80012ae:	f000 f8cf 	bl	8001450 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80012b2:	f000 fa62 	bl	800177a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80012b6:	204c      	movs	r0, #76	; 0x4c
 80012b8:	f000 f8b5 	bl	8001426 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80012bc:	f7ff ff16 	bl	80010ec <NRF24_flush_tx>
	NRF24_flush_rx();
 80012c0:	f7ff ff1c 	bl	80010fc <NRF24_flush_rx>
	
	NRF24_powerDown();
 80012c4:	f000 f9b8 	bl	8001638 <NRF24_powerDown>
	
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012d2:	b002      	add	sp, #8
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000214 	.word	0x20000214
 80012dc:	2000020c 	.word	0x2000020c
 80012e0:	20000210 	.word	0x20000210
 80012e4:	20000212 	.word	0x20000212

080012e8 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff fe21 	bl	8000f34 <NRF24_ce>
	NRF24_flush_tx();
 80012f2:	f7ff fefb 	bl	80010ec <NRF24_flush_tx>
	NRF24_flush_rx();
 80012f6:	f7ff ff01 	bl	80010fc <NRF24_flush_rx>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 800130c:	f000 fa35 	bl	800177a <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	4619      	mov	r1, r3
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f9ce 	bl	80016b6 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 800131a:	f001 fec5 	bl	80030a8 <HAL_GetTick>
 800131e:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001320:	230a      	movs	r3, #10
 8001322:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001324:	f107 030d 	add.w	r3, r7, #13
 8001328:	2201      	movs	r2, #1
 800132a:	4619      	mov	r1, r3
 800132c:	2008      	movs	r0, #8
 800132e:	f7ff fe49 	bl	8000fc4 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001332:	f7ff feeb 	bl	800110c <NRF24_get_status>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001340:	2b00      	cmp	r3, #0
 8001342:	d107      	bne.n	8001354 <NRF24_write+0x54>
 8001344:	f001 feb0 	bl	80030a8 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d8e7      	bhi.n	8001324 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001354:	f107 010b 	add.w	r1, r7, #11
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <NRF24_write+0x90>)
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f9d8 	bl	8001714 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001364:	7b3b      	ldrb	r3, [r7, #12]
 8001366:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <NRF24_write+0x90>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001370:	f000 f886 	bl	8001480 <NRF24_getDynamicPayloadSize>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <NRF24_write+0x94>)
 800137a:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 800137c:	f000 f80c 	bl	8001398 <NRF24_available>
	NRF24_flush_tx();
 8001380:	f7ff feb4 	bl	80010ec <NRF24_flush_tx>
	return retStatus;
 8001384:	7bbb      	ldrb	r3, [r7, #14]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000204 	.word	0x20000204
 8001394:	20000205 	.word	0x20000205

08001398 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800139c:	2000      	movs	r0, #0
 800139e:	f000 f95a 	bl	8001656 <NRF24_availablePipe>
 80013a2:	4603      	mov	r3, r0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80013b2:	463b      	mov	r3, r7
 80013b4:	2205      	movs	r2, #5
 80013b6:	4619      	mov	r1, r3
 80013b8:	200a      	movs	r0, #10
 80013ba:	f7ff fe4d 	bl	8001058 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80013be:	463b      	mov	r3, r7
 80013c0:	2205      	movs	r2, #5
 80013c2:	4619      	mov	r1, r3
 80013c4:	2010      	movs	r0, #16
 80013c6:	f7ff fe47 	bl	8001058 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 80013ca:	2320      	movs	r3, #32
 80013cc:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <NRF24_openWritingPipe+0x44>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	7bfa      	ldrb	r2, [r7, #15]
 80013d4:	4293      	cmp	r3, r2
 80013d6:	bf28      	it	cs
 80013d8:	4613      	movcs	r3, r2
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	2011      	movs	r0, #17
 80013e0:	f7ff fe18 	bl	8001014 <NRF24_write_register>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000206 	.word	0x20000206

080013f0 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4613      	mov	r3, r2
 80013fe:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	b25a      	sxtb	r2, r3
 8001406:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	b25b      	sxtb	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b25b      	sxtb	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4619      	mov	r1, r3
 8001418:	2004      	movs	r0, #4
 800141a:	f7ff fdfb 	bl	8001014 <NRF24_write_register>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001430:	237f      	movs	r3, #127	; 0x7f
 8001432:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4293      	cmp	r3, r2
 800143a:	bf28      	it	cs
 800143c:	4613      	movcs	r3, r2
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4619      	mov	r1, r3
 8001442:	2005      	movs	r0, #5
 8001444:	f7ff fde6 	bl	8001014 <NRF24_write_register>
}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800145a:	2320      	movs	r3, #32
 800145c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4293      	cmp	r3, r2
 8001464:	bf28      	it	cs
 8001466:	4613      	movcs	r3, r2
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <NRF24_setPayloadSize+0x2c>)
 800146c:	701a      	strb	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000206 	.word	0x20000206

08001480 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001484:	2060      	movs	r0, #96	; 0x60
 8001486:	f7ff fd75 	bl	8000f74 <NRF24_read_register>
 800148a:	4603      	mov	r3, r0
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}

08001490 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001494:	201d      	movs	r0, #29
 8001496:	f7ff fd6d 	bl	8000f74 <NRF24_read_register>
 800149a:	4603      	mov	r3, r0
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	4619      	mov	r1, r3
 80014a4:	201d      	movs	r0, #29
 80014a6:	f7ff fdb5 	bl	8001014 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80014aa:	2100      	movs	r1, #0
 80014ac:	201c      	movs	r0, #28
 80014ae:	f7ff fdb1 	bl	8001014 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80014b2:	4b02      	ldr	r3, [pc, #8]	; (80014bc <NRF24_disableDynamicPayloads+0x2c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000207 	.word	0x20000207

080014c0 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80014d0:	213f      	movs	r1, #63	; 0x3f
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7ff fd9e 	bl	8001014 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80014d8:	e003      	b.n	80014e2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80014da:	2100      	movs	r1, #0
 80014dc:	2001      	movs	r0, #1
 80014de:	f7ff fd99 	bl	8001014 <NRF24_write_register>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80014f4:	2006      	movs	r0, #6
 80014f6:	f7ff fd3d 	bl	8000f74 <NRF24_read_register>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	f023 0306 	bic.w	r3, r3, #6
 8001504:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d104      	bne.n	8001516 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f043 0306 	orr.w	r3, r3, #6
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	e019      	b.n	800154a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d104      	bne.n	8001526 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e011      	b.n	800154a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d104      	bne.n	8001536 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e009      	b.n	800154a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b04      	cmp	r3, #4
 8001540:	d103      	bne.n	800154a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	f043 0306 	orr.w	r3, r3, #6
 8001548:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	4619      	mov	r1, r3
 800154e:	2006      	movs	r0, #6
 8001550:	f7ff fd60 	bl	8001014 <NRF24_write_register>
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800156a:	2006      	movs	r0, #6
 800156c:	f7ff fd02 	bl	8000f74 <NRF24_read_register>
 8001570:	4603      	mov	r3, r0
 8001572:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <NRF24_setDataRate+0x88>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001580:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d107      	bne.n	8001598 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <NRF24_setDataRate+0x88>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	f043 0320 	orr.w	r3, r3, #32
 8001594:	73bb      	strb	r3, [r7, #14]
 8001596:	e00d      	b.n	80015b4 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d107      	bne.n	80015ae <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <NRF24_setDataRate+0x88>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	73bb      	strb	r3, [r7, #14]
 80015ac:	e002      	b.n	80015b4 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <NRF24_setDataRate+0x88>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80015b4:	7bbb      	ldrb	r3, [r7, #14]
 80015b6:	4619      	mov	r1, r3
 80015b8:	2006      	movs	r0, #6
 80015ba:	f7ff fd2b 	bl	8001014 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80015be:	2006      	movs	r0, #6
 80015c0:	f7ff fcd8 	bl	8000f74 <NRF24_read_register>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d102      	bne.n	80015d4 <NRF24_setDataRate+0x78>
  {
    result = true;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e002      	b.n	80015da <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <NRF24_setDataRate+0x88>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000208 	.word	0x20000208

080015e8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fcbe 	bl	8000f74 <NRF24_read_register>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f023 030c 	bic.w	r3, r3, #12
 80015fe:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00f      	beq.n	8001626 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d104      	bne.n	8001616 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e007      	b.n	8001626 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	4619      	mov	r1, r3
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fcf2 	bl	8001014 <NRF24_write_register>
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fc99 	bl	8000f74 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f023 0302 	bic.w	r3, r3, #2
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fce1 	bl	8001014 <NRF24_write_register>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}

08001656 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800165e:	f7ff fd55 	bl	800110c <NRF24_get_status>
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001676:	7bbb      	ldrb	r3, [r7, #14]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d017      	beq.n	80016ac <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	085b      	lsrs	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	b2da      	uxtb	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001692:	2140      	movs	r1, #64	; 0x40
 8001694:	2007      	movs	r0, #7
 8001696:	f7ff fcbd 	bl	8001014 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80016a4:	2120      	movs	r1, #32
 80016a6:	2007      	movs	r0, #7
 80016a8:	f7ff fcb4 	bl	8001014 <NRF24_write_register>
    }
  }
  return result;
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff fc36 	bl	8000f34 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff fc53 	bl	8000f74 <NRF24_read_register>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4619      	mov	r1, r3
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fc98 	bl	8001014 <NRF24_write_register>
  NRF24_ce(1);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fc25 	bl	8000f34 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 80016ea:	2096      	movs	r0, #150	; 0x96
 80016ec:	f7ff fbe0 	bl	8000eb0 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	4619      	mov	r1, r3
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fcd7 	bl	80010a8 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff fc1a 	bl	8000f34 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001700:	200f      	movs	r0, #15
 8001702:	f7ff fbd5 	bl	8000eb0 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fc14 	bl	8000f34 <NRF24_ce>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001720:	f7ff fcf4 	bl	800110c <NRF24_get_status>
 8001724:	4603      	mov	r3, r0
 8001726:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800172e:	2170      	movs	r1, #112	; 0x70
 8001730:	2007      	movs	r0, #7
 8001732:	f7ff fc6f 	bl	8001014 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	f003 0320 	and.w	r3, r3, #32
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf14      	ite	ne
 8001740:	2301      	movne	r3, #1
 8001742:	2300      	moveq	r3, #0
 8001744:	b2da      	uxtb	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf14      	ite	ne
 8001754:	2301      	movne	r3, #1
 8001756:	2300      	moveq	r3, #0
 8001758:	b2da      	uxtb	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	701a      	strb	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800177e:	2170      	movs	r1, #112	; 0x70
 8001780:	2007      	movs	r0, #7
 8001782:	f7ff fc47 	bl	8001014 <NRF24_write_register>
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fbae 	bl	8000ef4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001798:	2350      	movs	r3, #80	; 0x50
 800179a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800179c:	2373      	movs	r3, #115	; 0x73
 800179e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80017a0:	1d39      	adds	r1, r7, #4
 80017a2:	2364      	movs	r3, #100	; 0x64
 80017a4:	2202      	movs	r2, #2
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <NRF24_ACTIVATE_cmd+0x30>)
 80017a8:	f003 fbdd 	bl	8004f66 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff fba1 	bl	8000ef4 <NRF24_csn>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000214 	.word	0x20000214

080017c0 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80017c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c2:	b0a1      	sub	sp, #132	; 0x84
 80017c4:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	49c3      	ldr	r1, [pc, #780]	; (8001ad8 <printRadioSettings+0x318>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f005 f885 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fd02 	bl	80001e0 <strlen>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	f107 0108 	add.w	r1, r7, #8
 80017e4:	230a      	movs	r3, #10
 80017e6:	48bd      	ldr	r0, [pc, #756]	; (8001adc <printRadioSettings+0x31c>)
 80017e8:	f004 f929 	bl	8005a3e <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff fbc1 	bl	8000f74 <NRF24_read_register>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80017f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001804:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <printRadioSettings+0x5e>
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	49b2      	ldr	r1, [pc, #712]	; (8001ae0 <printRadioSettings+0x320>)
 8001816:	4618      	mov	r0, r3
 8001818:	f005 f860 	bl	80068dc <siprintf>
 800181c:	e00c      	b.n	8001838 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	49b0      	ldr	r1, [pc, #704]	; (8001ae4 <printRadioSettings+0x324>)
 8001824:	4618      	mov	r0, r3
 8001826:	f005 f859 	bl	80068dc <siprintf>
 800182a:	e005      	b.n	8001838 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	49ad      	ldr	r1, [pc, #692]	; (8001ae8 <printRadioSettings+0x328>)
 8001832:	4618      	mov	r0, r3
 8001834:	f005 f852 	bl	80068dc <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001838:	f107 0308 	add.w	r3, r7, #8
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fccf 	bl	80001e0 <strlen>
 8001842:	4603      	mov	r3, r0
 8001844:	b29a      	uxth	r2, r3
 8001846:	f107 0108 	add.w	r1, r7, #8
 800184a:	230a      	movs	r3, #10
 800184c:	48a3      	ldr	r0, [pc, #652]	; (8001adc <printRadioSettings+0x31c>)
 800184e:	f004 f8f6 	bl	8005a3e <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001852:	2001      	movs	r0, #1
 8001854:	f7ff fb8e 	bl	8000f74 <NRF24_read_register>
 8001858:	4603      	mov	r3, r0
 800185a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800185e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001862:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001866:	2b00      	cmp	r3, #0
 8001868:	bfcc      	ite	gt
 800186a:	2301      	movgt	r3, #1
 800186c:	2300      	movle	r3, #0
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001872:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001876:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800187a:	2b00      	cmp	r3, #0
 800187c:	bfcc      	ite	gt
 800187e:	2301      	movgt	r3, #1
 8001880:	2300      	movle	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001886:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800188a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800188e:	2b00      	cmp	r3, #0
 8001890:	bfcc      	ite	gt
 8001892:	2301      	movgt	r3, #1
 8001894:	2300      	movle	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800189a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800189e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	bfcc      	ite	gt
 80018a6:	2301      	movgt	r3, #1
 80018a8:	2300      	movle	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018b2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bfcc      	ite	gt
 80018ba:	2301      	movgt	r3, #1
 80018bc:	2300      	movle	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018c6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	bfcc      	ite	gt
 80018ce:	2301      	movgt	r3, #1
 80018d0:	2300      	movle	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	f107 0008 	add.w	r0, r7, #8
 80018d8:	9303      	str	r3, [sp, #12]
 80018da:	9402      	str	r4, [sp, #8]
 80018dc:	9101      	str	r1, [sp, #4]
 80018de:	9200      	str	r2, [sp, #0]
 80018e0:	4633      	mov	r3, r6
 80018e2:	462a      	mov	r2, r5
 80018e4:	4981      	ldr	r1, [pc, #516]	; (8001aec <printRadioSettings+0x32c>)
 80018e6:	f004 fff9 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fc76 	bl	80001e0 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f107 0108 	add.w	r1, r7, #8
 80018fc:	230a      	movs	r3, #10
 80018fe:	4877      	ldr	r0, [pc, #476]	; (8001adc <printRadioSettings+0x31c>)
 8001900:	f004 f89d 	bl	8005a3e <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001904:	2002      	movs	r0, #2
 8001906:	f7ff fb35 	bl	8000f74 <NRF24_read_register>
 800190a:	4603      	mov	r3, r0
 800190c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001910:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001914:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001918:	2b00      	cmp	r3, #0
 800191a:	bfcc      	ite	gt
 800191c:	2301      	movgt	r3, #1
 800191e:	2300      	movle	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001924:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001928:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800192c:	2b00      	cmp	r3, #0
 800192e:	bfcc      	ite	gt
 8001930:	2301      	movgt	r3, #1
 8001932:	2300      	movle	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001938:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800193c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001940:	2b00      	cmp	r3, #0
 8001942:	bfcc      	ite	gt
 8001944:	2301      	movgt	r3, #1
 8001946:	2300      	movle	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800194c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001950:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001954:	2b00      	cmp	r3, #0
 8001956:	bfcc      	ite	gt
 8001958:	2301      	movgt	r3, #1
 800195a:	2300      	movle	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001960:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001964:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001968:	2b00      	cmp	r3, #0
 800196a:	bfcc      	ite	gt
 800196c:	2301      	movgt	r3, #1
 800196e:	2300      	movle	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001974:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001978:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800197c:	2b00      	cmp	r3, #0
 800197e:	bfcc      	ite	gt
 8001980:	2301      	movgt	r3, #1
 8001982:	2300      	movle	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f107 0008 	add.w	r0, r7, #8
 800198a:	9303      	str	r3, [sp, #12]
 800198c:	9402      	str	r4, [sp, #8]
 800198e:	9101      	str	r1, [sp, #4]
 8001990:	9200      	str	r2, [sp, #0]
 8001992:	4633      	mov	r3, r6
 8001994:	462a      	mov	r2, r5
 8001996:	4956      	ldr	r1, [pc, #344]	; (8001af0 <printRadioSettings+0x330>)
 8001998:	f004 ffa0 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fc1d 	bl	80001e0 <strlen>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	f107 0108 	add.w	r1, r7, #8
 80019ae:	230a      	movs	r3, #10
 80019b0:	484a      	ldr	r0, [pc, #296]	; (8001adc <printRadioSettings+0x31c>)
 80019b2:	f004 f844 	bl	8005a3e <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80019b6:	2003      	movs	r0, #3
 80019b8:	f7ff fadc 	bl	8000f74 <NRF24_read_register>
 80019bc:	4603      	mov	r3, r0
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80019c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019ca:	3302      	adds	r3, #2
 80019cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80019d0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	4946      	ldr	r1, [pc, #280]	; (8001af4 <printRadioSettings+0x334>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f004 ff7e 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fbfb 	bl	80001e0 <strlen>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	f107 0108 	add.w	r1, r7, #8
 80019f2:	230a      	movs	r3, #10
 80019f4:	4839      	ldr	r0, [pc, #228]	; (8001adc <printRadioSettings+0x31c>)
 80019f6:	f004 f822 	bl	8005a3e <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80019fa:	2005      	movs	r0, #5
 80019fc:	f7ff faba 	bl	8000f74 <NRF24_read_register>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001a06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	4939      	ldr	r1, [pc, #228]	; (8001af8 <printRadioSettings+0x338>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f004 ff61 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fbde 	bl	80001e0 <strlen>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f107 0108 	add.w	r1, r7, #8
 8001a2c:	230a      	movs	r3, #10
 8001a2e:	482b      	ldr	r0, [pc, #172]	; (8001adc <printRadioSettings+0x31c>)
 8001a30:	f004 f805 	bl	8005a3e <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001a34:	2006      	movs	r0, #6
 8001a36:	f7ff fa9d 	bl	8000f74 <NRF24_read_register>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001a40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <printRadioSettings+0x29a>
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	492a      	ldr	r1, [pc, #168]	; (8001afc <printRadioSettings+0x33c>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 ff42 	bl	80068dc <siprintf>
 8001a58:	e005      	b.n	8001a66 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	4928      	ldr	r1, [pc, #160]	; (8001b00 <printRadioSettings+0x340>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f004 ff3b 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fbb8 	bl	80001e0 <strlen>
 8001a70:	4603      	mov	r3, r0
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	f107 0108 	add.w	r1, r7, #8
 8001a78:	230a      	movs	r3, #10
 8001a7a:	4818      	ldr	r0, [pc, #96]	; (8001adc <printRadioSettings+0x31c>)
 8001a7c:	f003 ffdf 	bl	8005a3e <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001a80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a84:	f003 0306 	and.w	r3, r3, #6
 8001a88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001a8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001a96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <printRadioSettings+0x2ec>
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4918      	ldr	r1, [pc, #96]	; (8001b04 <printRadioSettings+0x344>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 ff19 	bl	80068dc <siprintf>
 8001aaa:	e03b      	b.n	8001b24 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001aac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d106      	bne.n	8001ac2 <printRadioSettings+0x302>
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4913      	ldr	r1, [pc, #76]	; (8001b08 <printRadioSettings+0x348>)
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 ff0e 	bl	80068dc <siprintf>
 8001ac0:	e030      	b.n	8001b24 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d122      	bne.n	8001b10 <printRadioSettings+0x350>
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	490f      	ldr	r1, [pc, #60]	; (8001b0c <printRadioSettings+0x34c>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 ff03 	bl	80068dc <siprintf>
 8001ad6:	e025      	b.n	8001b24 <printRadioSettings+0x364>
 8001ad8:	080093f0 	.word	0x080093f0
 8001adc:	2000026c 	.word	0x2000026c
 8001ae0:	08009424 	.word	0x08009424
 8001ae4:	08009440 	.word	0x08009440
 8001ae8:	0800945c 	.word	0x0800945c
 8001aec:	08009470 	.word	0x08009470
 8001af0:	080094b4 	.word	0x080094b4
 8001af4:	08009500 	.word	0x08009500
 8001af8:	0800951c 	.word	0x0800951c
 8001afc:	08009530 	.word	0x08009530
 8001b00:	08009548 	.word	0x08009548
 8001b04:	08009560 	.word	0x08009560
 8001b08:	08009574 	.word	0x08009574
 8001b0c:	08009588 	.word	0x08009588
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001b10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d105      	bne.n	8001b24 <printRadioSettings+0x364>
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	49d7      	ldr	r1, [pc, #860]	; (8001e7c <printRadioSettings+0x6bc>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fedc 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fb59 	bl	80001e0 <strlen>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	f107 0108 	add.w	r1, r7, #8
 8001b36:	230a      	movs	r3, #10
 8001b38:	48d1      	ldr	r0, [pc, #836]	; (8001e80 <printRadioSettings+0x6c0>)
 8001b3a:	f003 ff80 	bl	8005a3e <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001b3e:	463b      	mov	r3, r7
 8001b40:	2205      	movs	r2, #5
 8001b42:	4619      	mov	r1, r3
 8001b44:	200a      	movs	r0, #10
 8001b46:	f7ff fa3d 	bl	8000fc4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001b4a:	793b      	ldrb	r3, [r7, #4]
 8001b4c:	461c      	mov	r4, r3
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	461d      	mov	r5, r3
 8001b52:	78bb      	ldrb	r3, [r7, #2]
 8001b54:	787a      	ldrb	r2, [r7, #1]
 8001b56:	7839      	ldrb	r1, [r7, #0]
 8001b58:	f107 0008 	add.w	r0, r7, #8
 8001b5c:	9102      	str	r1, [sp, #8]
 8001b5e:	9201      	str	r2, [sp, #4]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	462b      	mov	r3, r5
 8001b64:	4622      	mov	r2, r4
 8001b66:	49c7      	ldr	r1, [pc, #796]	; (8001e84 <printRadioSettings+0x6c4>)
 8001b68:	f004 feb8 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fb35 	bl	80001e0 <strlen>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	f107 0108 	add.w	r1, r7, #8
 8001b7e:	230a      	movs	r3, #10
 8001b80:	48bf      	ldr	r0, [pc, #764]	; (8001e80 <printRadioSettings+0x6c0>)
 8001b82:	f003 ff5c 	bl	8005a3e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001b86:	463b      	mov	r3, r7
 8001b88:	2205      	movs	r2, #5
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	200b      	movs	r0, #11
 8001b8e:	f7ff fa19 	bl	8000fc4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001b92:	793b      	ldrb	r3, [r7, #4]
 8001b94:	461c      	mov	r4, r3
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	461d      	mov	r5, r3
 8001b9a:	78bb      	ldrb	r3, [r7, #2]
 8001b9c:	787a      	ldrb	r2, [r7, #1]
 8001b9e:	7839      	ldrb	r1, [r7, #0]
 8001ba0:	f107 0008 	add.w	r0, r7, #8
 8001ba4:	9102      	str	r1, [sp, #8]
 8001ba6:	9201      	str	r2, [sp, #4]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	462b      	mov	r3, r5
 8001bac:	4622      	mov	r2, r4
 8001bae:	49b6      	ldr	r1, [pc, #728]	; (8001e88 <printRadioSettings+0x6c8>)
 8001bb0:	f004 fe94 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fb11 	bl	80001e0 <strlen>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	f107 0108 	add.w	r1, r7, #8
 8001bc6:	230a      	movs	r3, #10
 8001bc8:	48ad      	ldr	r0, [pc, #692]	; (8001e80 <printRadioSettings+0x6c0>)
 8001bca:	f003 ff38 	bl	8005a3e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001bce:	463b      	mov	r3, r7
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	200c      	movs	r0, #12
 8001bd6:	f7ff f9f5 	bl	8000fc4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001bda:	783b      	ldrb	r3, [r7, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f107 0308 	add.w	r3, r7, #8
 8001be2:	49aa      	ldr	r1, [pc, #680]	; (8001e8c <printRadioSettings+0x6cc>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f004 fe79 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe faf6 	bl	80001e0 <strlen>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	f107 0108 	add.w	r1, r7, #8
 8001bfc:	230a      	movs	r3, #10
 8001bfe:	48a0      	ldr	r0, [pc, #640]	; (8001e80 <printRadioSettings+0x6c0>)
 8001c00:	f003 ff1d 	bl	8005a3e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001c04:	463b      	mov	r3, r7
 8001c06:	2201      	movs	r2, #1
 8001c08:	4619      	mov	r1, r3
 8001c0a:	200d      	movs	r0, #13
 8001c0c:	f7ff f9da 	bl	8000fc4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001c10:	783b      	ldrb	r3, [r7, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	499d      	ldr	r1, [pc, #628]	; (8001e90 <printRadioSettings+0x6d0>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 fe5e 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fadb 	bl	80001e0 <strlen>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	f107 0108 	add.w	r1, r7, #8
 8001c32:	230a      	movs	r3, #10
 8001c34:	4892      	ldr	r0, [pc, #584]	; (8001e80 <printRadioSettings+0x6c0>)
 8001c36:	f003 ff02 	bl	8005a3e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4619      	mov	r1, r3
 8001c40:	200e      	movs	r0, #14
 8001c42:	f7ff f9bf 	bl	8000fc4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001c46:	783b      	ldrb	r3, [r7, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	4991      	ldr	r1, [pc, #580]	; (8001e94 <printRadioSettings+0x6d4>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f004 fe43 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fac0 	bl	80001e0 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	f107 0108 	add.w	r1, r7, #8
 8001c68:	230a      	movs	r3, #10
 8001c6a:	4885      	ldr	r0, [pc, #532]	; (8001e80 <printRadioSettings+0x6c0>)
 8001c6c:	f003 fee7 	bl	8005a3e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001c70:	463b      	mov	r3, r7
 8001c72:	2201      	movs	r2, #1
 8001c74:	4619      	mov	r1, r3
 8001c76:	200f      	movs	r0, #15
 8001c78:	f7ff f9a4 	bl	8000fc4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001c7c:	783b      	ldrb	r3, [r7, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	4984      	ldr	r1, [pc, #528]	; (8001e98 <printRadioSettings+0x6d8>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fe28 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe faa5 	bl	80001e0 <strlen>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	f107 0108 	add.w	r1, r7, #8
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	4877      	ldr	r0, [pc, #476]	; (8001e80 <printRadioSettings+0x6c0>)
 8001ca2:	f003 fecc 	bl	8005a3e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	2205      	movs	r2, #5
 8001caa:	4619      	mov	r1, r3
 8001cac:	2010      	movs	r0, #16
 8001cae:	f7ff f989 	bl	8000fc4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001cb2:	793b      	ldrb	r3, [r7, #4]
 8001cb4:	461c      	mov	r4, r3
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	461d      	mov	r5, r3
 8001cba:	78bb      	ldrb	r3, [r7, #2]
 8001cbc:	787a      	ldrb	r2, [r7, #1]
 8001cbe:	7839      	ldrb	r1, [r7, #0]
 8001cc0:	f107 0008 	add.w	r0, r7, #8
 8001cc4:	9102      	str	r1, [sp, #8]
 8001cc6:	9201      	str	r2, [sp, #4]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	462b      	mov	r3, r5
 8001ccc:	4622      	mov	r2, r4
 8001cce:	4973      	ldr	r1, [pc, #460]	; (8001e9c <printRadioSettings+0x6dc>)
 8001cd0:	f004 fe04 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fa81 	bl	80001e0 <strlen>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	f107 0108 	add.w	r1, r7, #8
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	4865      	ldr	r0, [pc, #404]	; (8001e80 <printRadioSettings+0x6c0>)
 8001cea:	f003 fea8 	bl	8005a3e <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001cee:	2011      	movs	r0, #17
 8001cf0:	f7ff f940 	bl	8000f74 <NRF24_read_register>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001cfa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	4966      	ldr	r1, [pc, #408]	; (8001ea0 <printRadioSettings+0x6e0>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f004 fde7 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fa64 	bl	80001e0 <strlen>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f107 0108 	add.w	r1, r7, #8
 8001d20:	230a      	movs	r3, #10
 8001d22:	4857      	ldr	r0, [pc, #348]	; (8001e80 <printRadioSettings+0x6c0>)
 8001d24:	f003 fe8b 	bl	8005a3e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001d28:	2012      	movs	r0, #18
 8001d2a:	f7ff f923 	bl	8000f74 <NRF24_read_register>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001d34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	4958      	ldr	r1, [pc, #352]	; (8001ea4 <printRadioSettings+0x6e4>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 fdca 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fa47 	bl	80001e0 <strlen>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f107 0108 	add.w	r1, r7, #8
 8001d5a:	230a      	movs	r3, #10
 8001d5c:	4848      	ldr	r0, [pc, #288]	; (8001e80 <printRadioSettings+0x6c0>)
 8001d5e:	f003 fe6e 	bl	8005a3e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001d62:	2013      	movs	r0, #19
 8001d64:	f7ff f906 	bl	8000f74 <NRF24_read_register>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001d6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	494b      	ldr	r1, [pc, #300]	; (8001ea8 <printRadioSettings+0x6e8>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 fdad 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fa2a 	bl	80001e0 <strlen>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f107 0108 	add.w	r1, r7, #8
 8001d94:	230a      	movs	r3, #10
 8001d96:	483a      	ldr	r0, [pc, #232]	; (8001e80 <printRadioSettings+0x6c0>)
 8001d98:	f003 fe51 	bl	8005a3e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001d9c:	2014      	movs	r0, #20
 8001d9e:	f7ff f8e9 	bl	8000f74 <NRF24_read_register>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001da8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	493d      	ldr	r1, [pc, #244]	; (8001eac <printRadioSettings+0x6ec>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f004 fd90 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001dbc:	f107 0308 	add.w	r3, r7, #8
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fa0d 	bl	80001e0 <strlen>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	f107 0108 	add.w	r1, r7, #8
 8001dce:	230a      	movs	r3, #10
 8001dd0:	482b      	ldr	r0, [pc, #172]	; (8001e80 <printRadioSettings+0x6c0>)
 8001dd2:	f003 fe34 	bl	8005a3e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001dd6:	2015      	movs	r0, #21
 8001dd8:	f7ff f8cc 	bl	8000f74 <NRF24_read_register>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001de2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4930      	ldr	r1, [pc, #192]	; (8001eb0 <printRadioSettings+0x6f0>)
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 fd73 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe f9f0 	bl	80001e0 <strlen>
 8001e00:	4603      	mov	r3, r0
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f107 0108 	add.w	r1, r7, #8
 8001e08:	230a      	movs	r3, #10
 8001e0a:	481d      	ldr	r0, [pc, #116]	; (8001e80 <printRadioSettings+0x6c0>)
 8001e0c:	f003 fe17 	bl	8005a3e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001e10:	2016      	movs	r0, #22
 8001e12:	f7ff f8af 	bl	8000f74 <NRF24_read_register>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001e1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e24:	f107 0308 	add.w	r3, r7, #8
 8001e28:	4922      	ldr	r1, [pc, #136]	; (8001eb4 <printRadioSettings+0x6f4>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 fd56 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe f9d3 	bl	80001e0 <strlen>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	f107 0108 	add.w	r1, r7, #8
 8001e42:	230a      	movs	r3, #10
 8001e44:	480e      	ldr	r0, [pc, #56]	; (8001e80 <printRadioSettings+0x6c0>)
 8001e46:	f003 fdfa 	bl	8005a3e <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001e4a:	201c      	movs	r0, #28
 8001e4c:	f7ff f892 	bl	8000f74 <NRF24_read_register>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e5a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bfcc      	ite	gt
 8001e62:	2301      	movgt	r3, #1
 8001e64:	2300      	movle	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e6e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bfcc      	ite	gt
 8001e76:	2301      	movgt	r3, #1
 8001e78:	2300      	movle	r3, #0
 8001e7a:	e01d      	b.n	8001eb8 <printRadioSettings+0x6f8>
 8001e7c:	0800959c 	.word	0x0800959c
 8001e80:	2000026c 	.word	0x2000026c
 8001e84:	080095b0 	.word	0x080095b0
 8001e88:	080095e0 	.word	0x080095e0
 8001e8c:	08009610 	.word	0x08009610
 8001e90:	08009638 	.word	0x08009638
 8001e94:	08009660 	.word	0x08009660
 8001e98:	08009688 	.word	0x08009688
 8001e9c:	080096b0 	.word	0x080096b0
 8001ea0:	080096dc 	.word	0x080096dc
 8001ea4:	080096f8 	.word	0x080096f8
 8001ea8:	08009714 	.word	0x08009714
 8001eac:	08009730 	.word	0x08009730
 8001eb0:	0800974c 	.word	0x0800974c
 8001eb4:	08009768 	.word	0x08009768
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ebc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ec0:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bfcc      	ite	gt
 8001ec8:	2301      	movgt	r3, #1
 8001eca:	2300      	movle	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ed0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ed4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bfcc      	ite	gt
 8001edc:	2301      	movgt	r3, #1
 8001ede:	2300      	movle	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ee4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ee8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bfcc      	ite	gt
 8001ef0:	2301      	movgt	r3, #1
 8001ef2:	2300      	movle	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ef8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001efc:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bfcc      	ite	gt
 8001f04:	2301      	movgt	r3, #1
 8001f06:	2300      	movle	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f107 0008 	add.w	r0, r7, #8
 8001f0e:	9303      	str	r3, [sp, #12]
 8001f10:	9402      	str	r4, [sp, #8]
 8001f12:	9101      	str	r1, [sp, #4]
 8001f14:	9200      	str	r2, [sp, #0]
 8001f16:	4633      	mov	r3, r6
 8001f18:	462a      	mov	r2, r5
 8001f1a:	4936      	ldr	r1, [pc, #216]	; (8001ff4 <printRadioSettings+0x834>)
 8001f1c:	f004 fcde 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f20:	f107 0308 	add.w	r3, r7, #8
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe f95b 	bl	80001e0 <strlen>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	f107 0108 	add.w	r1, r7, #8
 8001f32:	230a      	movs	r3, #10
 8001f34:	4830      	ldr	r0, [pc, #192]	; (8001ff8 <printRadioSettings+0x838>)
 8001f36:	f003 fd82 	bl	8005a3e <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001f3a:	201d      	movs	r0, #29
 8001f3c:	f7ff f81a 	bl	8000f74 <NRF24_read_register>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001f46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <printRadioSettings+0x7a0>
 8001f52:	f107 0308 	add.w	r3, r7, #8
 8001f56:	4929      	ldr	r1, [pc, #164]	; (8001ffc <printRadioSettings+0x83c>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f004 fcbf 	bl	80068dc <siprintf>
 8001f5e:	e005      	b.n	8001f6c <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001f60:	f107 0308 	add.w	r3, r7, #8
 8001f64:	4926      	ldr	r1, [pc, #152]	; (8002000 <printRadioSettings+0x840>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f004 fcb8 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f6c:	f107 0308 	add.w	r3, r7, #8
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe f935 	bl	80001e0 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	f107 0108 	add.w	r1, r7, #8
 8001f7e:	230a      	movs	r3, #10
 8001f80:	481d      	ldr	r0, [pc, #116]	; (8001ff8 <printRadioSettings+0x838>)
 8001f82:	f003 fd5c 	bl	8005a3e <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001f86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d006      	beq.n	8001fa0 <printRadioSettings+0x7e0>
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	491b      	ldr	r1, [pc, #108]	; (8002004 <printRadioSettings+0x844>)
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f004 fc9f 	bl	80068dc <siprintf>
 8001f9e:	e005      	b.n	8001fac <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	4918      	ldr	r1, [pc, #96]	; (8002008 <printRadioSettings+0x848>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fc98 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001fac:	f107 0308 	add.w	r3, r7, #8
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe f915 	bl	80001e0 <strlen>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	f107 0108 	add.w	r1, r7, #8
 8001fbe:	230a      	movs	r3, #10
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <printRadioSettings+0x838>)
 8001fc2:	f003 fd3c 	bl	8005a3e <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	4910      	ldr	r1, [pc, #64]	; (800200c <printRadioSettings+0x84c>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f004 fc85 	bl	80068dc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe f902 	bl	80001e0 <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	f107 0108 	add.w	r1, r7, #8
 8001fe4:	230a      	movs	r3, #10
 8001fe6:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <printRadioSettings+0x838>)
 8001fe8:	f003 fd29 	bl	8005a3e <HAL_UART_Transmit>
}
 8001fec:	bf00      	nop
 8001fee:	3774      	adds	r7, #116	; 0x74
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff4:	08009784 	.word	0x08009784
 8001ff8:	2000026c 	.word	0x2000026c
 8001ffc:	080097d0 	.word	0x080097d0
 8002000:	080097e8 	.word	0x080097e8
 8002004:	08009800 	.word	0x08009800
 8002008:	0800981c 	.word	0x0800981c
 800200c:	080093f0 	.word	0x080093f0

08002010 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <MX_GPIO_Init+0x110>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <MX_GPIO_Init+0x110>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <MX_GPIO_Init+0x110>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <MX_GPIO_Init+0x110>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a35      	ldr	r2, [pc, #212]	; (8002120 <MX_GPIO_Init+0x110>)
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
 8002052:	4b33      	ldr	r3, [pc, #204]	; (8002120 <MX_GPIO_Init+0x110>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <MX_GPIO_Init+0x110>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a2e      	ldr	r2, [pc, #184]	; (8002120 <MX_GPIO_Init+0x110>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <MX_GPIO_Init+0x110>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	4b28      	ldr	r3, [pc, #160]	; (8002120 <MX_GPIO_Init+0x110>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a27      	ldr	r2, [pc, #156]	; (8002120 <MX_GPIO_Init+0x110>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <MX_GPIO_Init+0x110>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800209c:	4821      	ldr	r0, [pc, #132]	; (8002124 <MX_GPIO_Init+0x114>)
 800209e:	f001 fa9d 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24L01_CS_Pin|NRFL24L01_CSN_Pin, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2118      	movs	r1, #24
 80020a6:	4820      	ldr	r0, [pc, #128]	; (8002128 <MX_GPIO_Init+0x118>)
 80020a8:	f001 fa98 	bl	80035dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	4619      	mov	r1, r3
 80020c4:	4817      	ldr	r0, [pc, #92]	; (8002124 <MX_GPIO_Init+0x114>)
 80020c6:	f001 f905 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24L01_IRQ_Pin;
 80020ca:	2304      	movs	r3, #4
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24L01_IRQ_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	4812      	ldr	r0, [pc, #72]	; (8002128 <MX_GPIO_Init+0x118>)
 80020de:	f001 f8f9 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NRF24L01_CS_Pin|NRFL24L01_CSN_Pin;
 80020e2:	2318      	movs	r3, #24
 80020e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <MX_GPIO_Init+0x118>)
 80020fa:	f001 f8eb 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 80020fe:	2320      	movs	r3, #32
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	4806      	ldr	r0, [pc, #24]	; (800212c <MX_GPIO_Init+0x11c>)
 8002112:	f001 f8df 	bl	80032d4 <HAL_GPIO_Init>

}
 8002116:	bf00      	nop
 8002118:	3728      	adds	r7, #40	; 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40020800 	.word	0x40020800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400

08002130 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <MX_I2C1_Init+0x50>)
 8002136:	4a13      	ldr	r2, [pc, #76]	; (8002184 <MX_I2C1_Init+0x54>)
 8002138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_I2C1_Init+0x50>)
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <MX_I2C1_Init+0x58>)
 800213e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MX_I2C1_Init+0x50>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_I2C1_Init+0x50>)
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_I2C1_Init+0x50>)
 800214e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002152:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <MX_I2C1_Init+0x50>)
 8002156:	2200      	movs	r2, #0
 8002158:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_I2C1_Init+0x50>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <MX_I2C1_Init+0x50>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_I2C1_Init+0x50>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <MX_I2C1_Init+0x50>)
 800216e:	f001 fa69 	bl	8003644 <HAL_I2C_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002178:	f000 fad4 	bl	8002724 <Error_Handler>
  }

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000071c 	.word	0x2000071c
 8002184:	40005400 	.word	0x40005400
 8002188:	00061a80 	.word	0x00061a80

0800218c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <MX_I2C3_Init+0x50>)
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <MX_I2C3_Init+0x54>)
 8002194:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <MX_I2C3_Init+0x50>)
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <MX_I2C3_Init+0x58>)
 800219a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_I2C3_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MX_I2C3_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <MX_I2C3_Init+0x50>)
 80021aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <MX_I2C3_Init+0x50>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <MX_I2C3_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <MX_I2C3_Init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_I2C3_Init+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80021c8:	4804      	ldr	r0, [pc, #16]	; (80021dc <MX_I2C3_Init+0x50>)
 80021ca:	f001 fa3b 	bl	8003644 <HAL_I2C_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80021d4:	f000 faa6 	bl	8002724 <Error_Handler>
  }

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200006c8 	.word	0x200006c8
 80021e0:	40005c00 	.word	0x40005c00
 80021e4:	00061a80 	.word	0x00061a80

080021e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a41      	ldr	r2, [pc, #260]	; (800230c <HAL_I2C_MspInit+0x124>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d12c      	bne.n	8002264 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_I2C_MspInit+0x128>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a3f      	ldr	r2, [pc, #252]	; (8002310 <HAL_I2C_MspInit+0x128>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_I2C_MspInit+0x128>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002226:	23c0      	movs	r3, #192	; 0xc0
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222a:	2312      	movs	r3, #18
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800222e:	2301      	movs	r3, #1
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002236:	2304      	movs	r3, #4
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	4834      	ldr	r0, [pc, #208]	; (8002314 <HAL_I2C_MspInit+0x12c>)
 8002242:	f001 f847 	bl	80032d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_I2C_MspInit+0x128>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a30      	ldr	r2, [pc, #192]	; (8002310 <HAL_I2C_MspInit+0x128>)
 8002250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_I2C_MspInit+0x128>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002262:	e04f      	b.n	8002304 <HAL_I2C_MspInit+0x11c>
  else if(i2cHandle->Instance==I2C3)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <HAL_I2C_MspInit+0x130>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d14a      	bne.n	8002304 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_I2C_MspInit+0x128>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a26      	ldr	r2, [pc, #152]	; (8002310 <HAL_I2C_MspInit+0x128>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_I2C_MspInit+0x128>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_I2C_MspInit+0x128>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_I2C_MspInit+0x128>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_I2C_MspInit+0x128>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ac:	2312      	movs	r3, #18
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80022b8:	2304      	movs	r3, #4
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	4816      	ldr	r0, [pc, #88]	; (800231c <HAL_I2C_MspInit+0x134>)
 80022c4:	f001 f806 	bl	80032d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022c8:	2310      	movs	r3, #16
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022cc:	2312      	movs	r3, #18
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2303      	movs	r3, #3
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80022d8:	2309      	movs	r3, #9
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4619      	mov	r1, r3
 80022e2:	480c      	ldr	r0, [pc, #48]	; (8002314 <HAL_I2C_MspInit+0x12c>)
 80022e4:	f000 fff6 	bl	80032d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <HAL_I2C_MspInit+0x128>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_I2C_MspInit+0x128>)
 80022f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_I2C_MspInit+0x128>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
}
 8002304:	bf00      	nop
 8002306:	3730      	adds	r7, #48	; 0x30
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40005400 	.word	0x40005400
 8002310:	40023800 	.word	0x40023800
 8002314:	40020400 	.word	0x40020400
 8002318:	40005c00 	.word	0x40005c00
 800231c:	40020000 	.word	0x40020000

08002320 <map>:
uint64_t TxpipeAddrs = 122;
char myTxData[32] ;
uint8_t Tx_check = 0;
MPU6050_t MPU6050;

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	69b9      	ldr	r1, [r7, #24]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	1a8a      	subs	r2, r1, r2
 800233a:	fb02 f203 	mul.w	r2, r2, r3
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1acb      	subs	r3, r1, r3
 8002344:	fb92 f2f3 	sdiv	r2, r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4413      	add	r3, r2
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b0ae      	sub	sp, #184	; 0xb8
 800235c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800235e:	f000 fe3d 	bl	8002fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002362:	f000 f975 	bl	8002650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002366:	f7ff fe53 	bl	8002010 <MX_GPIO_Init>
  MX_I2C1_Init();
 800236a:	f7ff fee1 	bl	8002130 <MX_I2C1_Init>
  MX_I2C3_Init();
 800236e:	f7ff ff0d 	bl	800218c <MX_I2C3_Init>
  MX_SPI1_Init();
 8002372:	f000 fa63 	bl	800283c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002376:	f000 fd95 	bl	8002ea4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init(&hi2c3);	//OLED
 800237a:	48ab      	ldr	r0, [pc, #684]	; (8002628 <main+0x2d0>)
 800237c:	f000 faf4 	bl	8002968 <ssd1306_Init>
  MPU6050_Init(&hi2c1); //MPU
 8002380:	48aa      	ldr	r0, [pc, #680]	; (800262c <main+0x2d4>)
 8002382:	f000 f9d6 	bl	8002732 <MPU6050_Init>

  /***********NRF Ayarlari****************/
    NRF24_begin(GPIOA, NRFL24L01_CSN_Pin, NRF24L01_CS_Pin, hspi1);
 8002386:	4caa      	ldr	r4, [pc, #680]	; (8002630 <main+0x2d8>)
 8002388:	4668      	mov	r0, sp
 800238a:	1d23      	adds	r3, r4, #4
 800238c:	2254      	movs	r2, #84	; 0x54
 800238e:	4619      	mov	r1, r3
 8002390:	f003 fe24 	bl	8005fdc <memcpy>
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	2208      	movs	r2, #8
 8002398:	2110      	movs	r1, #16
 800239a:	48a6      	ldr	r0, [pc, #664]	; (8002634 <main+0x2dc>)
 800239c:	f7fe fec4 	bl	8001128 <NRF24_begin>
  	NRF24_stopListening();
 80023a0:	f7fe ffa2 	bl	80012e8 <NRF24_stopListening>
  	NRF24_openWritingPipe(TxpipeAddrs);
 80023a4:	4ba4      	ldr	r3, [pc, #656]	; (8002638 <main+0x2e0>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fffb 	bl	80013a8 <NRF24_openWritingPipe>
  	NRF24_setAutoAck(false);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff f884 	bl	80014c0 <NRF24_setAutoAck>
  	NRF24_setChannel(34);
 80023b8:	2022      	movs	r0, #34	; 0x22
 80023ba:	f7ff f834 	bl	8001426 <NRF24_setChannel>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#define PI 3.1415926535897932384626433832795
#define RAD_TO_DEG  57.295779513082320876798154814105

  	int minVal=265;
 80023be:	f240 1309 	movw	r3, #265	; 0x109
 80023c2:	65bb      	str	r3, [r7, #88]	; 0x58
  	int maxVal=402;
 80023c4:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80023c8:	657b      	str	r3, [r7, #84]	; 0x54
  	char buffz[10];

  	double x;
  	double y;
  	double z;
  	uint8_t ort = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  	while(1)
  	{
  		MPU6050_Read_Accel(&hi2c1, &MPU6050);
 80023d0:	499a      	ldr	r1, [pc, #616]	; (800263c <main+0x2e4>)
 80023d2:	4896      	ldr	r0, [pc, #600]	; (800262c <main+0x2d4>)
 80023d4:	f000 f9c8 	bl	8002768 <MPU6050_Read_Accel>
  		ort++;
 80023d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80023dc:	3301      	adds	r3, #1
 80023de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		int xAng = map(MPU6050.Accel_X_RAW,minVal,maxVal,-90,90);
 80023e2:	4b96      	ldr	r3, [pc, #600]	; (800263c <main+0x2e4>)
 80023e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e8:	4618      	mov	r0, r3
 80023ea:	235a      	movs	r3, #90	; 0x5a
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	f06f 0359 	mvn.w	r3, #89	; 0x59
 80023f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023f4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80023f6:	f7ff ff93 	bl	8002320 <map>
 80023fa:	6538      	str	r0, [r7, #80]	; 0x50
		int yAng = map(MPU6050.Accel_Y_RAW,minVal,maxVal,-90,90);
 80023fc:	4b8f      	ldr	r3, [pc, #572]	; (800263c <main+0x2e4>)
 80023fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002402:	4618      	mov	r0, r3
 8002404:	235a      	movs	r3, #90	; 0x5a
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f06f 0359 	mvn.w	r3, #89	; 0x59
 800240c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800240e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002410:	f7ff ff86 	bl	8002320 <map>
 8002414:	64f8      	str	r0, [r7, #76]	; 0x4c
		int zAng = map(MPU6050.Accel_Z_RAW,minVal,maxVal,-90,90);
 8002416:	4b89      	ldr	r3, [pc, #548]	; (800263c <main+0x2e4>)
 8002418:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800241c:	4618      	mov	r0, r3
 800241e:	235a      	movs	r3, #90	; 0x5a
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8002426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002428:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800242a:	f7ff ff79 	bl	8002320 <map>
 800242e:	64b8      	str	r0, [r7, #72]	; 0x48
		int s = sqrt(yAng*yAng+zAng*zAng);
 8002430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002432:	fb03 f203 	mul.w	r2, r3, r3
 8002436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002438:	fb03 f303 	mul.w	r3, r3, r3
 800243c:	4413      	add	r3, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f878 	bl	8000534 <__aeabi_i2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	ec43 2b10 	vmov	d0, r2, r3
 800244c:	f006 fe10 	bl	8009070 <sqrt>
 8002450:	ec53 2b10 	vmov	r2, r3, d0
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f7fe fb86 	bl	8000b68 <__aeabi_d2iz>
 800245c:	4603      	mov	r3, r0
 800245e:	647b      	str	r3, [r7, #68]	; 0x44
		int a = sqrt(xAng*xAng+zAng*zAng);
 8002460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002462:	fb03 f203 	mul.w	r2, r3, r3
 8002466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002468:	fb03 f303 	mul.w	r3, r3, r3
 800246c:	4413      	add	r3, r2
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f860 	bl	8000534 <__aeabi_i2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	ec43 2b10 	vmov	d0, r2, r3
 800247c:	f006 fdf8 	bl	8009070 <sqrt>
 8002480:	ec53 2b10 	vmov	r2, r3, d0
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fb6e 	bl	8000b68 <__aeabi_d2iz>
 800248c:	4603      	mov	r3, r0
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
		x= RAD_TO_DEG * (atan2(yAng, a));
 8002490:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002492:	f7fe f84f 	bl	8000534 <__aeabi_i2d>
 8002496:	4604      	mov	r4, r0
 8002498:	460d      	mov	r5, r1
 800249a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800249c:	f7fe f84a 	bl	8000534 <__aeabi_i2d>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	ec43 2b11 	vmov	d1, r2, r3
 80024a8:	ec45 4b10 	vmov	d0, r4, r5
 80024ac:	f006 fddd 	bl	800906a <atan2>
 80024b0:	ec51 0b10 	vmov	r0, r1, d0
 80024b4:	a358      	add	r3, pc, #352	; (adr r3, 8002618 <main+0x2c0>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	f7fe f8a5 	bl	8000608 <__aeabi_dmul>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		y= RAD_TO_DEG * (atan2(xAng,s ));
 80024c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80024c8:	f7fe f834 	bl	8000534 <__aeabi_i2d>
 80024cc:	4604      	mov	r4, r0
 80024ce:	460d      	mov	r5, r1
 80024d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80024d2:	f7fe f82f 	bl	8000534 <__aeabi_i2d>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	ec43 2b11 	vmov	d1, r2, r3
 80024de:	ec45 4b10 	vmov	d0, r4, r5
 80024e2:	f006 fdc2 	bl	800906a <atan2>
 80024e6:	ec51 0b10 	vmov	r0, r1, d0
 80024ea:	a34b      	add	r3, pc, #300	; (adr r3, 8002618 <main+0x2c0>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f88a 	bl	8000608 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		z= RAD_TO_DEG * (atan2(-yAng, -xAng)+PI);
 80024fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fe:	425b      	negs	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f817 	bl	8000534 <__aeabi_i2d>
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250c:	425b      	negs	r3, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f810 	bl	8000534 <__aeabi_i2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	ec43 2b11 	vmov	d1, r2, r3
 800251c:	ec45 4b10 	vmov	d0, r4, r5
 8002520:	f006 fda3 	bl	800906a <atan2>
 8002524:	ec51 0b10 	vmov	r0, r1, d0
 8002528:	a33d      	add	r3, pc, #244	; (adr r3, 8002620 <main+0x2c8>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f7fd feb5 	bl	800029c <__adddf3>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	a337      	add	r3, pc, #220	; (adr r3, 8002618 <main+0x2c0>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe f862 	bl	8000608 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		if(ort == 100)
 800254c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002550:	2b64      	cmp	r3, #100	; 0x64
 8002552:	f47f af3d 	bne.w	80023d0 <main+0x78>
		{
			sprintf(buffx,"%0.0f",x);
 8002556:	f107 001c 	add.w	r0, r7, #28
 800255a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800255e:	4938      	ldr	r1, [pc, #224]	; (8002640 <main+0x2e8>)
 8002560:	f004 f9bc 	bl	80068dc <siprintf>

			sprintf(buffy,"%0.0f",y);
 8002564:	f107 0010 	add.w	r0, r7, #16
 8002568:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800256c:	4934      	ldr	r1, [pc, #208]	; (8002640 <main+0x2e8>)
 800256e:	f004 f9b5 	bl	80068dc <siprintf>
			sprintf(buffz,"%0.0f",z);
 8002572:	1d38      	adds	r0, r7, #4
 8002574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002578:	4931      	ldr	r1, [pc, #196]	; (8002640 <main+0x2e8>)
 800257a:	f004 f9af 	bl	80068dc <siprintf>
			myTxData[1]=0XFF;
 800257e:	4b31      	ldr	r3, [pc, #196]	; (8002644 <main+0x2ec>)
 8002580:	22ff      	movs	r2, #255	; 0xff
 8002582:	705a      	strb	r2, [r3, #1]
			myTxData[2]=buffx[0];
 8002584:	7f3a      	ldrb	r2, [r7, #28]
 8002586:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <main+0x2ec>)
 8002588:	709a      	strb	r2, [r3, #2]
			myTxData[3]=buffx[1];
 800258a:	7f7a      	ldrb	r2, [r7, #29]
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <main+0x2ec>)
 800258e:	70da      	strb	r2, [r3, #3]
			myTxData[4]=buffx[2];
 8002590:	7fba      	ldrb	r2, [r7, #30]
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <main+0x2ec>)
 8002594:	711a      	strb	r2, [r3, #4]
			myTxData[5]=buffx[3];
 8002596:	7ffa      	ldrb	r2, [r7, #31]
 8002598:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <main+0x2ec>)
 800259a:	715a      	strb	r2, [r3, #5]
			myTxData[6]=buffy[0];
 800259c:	7c3a      	ldrb	r2, [r7, #16]
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <main+0x2ec>)
 80025a0:	719a      	strb	r2, [r3, #6]
			myTxData[7]=buffy[1];
 80025a2:	7c7a      	ldrb	r2, [r7, #17]
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <main+0x2ec>)
 80025a6:	71da      	strb	r2, [r3, #7]
			myTxData[8]=buffy[2];
 80025a8:	7cba      	ldrb	r2, [r7, #18]
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <main+0x2ec>)
 80025ac:	721a      	strb	r2, [r3, #8]
			myTxData[9]=buffy[3];
 80025ae:	7cfa      	ldrb	r2, [r7, #19]
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <main+0x2ec>)
 80025b2:	725a      	strb	r2, [r3, #9]
			myTxData[10]=0XFF;
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <main+0x2ec>)
 80025b6:	22ff      	movs	r2, #255	; 0xff
 80025b8:	729a      	strb	r2, [r3, #10]
            for(uint8_t i = 1 ; i<11 ; i++)
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80025c0:	e00e      	b.n	80025e0 <main+0x288>
			{
            	Tx_check = Tx_check + myTxData[i];
 80025c2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80025c6:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <main+0x2ec>)
 80025c8:	5cd2      	ldrb	r2, [r2, r3]
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <main+0x2f0>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <main+0x2f0>)
 80025d4:	701a      	strb	r2, [r3, #0]
            for(uint8_t i = 1 ; i<11 ; i++)
 80025d6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80025da:	3301      	adds	r3, #1
 80025dc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80025e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80025e4:	2b0a      	cmp	r3, #10
 80025e6:	d9ec      	bls.n	80025c2 <main+0x26a>
			}
			myTxData[0] = Tx_check;
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <main+0x2f0>)
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <main+0x2ec>)
 80025ee:	701a      	strb	r2, [r3, #0]
			Tx_check = 0;
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <main+0x2f0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 80025f6:	2064      	movs	r0, #100	; 0x64
 80025f8:	f000 fd62 	bl	80030c0 <HAL_Delay>
			NRF24_write(myTxData, 32);
 80025fc:	2120      	movs	r1, #32
 80025fe:	4811      	ldr	r0, [pc, #68]	; (8002644 <main+0x2ec>)
 8002600:	f7fe fe7e 	bl	8001300 <NRF24_write>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002608:	4810      	ldr	r0, [pc, #64]	; (800264c <main+0x2f4>)
 800260a:	f001 f800 	bl	800360e <HAL_GPIO_TogglePin>
			ort = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  	{
 8002614:	e6dc      	b.n	80023d0 <main+0x78>
 8002616:	bf00      	nop
 8002618:	1a63c1f8 	.word	0x1a63c1f8
 800261c:	404ca5dc 	.word	0x404ca5dc
 8002620:	54442d18 	.word	0x54442d18
 8002624:	400921fb 	.word	0x400921fb
 8002628:	200006c8 	.word	0x200006c8
 800262c:	2000071c 	.word	0x2000071c
 8002630:	200007e8 	.word	0x200007e8
 8002634:	40020000 	.word	0x40020000
 8002638:	20000000 	.word	0x20000000
 800263c:	20000790 	.word	0x20000790
 8002640:	08009934 	.word	0x08009934
 8002644:	20000770 	.word	0x20000770
 8002648:	200002b0 	.word	0x200002b0
 800264c:	40020800 	.word	0x40020800

08002650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b094      	sub	sp, #80	; 0x50
 8002654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002656:	f107 0320 	add.w	r3, r7, #32
 800265a:	2230      	movs	r2, #48	; 0x30
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fcca 	bl	8005ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <SystemClock_Config+0xcc>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <SystemClock_Config+0xcc>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002682:	6413      	str	r3, [r2, #64]	; 0x40
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <SystemClock_Config+0xcc>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002690:	2300      	movs	r3, #0
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	4b22      	ldr	r3, [pc, #136]	; (8002720 <SystemClock_Config+0xd0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800269c:	4a20      	ldr	r2, [pc, #128]	; (8002720 <SystemClock_Config+0xd0>)
 800269e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <SystemClock_Config+0xd0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ba:	2302      	movs	r3, #2
 80026bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80026c4:	2319      	movs	r3, #25
 80026c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026c8:	23a8      	movs	r3, #168	; 0xa8
 80026ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026cc:	2302      	movs	r3, #2
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026d0:	2304      	movs	r3, #4
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d4:	f107 0320 	add.w	r3, r7, #32
 80026d8:	4618      	mov	r0, r3
 80026da:	f001 ff73 	bl	80045c4 <HAL_RCC_OscConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026e4:	f000 f81e 	bl	8002724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026e8:	230f      	movs	r3, #15
 80026ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ec:	2302      	movs	r3, #2
 80026ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026fe:	f107 030c 	add.w	r3, r7, #12
 8002702:	2102      	movs	r1, #2
 8002704:	4618      	mov	r0, r3
 8002706:	f002 f9d5 	bl	8004ab4 <HAL_RCC_ClockConfig>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002710:	f000 f808 	bl	8002724 <Error_Handler>
  }
}
 8002714:	bf00      	nop
 8002716:	3750      	adds	r7, #80	; 0x50
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	40007000 	.word	0x40007000

08002724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <MPU6050_Init>:
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};


uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {		//ARDU
 8002732:	b580      	push	{r7, lr}
 8002734:	b088      	sub	sp, #32
 8002736:	af04      	add	r7, sp, #16
 8002738:	6078      	str	r0, [r7, #4]
  //  uint8_t check;
    uint8_t Data;

        Data = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800273e:	2364      	movs	r3, #100	; 0x64
 8002740:	9302      	str	r3, [sp, #8]
 8002742:	2301      	movs	r3, #1
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	f107 030f 	add.w	r3, r7, #15
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	226b      	movs	r2, #107	; 0x6b
 8002750:	21d0      	movs	r1, #208	; 0xd0
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f001 f8ba 	bl	80038cc <HAL_I2C_Mem_Write>
    return 1;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	0000      	movs	r0, r0
 8002764:	0000      	movs	r0, r0
	...

08002768 <MPU6050_Read_Accel>:
    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
}

void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {        //KALMAN
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af04      	add	r7, sp, #16
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8002772:	2364      	movs	r3, #100	; 0x64
 8002774:	9302      	str	r3, [sp, #8]
 8002776:	2306      	movs	r3, #6
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	f107 0308 	add.w	r3, r7, #8
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2301      	movs	r3, #1
 8002782:	223b      	movs	r2, #59	; 0x3b
 8002784:	21d0      	movs	r1, #208	; 0xd0
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f001 f99a 	bl	8003ac0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800278c:	7a3b      	ldrb	r3, [r7, #8]
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	b21a      	sxth	r2, r3
 8002792:	7a7b      	ldrb	r3, [r7, #9]
 8002794:	b21b      	sxth	r3, r3
 8002796:	4313      	orrs	r3, r2
 8002798:	b21a      	sxth	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 800279e:	7abb      	ldrb	r3, [r7, #10]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	7afb      	ldrb	r3, [r7, #11]
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	4313      	orrs	r3, r2
 80027aa:	b21a      	sxth	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80027b0:	7b3b      	ldrb	r3, [r7, #12]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	7b7b      	ldrb	r3, [r7, #13]
 80027b8:	b21b      	sxth	r3, r3
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b21a      	sxth	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd feb3 	bl	8000534 <__aeabi_i2d>
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	4b19      	ldr	r3, [pc, #100]	; (8002838 <MPU6050_Read_Accel+0xd0>)
 80027d4:	f7fe f842 	bl	800085c <__aeabi_ddiv>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	6839      	ldr	r1, [r7, #0]
 80027de:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fea3 	bl	8000534 <__aeabi_i2d>
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <MPU6050_Read_Accel+0xd0>)
 80027f4:	f7fe f832 	bl	800085c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe93 	bl	8000534 <__aeabi_i2d>
 800280e:	a308      	add	r3, pc, #32	; (adr r3, 8002830 <MPU6050_Read_Accel+0xc8>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f7fe f822 	bl	800085c <__aeabi_ddiv>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	f3af 8000 	nop.w
 8002830:	00000000 	.word	0x00000000
 8002834:	40cc2900 	.word	0x40cc2900
 8002838:	40d00000 	.word	0x40d00000

0800283c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002840:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002842:	4a18      	ldr	r2, [pc, #96]	; (80028a4 <MX_SPI1_Init+0x68>)
 8002844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800284c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_SPI1_Init+0x64>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002870:	2230      	movs	r2, #48	; 0x30
 8002872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002874:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <MX_SPI1_Init+0x64>)
 800287c:	2200      	movs	r2, #0
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002882:	2200      	movs	r2, #0
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <MX_SPI1_Init+0x64>)
 8002888:	220a      	movs	r2, #10
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800288c:	4804      	ldr	r0, [pc, #16]	; (80028a0 <MX_SPI1_Init+0x64>)
 800288e:	f002 fae1 	bl	8004e54 <HAL_SPI_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002898:	f7ff ff44 	bl	8002724 <Error_Handler>
  }

}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	200007e8 	.word	0x200007e8
 80028a4:	40013000 	.word	0x40013000

080028a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	; (800292c <HAL_SPI_MspInit+0x84>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d12b      	bne.n	8002922 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_SPI_MspInit+0x88>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a17      	ldr	r2, [pc, #92]	; (8002930 <HAL_SPI_MspInit+0x88>)
 80028d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_SPI_MspInit+0x88>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_SPI_MspInit+0x88>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a10      	ldr	r2, [pc, #64]	; (8002930 <HAL_SPI_MspInit+0x88>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_SPI_MspInit+0x88>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002902:	23e0      	movs	r3, #224	; 0xe0
 8002904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002912:	2305      	movs	r3, #5
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 0314 	add.w	r3, r7, #20
 800291a:	4619      	mov	r1, r3
 800291c:	4805      	ldr	r0, [pc, #20]	; (8002934 <HAL_SPI_MspInit+0x8c>)
 800291e:	f000 fcd9 	bl	80032d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002922:	bf00      	nop
 8002924:	3728      	adds	r7, #40	; 0x28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40013000 	.word	0x40013000
 8002930:	40023800 	.word	0x40023800
 8002934:	40020000 	.word	0x40020000

08002938 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af04      	add	r7, sp, #16
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8002944:	230a      	movs	r3, #10
 8002946:	9302      	str	r3, [sp, #8]
 8002948:	2301      	movs	r3, #1
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	1cfb      	adds	r3, r7, #3
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	2200      	movs	r2, #0
 8002954:	2178      	movs	r1, #120	; 0x78
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 ffb8 	bl	80038cc <HAL_I2C_Mem_Write>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8002970:	2064      	movs	r0, #100	; 0x64
 8002972:	f000 fba5 	bl	80030c0 <HAL_Delay>
    int status = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 800297a:	21ae      	movs	r1, #174	; 0xae
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ffdb 	bl	8002938 <ssd1306_WriteCommand>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4413      	add	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 800298c:	2120      	movs	r1, #32
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ffd2 	bl	8002938 <ssd1306_WriteCommand>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800299e:	2110      	movs	r1, #16
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ffc9 	bl	8002938 <ssd1306_WriteCommand>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80029b0:	21b0      	movs	r1, #176	; 0xb0
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffc0 	bl	8002938 <ssd1306_WriteCommand>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80029c2:	21c8      	movs	r1, #200	; 0xc8
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ffb7 	bl	8002938 <ssd1306_WriteCommand>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4413      	add	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80029d4:	2100      	movs	r1, #0
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ffae 	bl	8002938 <ssd1306_WriteCommand>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80029e6:	2110      	movs	r1, #16
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ffa5 	bl	8002938 <ssd1306_WriteCommand>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80029f8:	2140      	movs	r1, #64	; 0x40
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff ff9c 	bl	8002938 <ssd1306_WriteCommand>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8002a0a:	2181      	movs	r1, #129	; 0x81
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ff93 	bl	8002938 <ssd1306_WriteCommand>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4413      	add	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8002a1c:	21ff      	movs	r1, #255	; 0xff
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ff8a 	bl	8002938 <ssd1306_WriteCommand>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8002a2e:	21a1      	movs	r1, #161	; 0xa1
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ff81 	bl	8002938 <ssd1306_WriteCommand>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8002a40:	21a6      	movs	r1, #166	; 0xa6
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ff78 	bl	8002938 <ssd1306_WriteCommand>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8002a52:	21a8      	movs	r1, #168	; 0xa8
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff6f 	bl	8002938 <ssd1306_WriteCommand>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8002a64:	213f      	movs	r1, #63	; 0x3f
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff66 	bl	8002938 <ssd1306_WriteCommand>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a76:	21a4      	movs	r1, #164	; 0xa4
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff5d 	bl	8002938 <ssd1306_WriteCommand>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	461a      	mov	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4413      	add	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8002a88:	21d3      	movs	r1, #211	; 0xd3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff54 	bl	8002938 <ssd1306_WriteCommand>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff4b 	bl	8002938 <ssd1306_WriteCommand>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8002aac:	21d5      	movs	r1, #213	; 0xd5
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ff42 	bl	8002938 <ssd1306_WriteCommand>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8002abe:	21f0      	movs	r1, #240	; 0xf0
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff39 	bl	8002938 <ssd1306_WriteCommand>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4413      	add	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8002ad0:	21d9      	movs	r1, #217	; 0xd9
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ff30 	bl	8002938 <ssd1306_WriteCommand>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8002ae2:	2122      	movs	r1, #34	; 0x22
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ff27 	bl	8002938 <ssd1306_WriteCommand>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461a      	mov	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8002af4:	21da      	movs	r1, #218	; 0xda
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ff1e 	bl	8002938 <ssd1306_WriteCommand>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
#ifdef SSD1306_COM_LR_REMAP
    status += ssd1306_WriteCommand(hi2c, 0x32);   // Enable COM left/right remap
#else
    status += ssd1306_WriteCommand(hi2c, 0x12);   // Do not use COM left/right remap
 8002b06:	2112      	movs	r1, #18
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff15 	bl	8002938 <ssd1306_WriteCommand>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	461a      	mov	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
#endif // SSD1306_COM_LR_REMAP

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8002b18:	21db      	movs	r1, #219	; 0xdb
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ff0c 	bl	8002938 <ssd1306_WriteCommand>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4413      	add	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8002b2a:	2120      	movs	r1, #32
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff03 	bl	8002938 <ssd1306_WriteCommand>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8002b3c:	218d      	movs	r1, #141	; 0x8d
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff fefa 	bl	8002938 <ssd1306_WriteCommand>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8002b4e:	2114      	movs	r1, #20
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff fef1 	bl	8002938 <ssd1306_WriteCommand>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8002b60:	21af      	movs	r1, #175	; 0xaf
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fee8 	bl	8002938 <ssd1306_WriteCommand>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <ssd1306_Init+0x214>
        return 1;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e00f      	b.n	8002b9c <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f000 f813 	bl	8002ba8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f834 	bl	8002bf0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <ssd1306_Init+0x23c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <ssd1306_Init+0x23c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <ssd1306_Init+0x23c>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	715a      	strb	r2, [r3, #5]

    return 0;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	200006b4 	.word	0x200006b4

08002ba8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e00d      	b.n	8002bd4 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <ssd1306_Fill+0x1a>
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	e000      	b.n	8002bc4 <ssd1306_Fill+0x1c>
 8002bc2:	21ff      	movs	r1, #255	; 0xff
 8002bc4:	4a09      	ldr	r2, [pc, #36]	; (8002bec <ssd1306_Fill+0x44>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	460a      	mov	r2, r1
 8002bcc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d3ed      	bcc.n	8002bb8 <ssd1306_Fill+0x10>
    }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	200002b4 	.word	0x200002b4

08002bf0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af04      	add	r7, sp, #16
 8002bf6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	e020      	b.n	8002c40 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	3b50      	subs	r3, #80	; 0x50
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff fe96 	bl	8002938 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff fe92 	bl	8002938 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8002c14:	2110      	movs	r1, #16
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fe8e 	bl	8002938 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	01db      	lsls	r3, r3, #7
 8002c20:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <ssd1306_UpdateScreen+0x60>)
 8002c22:	4413      	add	r3, r2
 8002c24:	2264      	movs	r2, #100	; 0x64
 8002c26:	9202      	str	r2, [sp, #8]
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	9201      	str	r2, [sp, #4]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2301      	movs	r3, #1
 8002c30:	2240      	movs	r2, #64	; 0x40
 8002c32:	2178      	movs	r1, #120	; 0x78
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fe49 	bl	80038cc <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b07      	cmp	r3, #7
 8002c44:	d9db      	bls.n	8002bfe <ssd1306_UpdateScreen+0xe>
    }
}
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	200002b4 	.word	0x200002b4

08002c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a08      	ldr	r2, [pc, #32]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_MspInit+0x4c>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <HardFault_Handler+0x4>

08002cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <MemManage_Handler+0x4>

08002cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc2:	e7fe      	b.n	8002cc2 <BusFault_Handler+0x4>

08002cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <UsageFault_Handler+0x4>

08002cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf8:	f000 f9c2 	bl	8003080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
	return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_kill>:

int _kill(int pid, int sig)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d1a:	f003 f935 	bl	8005f88 <__errno>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2216      	movs	r2, #22
 8002d22:	601a      	str	r2, [r3, #0]
	return -1;
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_exit>:

void _exit (int status)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ffe7 	bl	8002d10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d42:	e7fe      	b.n	8002d42 <_exit+0x12>

08002d44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e00a      	b.n	8002d6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d56:	f3af 8000 	nop.w
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	60ba      	str	r2, [r7, #8]
 8002d62:	b2ca      	uxtb	r2, r1
 8002d64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	dbf0      	blt.n	8002d56 <_read+0x12>
	}

return len;
 8002d74:	687b      	ldr	r3, [r7, #4]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e009      	b.n	8002da4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	60ba      	str	r2, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3301      	adds	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	dbf1      	blt.n	8002d90 <_write+0x12>
	}
	return len;
 8002dac:	687b      	ldr	r3, [r7, #4]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_close>:

int _close(int file)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
	return -1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dde:	605a      	str	r2, [r3, #4]
	return 0;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <_isatty>:

int _isatty(int file)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
	return 1;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
	return 0;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <_sbrk+0x50>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <_sbrk+0x16>
		heap_end = &end;
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <_sbrk+0x50>)
 8002e32:	4a10      	ldr	r2, [pc, #64]	; (8002e74 <_sbrk+0x54>)
 8002e34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <_sbrk+0x50>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <_sbrk+0x50>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	466a      	mov	r2, sp
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d907      	bls.n	8002e5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e4a:	f003 f89d 	bl	8005f88 <__errno>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	220c      	movs	r2, #12
 8002e52:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	e006      	b.n	8002e68 <_sbrk+0x48>
	}

	heap_end += incr;
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <_sbrk+0x50>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	4a03      	ldr	r2, [pc, #12]	; (8002e70 <_sbrk+0x50>)
 8002e64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e66:	68fb      	ldr	r3, [r7, #12]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200006bc 	.word	0x200006bc
 8002e74:	20000898 	.word	0x20000898

08002e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <SystemInit+0x28>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <SystemInit+0x28>)
 8002e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SystemInit+0x28>)
 8002e8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e92:	609a      	str	r2, [r3, #8]
#endif
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <MX_USART1_UART_Init+0x50>)
 8002eac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002eca:	220c      	movs	r2, #12
 8002ecc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eda:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <MX_USART1_UART_Init+0x4c>)
 8002edc:	f002 fd62 	bl	80059a4 <HAL_UART_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ee6:	f7ff fc1d 	bl	8002724 <Error_Handler>
  }

}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000840 	.word	0x20000840
 8002ef4:	40011000 	.word	0x40011000

08002ef8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_UART_MspInit+0x84>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d12c      	bne.n	8002f74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f24:	f043 0310 	orr.w	r3, r3, #16
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a10      	ldr	r2, [pc, #64]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <HAL_UART_MspInit+0x88>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f60:	2303      	movs	r3, #3
 8002f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f64:	2307      	movs	r3, #7
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f68:	f107 0314 	add.w	r3, r7, #20
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4805      	ldr	r0, [pc, #20]	; (8002f84 <HAL_UART_MspInit+0x8c>)
 8002f70:	f000 f9b0 	bl	80032d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f74:	bf00      	nop
 8002f76:	3728      	adds	r7, #40	; 0x28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40011000 	.word	0x40011000
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40020000 	.word	0x40020000

08002f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f8c:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f8e:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f94:	e002      	b.n	8002f9c <LoopCopyDataInit>

08002f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9a:	3304      	adds	r3, #4

08002f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa0:	d3f9      	bcc.n	8002f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fa4:	4c0b      	ldr	r4, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa8:	e001      	b.n	8002fae <LoopFillZerobss>

08002faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fac:	3204      	adds	r2, #4

08002fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb0:	d3fb      	bcc.n	8002faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fb2:	f7ff ff61 	bl	8002e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fb6:	f002 ffed 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fba:	f7ff f9cd 	bl	8002358 <main>
  bx  lr    
 8002fbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fc8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002fcc:	08009db8 	.word	0x08009db8
  ldr r2, =_sbss
 8002fd0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002fd4:	20000898 	.word	0x20000898

08002fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fd8:	e7fe      	b.n	8002fd8 <ADC_IRQHandler>
	...

08002fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_Init+0x40>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	; (800301c <HAL_Init+0x40>)
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_Init+0x40>)
 8002ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a07      	ldr	r2, [pc, #28]	; (800301c <HAL_Init+0x40>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003004:	2003      	movs	r0, #3
 8003006:	f000 f931 	bl	800326c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800300a:	2000      	movs	r0, #0
 800300c:	f000 f808 	bl	8003020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003010:	f7ff fe20 	bl	8002c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00

08003020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_InitTick+0x54>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_InitTick+0x58>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003036:	fbb3 f3f1 	udiv	r3, r3, r1
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f93b 	bl	80032ba <HAL_SYSTICK_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e00e      	b.n	800306c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d80a      	bhi.n	800306a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003054:	2200      	movs	r2, #0
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f000 f911 	bl	8003282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003060:	4a06      	ldr	r2, [pc, #24]	; (800307c <HAL_InitTick+0x5c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000008 	.word	0x20000008
 8003078:	20000010 	.word	0x20000010
 800307c:	2000000c 	.word	0x2000000c

08003080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000010 	.word	0x20000010
 80030a4:	20000884 	.word	0x20000884

080030a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000884 	.word	0x20000884

080030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff ffee 	bl	80030a8 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d005      	beq.n	80030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_Delay+0x44>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030e6:	bf00      	nop
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8f7      	bhi.n	80030e8 <HAL_Delay+0x28>
  {
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000010 	.word	0x20000010

08003108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003124:	4013      	ands	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313a:	4a04      	ldr	r2, [pc, #16]	; (800314c <__NVIC_SetPriorityGrouping+0x44>)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	60d3      	str	r3, [r2, #12]
}
 8003140:	bf00      	nop
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	2b00      	cmp	r3, #0
 800317e:	db0a      	blt.n	8003196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	490c      	ldr	r1, [pc, #48]	; (80031b8 <__NVIC_SetPriority+0x4c>)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	0112      	lsls	r2, r2, #4
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	440b      	add	r3, r1
 8003190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003194:	e00a      	b.n	80031ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4908      	ldr	r1, [pc, #32]	; (80031bc <__NVIC_SetPriority+0x50>)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	3b04      	subs	r3, #4
 80031a4:	0112      	lsls	r2, r2, #4
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	440b      	add	r3, r1
 80031aa:	761a      	strb	r2, [r3, #24]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000e100 	.word	0xe000e100
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	; 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f1c3 0307 	rsb	r3, r3, #7
 80031da:	2b04      	cmp	r3, #4
 80031dc:	bf28      	it	cs
 80031de:	2304      	movcs	r3, #4
 80031e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d902      	bls.n	80031f0 <NVIC_EncodePriority+0x30>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3b03      	subs	r3, #3
 80031ee:	e000      	b.n	80031f2 <NVIC_EncodePriority+0x32>
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43da      	mvns	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	401a      	ands	r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003208:	f04f 31ff 	mov.w	r1, #4294967295
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43d9      	mvns	r1, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	4313      	orrs	r3, r2
         );
}
 800321a:	4618      	mov	r0, r3
 800321c:	3724      	adds	r7, #36	; 0x24
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003238:	d301      	bcc.n	800323e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323a:	2301      	movs	r3, #1
 800323c:	e00f      	b.n	800325e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <SysTick_Config+0x40>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3b01      	subs	r3, #1
 8003244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003246:	210f      	movs	r1, #15
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	f7ff ff8e 	bl	800316c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <SysTick_Config+0x40>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <SysTick_Config+0x40>)
 8003258:	2207      	movs	r2, #7
 800325a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	e000e010 	.word	0xe000e010

0800326c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ff47 	bl	8003108 <__NVIC_SetPriorityGrouping>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	4603      	mov	r3, r0
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003294:	f7ff ff5c 	bl	8003150 <__NVIC_GetPriorityGrouping>
 8003298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	6978      	ldr	r0, [r7, #20]
 80032a0:	f7ff ff8e 	bl	80031c0 <NVIC_EncodePriority>
 80032a4:	4602      	mov	r2, r0
 80032a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff5d 	bl	800316c <__NVIC_SetPriority>
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ffb0 	bl	8003228 <SysTick_Config>
 80032c8:	4603      	mov	r3, r0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	e159      	b.n	80035a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f0:	2201      	movs	r2, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	429a      	cmp	r2, r3
 800330a:	f040 8148 	bne.w	800359e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d005      	beq.n	8003326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003322:	2b02      	cmp	r3, #2
 8003324:	d130      	bne.n	8003388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800335c:	2201      	movs	r2, #1
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 0201 	and.w	r2, r3, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b03      	cmp	r3, #3
 8003392:	d017      	beq.n	80033c4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d123      	bne.n	8003418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	08da      	lsrs	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3208      	adds	r2, #8
 80033d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	220f      	movs	r2, #15
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	08da      	lsrs	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3208      	adds	r2, #8
 8003412:	69b9      	ldr	r1, [r7, #24]
 8003414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80a2 	beq.w	800359e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	4b57      	ldr	r3, [pc, #348]	; (80035bc <HAL_GPIO_Init+0x2e8>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	4a56      	ldr	r2, [pc, #344]	; (80035bc <HAL_GPIO_Init+0x2e8>)
 8003464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003468:	6453      	str	r3, [r2, #68]	; 0x44
 800346a:	4b54      	ldr	r3, [pc, #336]	; (80035bc <HAL_GPIO_Init+0x2e8>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003476:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_GPIO_Init+0x2ec>)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a49      	ldr	r2, [pc, #292]	; (80035c4 <HAL_GPIO_Init+0x2f0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d019      	beq.n	80034d6 <HAL_GPIO_Init+0x202>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a48      	ldr	r2, [pc, #288]	; (80035c8 <HAL_GPIO_Init+0x2f4>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_GPIO_Init+0x1fe>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a47      	ldr	r2, [pc, #284]	; (80035cc <HAL_GPIO_Init+0x2f8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00d      	beq.n	80034ce <HAL_GPIO_Init+0x1fa>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <HAL_GPIO_Init+0x2fc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <HAL_GPIO_Init+0x1f6>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a45      	ldr	r2, [pc, #276]	; (80035d4 <HAL_GPIO_Init+0x300>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_GPIO_Init+0x1f2>
 80034c2:	2304      	movs	r3, #4
 80034c4:	e008      	b.n	80034d8 <HAL_GPIO_Init+0x204>
 80034c6:	2307      	movs	r3, #7
 80034c8:	e006      	b.n	80034d8 <HAL_GPIO_Init+0x204>
 80034ca:	2303      	movs	r3, #3
 80034cc:	e004      	b.n	80034d8 <HAL_GPIO_Init+0x204>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e002      	b.n	80034d8 <HAL_GPIO_Init+0x204>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_GPIO_Init+0x204>
 80034d6:	2300      	movs	r3, #0
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	f002 0203 	and.w	r2, r2, #3
 80034de:	0092      	lsls	r2, r2, #2
 80034e0:	4093      	lsls	r3, r2
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034e8:	4935      	ldr	r1, [pc, #212]	; (80035c0 <HAL_GPIO_Init+0x2ec>)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	3302      	adds	r3, #2
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f6:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <HAL_GPIO_Init+0x304>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800351a:	4a2f      	ldr	r2, [pc, #188]	; (80035d8 <HAL_GPIO_Init+0x304>)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003520:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_GPIO_Init+0x304>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003544:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <HAL_GPIO_Init+0x304>)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800354a:	4b23      	ldr	r3, [pc, #140]	; (80035d8 <HAL_GPIO_Init+0x304>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800356e:	4a1a      	ldr	r2, [pc, #104]	; (80035d8 <HAL_GPIO_Init+0x304>)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <HAL_GPIO_Init+0x304>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003598:	4a0f      	ldr	r2, [pc, #60]	; (80035d8 <HAL_GPIO_Init+0x304>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3301      	adds	r3, #1
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b0f      	cmp	r3, #15
 80035a8:	f67f aea2 	bls.w	80032f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3724      	adds	r7, #36	; 0x24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40013800 	.word	0x40013800
 80035c4:	40020000 	.word	0x40020000
 80035c8:	40020400 	.word	0x40020400
 80035cc:	40020800 	.word	0x40020800
 80035d0:	40020c00 	.word	0x40020c00
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40013c00 	.word	0x40013c00

080035dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
 80035e8:	4613      	mov	r3, r2
 80035ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ec:	787b      	ldrb	r3, [r7, #1]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f2:	887a      	ldrh	r2, [r7, #2]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035f8:	e003      	b.n	8003602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	041a      	lsls	r2, r3, #16
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	619a      	str	r2, [r3, #24]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800360e:	b480      	push	{r7}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003620:	887a      	ldrh	r2, [r7, #2]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4013      	ands	r3, r2
 8003626:	041a      	lsls	r2, r3, #16
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	43d9      	mvns	r1, r3
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	400b      	ands	r3, r1
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	619a      	str	r2, [r3, #24]
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e12b      	b.n	80038ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe fdbc 	bl	80021e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2224      	movs	r2, #36	; 0x24
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003696:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036a8:	f001 fbac 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 80036ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4a81      	ldr	r2, [pc, #516]	; (80038b8 <HAL_I2C_Init+0x274>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d807      	bhi.n	80036c8 <HAL_I2C_Init+0x84>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a80      	ldr	r2, [pc, #512]	; (80038bc <HAL_I2C_Init+0x278>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	bf94      	ite	ls
 80036c0:	2301      	movls	r3, #1
 80036c2:	2300      	movhi	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e006      	b.n	80036d6 <HAL_I2C_Init+0x92>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a7d      	ldr	r2, [pc, #500]	; (80038c0 <HAL_I2C_Init+0x27c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	bf94      	ite	ls
 80036d0:	2301      	movls	r3, #1
 80036d2:	2300      	movhi	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0e7      	b.n	80038ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a78      	ldr	r2, [pc, #480]	; (80038c4 <HAL_I2C_Init+0x280>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	0c9b      	lsrs	r3, r3, #18
 80036e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4a6a      	ldr	r2, [pc, #424]	; (80038b8 <HAL_I2C_Init+0x274>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d802      	bhi.n	8003718 <HAL_I2C_Init+0xd4>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3301      	adds	r3, #1
 8003716:	e009      	b.n	800372c <HAL_I2C_Init+0xe8>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	4a69      	ldr	r2, [pc, #420]	; (80038c8 <HAL_I2C_Init+0x284>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	3301      	adds	r3, #1
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	430b      	orrs	r3, r1
 8003732:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800373e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	495c      	ldr	r1, [pc, #368]	; (80038b8 <HAL_I2C_Init+0x274>)
 8003748:	428b      	cmp	r3, r1
 800374a:	d819      	bhi.n	8003780 <HAL_I2C_Init+0x13c>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e59      	subs	r1, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	fbb1 f3f3 	udiv	r3, r1, r3
 800375a:	1c59      	adds	r1, r3, #1
 800375c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003760:	400b      	ands	r3, r1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_I2C_Init+0x138>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1e59      	subs	r1, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fbb1 f3f3 	udiv	r3, r1, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377a:	e051      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 800377c:	2304      	movs	r3, #4
 800377e:	e04f      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d111      	bne.n	80037ac <HAL_I2C_Init+0x168>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1e58      	subs	r0, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	440b      	add	r3, r1
 8003796:	fbb0 f3f3 	udiv	r3, r0, r3
 800379a:	3301      	adds	r3, #1
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf0c      	ite	eq
 80037a4:	2301      	moveq	r3, #1
 80037a6:	2300      	movne	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e012      	b.n	80037d2 <HAL_I2C_Init+0x18e>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	0099      	lsls	r1, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_I2C_Init+0x196>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e022      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10e      	bne.n	8003800 <HAL_I2C_Init+0x1bc>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1e58      	subs	r0, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	440b      	add	r3, r1
 80037f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fe:	e00f      	b.n	8003820 <HAL_I2C_Init+0x1dc>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e58      	subs	r0, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	0099      	lsls	r1, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	6809      	ldr	r1, [r1, #0]
 8003824:	4313      	orrs	r3, r2
 8003826:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69da      	ldr	r2, [r3, #28]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800384e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6911      	ldr	r1, [r2, #16]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68d2      	ldr	r2, [r2, #12]
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	430b      	orrs	r3, r1
 8003862:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	000186a0 	.word	0x000186a0
 80038bc:	001e847f 	.word	0x001e847f
 80038c0:	003d08ff 	.word	0x003d08ff
 80038c4:	431bde83 	.word	0x431bde83
 80038c8:	10624dd3 	.word	0x10624dd3

080038cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	817b      	strh	r3, [r7, #10]
 80038de:	460b      	mov	r3, r1
 80038e0:	813b      	strh	r3, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038e6:	f7ff fbdf 	bl	80030a8 <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	f040 80d9 	bne.w	8003aac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	2319      	movs	r3, #25
 8003900:	2201      	movs	r2, #1
 8003902:	496d      	ldr	r1, [pc, #436]	; (8003ab8 <HAL_I2C_Mem_Write+0x1ec>)
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fc7f 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
 8003912:	e0cc      	b.n	8003aae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_I2C_Mem_Write+0x56>
 800391e:	2302      	movs	r3, #2
 8003920:	e0c5      	b.n	8003aae <HAL_I2C_Mem_Write+0x1e2>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d007      	beq.n	8003948 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2221      	movs	r2, #33	; 0x21
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2240      	movs	r2, #64	; 0x40
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a3a      	ldr	r2, [r7, #32]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a4d      	ldr	r2, [pc, #308]	; (8003abc <HAL_I2C_Mem_Write+0x1f0>)
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800398a:	88f8      	ldrh	r0, [r7, #6]
 800398c:	893a      	ldrh	r2, [r7, #8]
 800398e:	8979      	ldrh	r1, [r7, #10]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	4603      	mov	r3, r0
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fab6 	bl	8003f0c <I2C_RequestMemoryWrite>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d052      	beq.n	8003a4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e081      	b.n	8003aae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fd00 	bl	80043b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d107      	bne.n	80039d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e06b      	b.n	8003aae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b04      	cmp	r3, #4
 8003a12:	d11b      	bne.n	8003a4c <HAL_I2C_Mem_Write+0x180>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d017      	beq.n	8003a4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1aa      	bne.n	80039aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fcec 	bl	8004436 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00d      	beq.n	8003a80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d107      	bne.n	8003a7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e016      	b.n	8003aae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	00100002 	.word	0x00100002
 8003abc:	ffff0000 	.word	0xffff0000

08003ac0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	; 0x30
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	817b      	strh	r3, [r7, #10]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	813b      	strh	r3, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ada:	f7ff fae5 	bl	80030a8 <HAL_GetTick>
 8003ade:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	f040 8208 	bne.w	8003efe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2319      	movs	r3, #25
 8003af4:	2201      	movs	r2, #1
 8003af6:	497b      	ldr	r1, [pc, #492]	; (8003ce4 <HAL_I2C_Mem_Read+0x224>)
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fb85 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
 8003b06:	e1fb      	b.n	8003f00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_I2C_Mem_Read+0x56>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e1f4      	b.n	8003f00 <HAL_I2C_Mem_Read+0x440>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d007      	beq.n	8003b3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2222      	movs	r2, #34	; 0x22
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2240      	movs	r2, #64	; 0x40
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a5b      	ldr	r2, [pc, #364]	; (8003ce8 <HAL_I2C_Mem_Read+0x228>)
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b7e:	88f8      	ldrh	r0, [r7, #6]
 8003b80:	893a      	ldrh	r2, [r7, #8]
 8003b82:	8979      	ldrh	r1, [r7, #10]
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fa52 	bl	8004038 <I2C_RequestMemoryRead>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e1b0      	b.n	8003f00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d113      	bne.n	8003bce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	623b      	str	r3, [r7, #32]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	623b      	str	r3, [r7, #32]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e184      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d11b      	bne.n	8003c0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e164      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d11b      	bne.n	8003c4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	e144      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c64:	e138      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	f200 80f1 	bhi.w	8003e52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d123      	bne.n	8003cc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fc1b 	bl	80044b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e139      	b.n	8003f00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cbe:	e10b      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d14e      	bne.n	8003d66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4906      	ldr	r1, [pc, #24]	; (8003cec <HAL_I2C_Mem_Read+0x22c>)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fa98 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d008      	beq.n	8003cf0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e10e      	b.n	8003f00 <HAL_I2C_Mem_Read+0x440>
 8003ce2:	bf00      	nop
 8003ce4:	00100002 	.word	0x00100002
 8003ce8:	ffff0000 	.word	0xffff0000
 8003cec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d64:	e0b8      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	4966      	ldr	r1, [pc, #408]	; (8003f08 <HAL_I2C_Mem_Read+0x448>)
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fa49 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0bf      	b.n	8003f00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	2200      	movs	r2, #0
 8003dca:	494f      	ldr	r1, [pc, #316]	; (8003f08 <HAL_I2C_Mem_Read+0x448>)
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fa1b 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e091      	b.n	8003f00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e50:	e042      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fb2e 	bl	80044b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e04c      	b.n	8003f00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d118      	bne.n	8003ed8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f47f aec2 	bne.w	8003c66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e000      	b.n	8003f00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3728      	adds	r7, #40	; 0x28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	00010004 	.word	0x00010004

08003f0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	813b      	strh	r3, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f960 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5c:	d103      	bne.n	8003f66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e05f      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f6a:	897b      	ldrh	r3, [r7, #10]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	6a3a      	ldr	r2, [r7, #32]
 8003f7e:	492d      	ldr	r1, [pc, #180]	; (8004034 <I2C_RequestMemoryWrite+0x128>)
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f998 	bl	80042b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e04c      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	6a39      	ldr	r1, [r7, #32]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fa02 	bl	80043b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d107      	bne.n	8003fce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e02b      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd8:	893b      	ldrh	r3, [r7, #8]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	611a      	str	r2, [r3, #16]
 8003fe2:	e021      	b.n	8004028 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fe4:	893b      	ldrh	r3, [r7, #8]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff4:	6a39      	ldr	r1, [r7, #32]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f9dc 	bl	80043b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	2b04      	cmp	r3, #4
 8004008:	d107      	bne.n	800401a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e005      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800401e:	893b      	ldrh	r3, [r7, #8]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	00010002 	.word	0x00010002

08004038 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	4608      	mov	r0, r1
 8004042:	4611      	mov	r1, r2
 8004044:	461a      	mov	r2, r3
 8004046:	4603      	mov	r3, r0
 8004048:	817b      	strh	r3, [r7, #10]
 800404a:	460b      	mov	r3, r1
 800404c:	813b      	strh	r3, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004060:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	2200      	movs	r2, #0
 800407a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f8c2 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004098:	d103      	bne.n	80040a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e0aa      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040a6:	897b      	ldrh	r3, [r7, #10]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	6a3a      	ldr	r2, [r7, #32]
 80040ba:	4952      	ldr	r1, [pc, #328]	; (8004204 <I2C_RequestMemoryRead+0x1cc>)
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f8fa 	bl	80042b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e097      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e4:	6a39      	ldr	r1, [r7, #32]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f964 	bl	80043b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00d      	beq.n	800410e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d107      	bne.n	800410a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e076      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004114:	893b      	ldrh	r3, [r7, #8]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	e021      	b.n	8004164 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	b29b      	uxth	r3, r3
 8004126:	b2da      	uxtb	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004130:	6a39      	ldr	r1, [r7, #32]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f93e 	bl	80043b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2b04      	cmp	r3, #4
 8004144:	d107      	bne.n	8004156 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e050      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415a:	893b      	ldrh	r3, [r7, #8]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004166:	6a39      	ldr	r1, [r7, #32]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f923 	bl	80043b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00d      	beq.n	8004190 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	2b04      	cmp	r3, #4
 800417a:	d107      	bne.n	800418c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e035      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f82b 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00d      	beq.n	80041d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c6:	d103      	bne.n	80041d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e013      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041d4:	897b      	ldrh	r3, [r7, #10]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	6a3a      	ldr	r2, [r7, #32]
 80041e8:	4906      	ldr	r1, [pc, #24]	; (8004204 <I2C_RequestMemoryRead+0x1cc>)
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f863 	bl	80042b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	00010002 	.word	0x00010002

08004208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004218:	e025      	b.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d021      	beq.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fe ff41 	bl	80030a8 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d116      	bne.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e023      	b.n	80042ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	d10d      	bne.n	800428c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	43da      	mvns	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4013      	ands	r3, r2
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	e00c      	b.n	80042a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	43da      	mvns	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4013      	ands	r3, r2
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	bf0c      	ite	eq
 800429e:	2301      	moveq	r3, #1
 80042a0:	2300      	movne	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	461a      	mov	r2, r3
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d0b6      	beq.n	800421a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042c4:	e051      	b.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d123      	bne.n	800431e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f043 0204 	orr.w	r2, r3, #4
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e046      	b.n	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d021      	beq.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004326:	f7fe febf 	bl	80030a8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d116      	bne.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e020      	b.n	80043ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10c      	bne.n	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	43da      	mvns	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf14      	ite	ne
 8004386:	2301      	movne	r3, #1
 8004388:	2300      	moveq	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	e00b      	b.n	80043a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	43da      	mvns	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4013      	ands	r3, r2
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d18d      	bne.n	80042c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c0:	e02d      	b.n	800441e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f8ce 	bl	8004564 <I2C_IsAcknowledgeFailed>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e02d      	b.n	800442e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d021      	beq.n	800441e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043da:	f7fe fe65 	bl	80030a8 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d116      	bne.n	800441e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f043 0220 	orr.w	r2, r3, #32
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e007      	b.n	800442e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d1ca      	bne.n	80043c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004442:	e02d      	b.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f88d 	bl	8004564 <I2C_IsAcknowledgeFailed>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e02d      	b.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d021      	beq.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445c:	f7fe fe24 	bl	80030a8 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d116      	bne.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e007      	b.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d1ca      	bne.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044c4:	e042      	b.n	800454c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d119      	bne.n	8004508 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0210 	mvn.w	r2, #16
 80044dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e029      	b.n	800455c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004508:	f7fe fdce 	bl	80030a8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	429a      	cmp	r2, r3
 8004516:	d302      	bcc.n	800451e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d116      	bne.n	800454c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e007      	b.n	800455c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d1b5      	bne.n	80044c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457a:	d11b      	bne.n	80045b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004584:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f043 0204 	orr.w	r2, r3, #4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e264      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d075      	beq.n	80046ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045e2:	4ba3      	ldr	r3, [pc, #652]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d00c      	beq.n	8004608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ee:	4ba0      	ldr	r3, [pc, #640]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d112      	bne.n	8004620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045fa:	4b9d      	ldr	r3, [pc, #628]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004606:	d10b      	bne.n	8004620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	4b99      	ldr	r3, [pc, #612]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d05b      	beq.n	80046cc <HAL_RCC_OscConfig+0x108>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d157      	bne.n	80046cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e23f      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d106      	bne.n	8004638 <HAL_RCC_OscConfig+0x74>
 800462a:	4b91      	ldr	r3, [pc, #580]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a90      	ldr	r2, [pc, #576]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e01d      	b.n	8004674 <HAL_RCC_OscConfig+0xb0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0x98>
 8004642:	4b8b      	ldr	r3, [pc, #556]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a8a      	ldr	r2, [pc, #552]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b88      	ldr	r3, [pc, #544]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a87      	ldr	r2, [pc, #540]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0xb0>
 800465c:	4b84      	ldr	r3, [pc, #528]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a83      	ldr	r2, [pc, #524]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4b81      	ldr	r3, [pc, #516]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a80      	ldr	r2, [pc, #512]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 800466e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fe fd14 	bl	80030a8 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004684:	f7fe fd10 	bl	80030a8 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	; 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e204      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004696:	4b76      	ldr	r3, [pc, #472]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0xc0>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fe fd00 	bl	80030a8 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fe fcfc 	bl	80030a8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	; 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1f0      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046be:	4b6c      	ldr	r3, [pc, #432]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0xe8>
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d063      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046da:	4b65      	ldr	r3, [pc, #404]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e6:	4b62      	ldr	r3, [pc, #392]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d11c      	bne.n	800472c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f2:	4b5f      	ldr	r3, [pc, #380]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d116      	bne.n	800472c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fe:	4b5c      	ldr	r3, [pc, #368]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_RCC_OscConfig+0x152>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d001      	beq.n	8004716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e1c4      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004716:	4b56      	ldr	r3, [pc, #344]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4952      	ldr	r1, [pc, #328]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004726:	4313      	orrs	r3, r2
 8004728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472a:	e03a      	b.n	80047a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004734:	4b4f      	ldr	r3, [pc, #316]	; (8004874 <HAL_RCC_OscConfig+0x2b0>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fe fcb5 	bl	80030a8 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004742:	f7fe fcb1 	bl	80030a8 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e1a5      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004754:	4b46      	ldr	r3, [pc, #280]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004760:	4b43      	ldr	r3, [pc, #268]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4940      	ldr	r1, [pc, #256]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	4313      	orrs	r3, r2
 8004772:	600b      	str	r3, [r1, #0]
 8004774:	e015      	b.n	80047a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004776:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <HAL_RCC_OscConfig+0x2b0>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fe fc94 	bl	80030a8 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004784:	f7fe fc90 	bl	80030a8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e184      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004796:	4b36      	ldr	r3, [pc, #216]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d030      	beq.n	8004810 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d016      	beq.n	80047e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047b6:	4b30      	ldr	r3, [pc, #192]	; (8004878 <HAL_RCC_OscConfig+0x2b4>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fe fc74 	bl	80030a8 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c4:	f7fe fc70 	bl	80030a8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e164      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047d6:	4b26      	ldr	r3, [pc, #152]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x200>
 80047e2:	e015      	b.n	8004810 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e4:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_RCC_OscConfig+0x2b4>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ea:	f7fe fc5d 	bl	80030a8 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f2:	f7fe fc59 	bl	80030a8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e14d      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004804:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80a0 	beq.w	800495e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481e:	2300      	movs	r3, #0
 8004820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004822:	4b13      	ldr	r3, [pc, #76]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10f      	bne.n	800484e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	4a0e      	ldr	r2, [pc, #56]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483c:	6413      	str	r3, [r2, #64]	; 0x40
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <HAL_RCC_OscConfig+0x2ac>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_OscConfig+0x2b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d121      	bne.n	800489e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <HAL_RCC_OscConfig+0x2b8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a07      	ldr	r2, [pc, #28]	; (800487c <HAL_RCC_OscConfig+0x2b8>)
 8004860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004866:	f7fe fc1f 	bl	80030a8 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486c:	e011      	b.n	8004892 <HAL_RCC_OscConfig+0x2ce>
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800
 8004874:	42470000 	.word	0x42470000
 8004878:	42470e80 	.word	0x42470e80
 800487c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004880:	f7fe fc12 	bl	80030a8 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e106      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004892:	4b85      	ldr	r3, [pc, #532]	; (8004aa8 <HAL_RCC_OscConfig+0x4e4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d106      	bne.n	80048b4 <HAL_RCC_OscConfig+0x2f0>
 80048a6:	4b81      	ldr	r3, [pc, #516]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048aa:	4a80      	ldr	r2, [pc, #512]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	6713      	str	r3, [r2, #112]	; 0x70
 80048b2:	e01c      	b.n	80048ee <HAL_RCC_OscConfig+0x32a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d10c      	bne.n	80048d6 <HAL_RCC_OscConfig+0x312>
 80048bc:	4b7b      	ldr	r3, [pc, #492]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c0:	4a7a      	ldr	r2, [pc, #488]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80048c2:	f043 0304 	orr.w	r3, r3, #4
 80048c6:	6713      	str	r3, [r2, #112]	; 0x70
 80048c8:	4b78      	ldr	r3, [pc, #480]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	4a77      	ldr	r2, [pc, #476]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6713      	str	r3, [r2, #112]	; 0x70
 80048d4:	e00b      	b.n	80048ee <HAL_RCC_OscConfig+0x32a>
 80048d6:	4b75      	ldr	r3, [pc, #468]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	4a74      	ldr	r2, [pc, #464]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	6713      	str	r3, [r2, #112]	; 0x70
 80048e2:	4b72      	ldr	r3, [pc, #456]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a71      	ldr	r2, [pc, #452]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80048e8:	f023 0304 	bic.w	r3, r3, #4
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d015      	beq.n	8004922 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f6:	f7fe fbd7 	bl	80030a8 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048fe:	f7fe fbd3 	bl	80030a8 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0c5      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004914:	4b65      	ldr	r3, [pc, #404]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0ee      	beq.n	80048fe <HAL_RCC_OscConfig+0x33a>
 8004920:	e014      	b.n	800494c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004922:	f7fe fbc1 	bl	80030a8 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fe fbbd 	bl	80030a8 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0af      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004940:	4b5a      	ldr	r3, [pc, #360]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ee      	bne.n	800492a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d105      	bne.n	800495e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004952:	4b56      	ldr	r3, [pc, #344]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	4a55      	ldr	r2, [pc, #340]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 8004958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 809b 	beq.w	8004a9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004968:	4b50      	ldr	r3, [pc, #320]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b08      	cmp	r3, #8
 8004972:	d05c      	beq.n	8004a2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d141      	bne.n	8004a00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497c:	4b4c      	ldr	r3, [pc, #304]	; (8004ab0 <HAL_RCC_OscConfig+0x4ec>)
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004982:	f7fe fb91 	bl	80030a8 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800498a:	f7fe fb8d 	bl	80030a8 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e081      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800499c:	4b43      	ldr	r3, [pc, #268]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f0      	bne.n	800498a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	019b      	lsls	r3, r3, #6
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	3b01      	subs	r3, #1
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	061b      	lsls	r3, r3, #24
 80049cc:	4937      	ldr	r1, [pc, #220]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d2:	4b37      	ldr	r3, [pc, #220]	; (8004ab0 <HAL_RCC_OscConfig+0x4ec>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7fe fb66 	bl	80030a8 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fe fb62 	bl	80030a8 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e056      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f2:	4b2e      	ldr	r3, [pc, #184]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x41c>
 80049fe:	e04e      	b.n	8004a9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a00:	4b2b      	ldr	r3, [pc, #172]	; (8004ab0 <HAL_RCC_OscConfig+0x4ec>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fe fb4f 	bl	80030a8 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0e:	f7fe fb4b 	bl	80030a8 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e03f      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a20:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <HAL_RCC_OscConfig+0x44a>
 8004a2c:	e037      	b.n	8004a9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e032      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a3a:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <HAL_RCC_OscConfig+0x4e8>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d028      	beq.n	8004a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d121      	bne.n	8004a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d11a      	bne.n	8004a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d111      	bne.n	8004a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	3b01      	subs	r3, #1
 8004a84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d107      	bne.n	8004a9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40007000 	.word	0x40007000
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	42470060 	.word	0x42470060

08004ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0cc      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b68      	ldr	r3, [pc, #416]	; (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d90c      	bls.n	8004af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b65      	ldr	r3, [pc, #404]	; (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b63      	ldr	r3, [pc, #396]	; (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0b8      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d020      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b08:	4b59      	ldr	r3, [pc, #356]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4a58      	ldr	r2, [pc, #352]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b20:	4b53      	ldr	r3, [pc, #332]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	4a52      	ldr	r2, [pc, #328]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2c:	4b50      	ldr	r3, [pc, #320]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	494d      	ldr	r1, [pc, #308]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d044      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b47      	ldr	r3, [pc, #284]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d119      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e07f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d003      	beq.n	8004b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b72:	4b3f      	ldr	r3, [pc, #252]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e06f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b82:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e067      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b92:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 0203 	bic.w	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4934      	ldr	r1, [pc, #208]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba4:	f7fe fa80 	bl	80030a8 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bac:	f7fe fa7c 	bl	80030a8 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e04f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc2:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 020c 	and.w	r2, r3, #12
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d1eb      	bne.n	8004bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd4:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d20c      	bcs.n	8004bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be2:	4b22      	ldr	r3, [pc, #136]	; (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e032      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4916      	ldr	r1, [pc, #88]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c26:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	490e      	ldr	r1, [pc, #56]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c3a:	f000 f821 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	490a      	ldr	r1, [pc, #40]	; (8004c74 <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	5ccb      	ldrb	r3, [r1, r3]
 8004c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c52:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCC_ClockConfig+0x1c8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe f9e0 	bl	8003020 <HAL_InitTick>

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023c00 	.word	0x40023c00
 8004c70:	40023800 	.word	0x40023800
 8004c74:	0800993c 	.word	0x0800993c
 8004c78:	20000008 	.word	0x20000008
 8004c7c:	2000000c 	.word	0x2000000c

08004c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c80:	b5b0      	push	{r4, r5, r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c86:	2100      	movs	r1, #0
 8004c88:	6079      	str	r1, [r7, #4]
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	60f9      	str	r1, [r7, #12]
 8004c8e:	2100      	movs	r1, #0
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c92:	2100      	movs	r1, #0
 8004c94:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c96:	4952      	ldr	r1, [pc, #328]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c98:	6889      	ldr	r1, [r1, #8]
 8004c9a:	f001 010c 	and.w	r1, r1, #12
 8004c9e:	2908      	cmp	r1, #8
 8004ca0:	d00d      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0x3e>
 8004ca2:	2908      	cmp	r1, #8
 8004ca4:	f200 8094 	bhi.w	8004dd0 <HAL_RCC_GetSysClockFreq+0x150>
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_RCC_GetSysClockFreq+0x32>
 8004cac:	2904      	cmp	r1, #4
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x38>
 8004cb0:	e08e      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb2:	4b4c      	ldr	r3, [pc, #304]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004cb4:	60bb      	str	r3, [r7, #8]
       break;
 8004cb6:	e08e      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004cba:	60bb      	str	r3, [r7, #8]
      break;
 8004cbc:	e08b      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cbe:	4948      	ldr	r1, [pc, #288]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cc0:	6849      	ldr	r1, [r1, #4]
 8004cc2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004cc6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cc8:	4945      	ldr	r1, [pc, #276]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cca:	6849      	ldr	r1, [r1, #4]
 8004ccc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004cd0:	2900      	cmp	r1, #0
 8004cd2:	d024      	beq.n	8004d1e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd4:	4942      	ldr	r1, [pc, #264]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cd6:	6849      	ldr	r1, [r1, #4]
 8004cd8:	0989      	lsrs	r1, r1, #6
 8004cda:	4608      	mov	r0, r1
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004ce4:	f04f 0500 	mov.w	r5, #0
 8004ce8:	ea00 0204 	and.w	r2, r0, r4
 8004cec:	ea01 0305 	and.w	r3, r1, r5
 8004cf0:	493d      	ldr	r1, [pc, #244]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004cf2:	fb01 f003 	mul.w	r0, r1, r3
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	fb01 f102 	mul.w	r1, r1, r2
 8004cfc:	1844      	adds	r4, r0, r1
 8004cfe:	493a      	ldr	r1, [pc, #232]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d00:	fba2 0101 	umull	r0, r1, r2, r1
 8004d04:	1863      	adds	r3, r4, r1
 8004d06:	4619      	mov	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	f7fb ff52 	bl	8000bb8 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e04a      	b.n	8004db4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d1e:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	099b      	lsrs	r3, r3, #6
 8004d24:	461a      	mov	r2, r3
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	ea02 0400 	and.w	r4, r2, r0
 8004d36:	ea03 0501 	and.w	r5, r3, r1
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	014b      	lsls	r3, r1, #5
 8004d48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d4c:	0142      	lsls	r2, r0, #5
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	1b00      	subs	r0, r0, r4
 8004d54:	eb61 0105 	sbc.w	r1, r1, r5
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	018b      	lsls	r3, r1, #6
 8004d62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d66:	0182      	lsls	r2, r0, #6
 8004d68:	1a12      	subs	r2, r2, r0
 8004d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d6e:	f04f 0000 	mov.w	r0, #0
 8004d72:	f04f 0100 	mov.w	r1, #0
 8004d76:	00d9      	lsls	r1, r3, #3
 8004d78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d7c:	00d0      	lsls	r0, r2, #3
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	1912      	adds	r2, r2, r4
 8004d84:	eb45 0303 	adc.w	r3, r5, r3
 8004d88:	f04f 0000 	mov.w	r0, #0
 8004d8c:	f04f 0100 	mov.w	r1, #0
 8004d90:	0299      	lsls	r1, r3, #10
 8004d92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d96:	0290      	lsls	r0, r2, #10
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	f7fb ff06 	bl	8000bb8 <__aeabi_uldivmod>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4613      	mov	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	60bb      	str	r3, [r7, #8]
      break;
 8004dce:	e002      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004dd2:	60bb      	str	r3, [r7, #8]
      break;
 8004dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bdb0      	pop	{r4, r5, r7, pc}
 8004de0:	40023800 	.word	0x40023800
 8004de4:	00f42400 	.word	0x00f42400
 8004de8:	017d7840 	.word	0x017d7840

08004dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000008 	.word	0x20000008

08004e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e08:	f7ff fff0 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	0a9b      	lsrs	r3, r3, #10
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	4903      	ldr	r1, [pc, #12]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1a:	5ccb      	ldrb	r3, [r1, r3]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40023800 	.word	0x40023800
 8004e28:	0800994c 	.word	0x0800994c

08004e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e30:	f7ff ffdc 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	0b5b      	lsrs	r3, r3, #13
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	4903      	ldr	r1, [pc, #12]	; (8004e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e42:	5ccb      	ldrb	r3, [r1, r3]
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	0800994c 	.word	0x0800994c

08004e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07b      	b.n	8004f5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d108      	bne.n	8004e80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e76:	d009      	beq.n	8004e8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	61da      	str	r2, [r3, #28]
 8004e7e:	e005      	b.n	8004e8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fd fcfe 	bl	80028a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f10:	ea42 0103 	orr.w	r1, r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	f003 0104 	and.w	r1, r3, #4
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f003 0210 	and.w	r2, r3, #16
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b088      	sub	sp, #32
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_SPI_Transmit+0x22>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e126      	b.n	80051d6 <HAL_SPI_Transmit+0x270>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f90:	f7fe f88a 	bl	80030a8 <HAL_GetTick>
 8004f94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004faa:	e10b      	b.n	80051c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_SPI_Transmit+0x52>
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fbc:	e102      	b.n	80051c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	88fa      	ldrh	r2, [r7, #6]
 8004fd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	88fa      	ldrh	r2, [r7, #6]
 8004fdc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005004:	d10f      	bne.n	8005026 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005014:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005024:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	d007      	beq.n	8005044 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504c:	d14b      	bne.n	80050e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_SPI_Transmit+0xf6>
 8005056:	8afb      	ldrh	r3, [r7, #22]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d13e      	bne.n	80050da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	881a      	ldrh	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	1c9a      	adds	r2, r3, #2
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005080:	e02b      	b.n	80050da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b02      	cmp	r3, #2
 800508e:	d112      	bne.n	80050b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	881a      	ldrh	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	1c9a      	adds	r2, r3, #2
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80050b4:	e011      	b.n	80050da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050b6:	f7fd fff7 	bl	80030a8 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d803      	bhi.n	80050ce <HAL_SPI_Transmit+0x168>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d102      	bne.n	80050d4 <HAL_SPI_Transmit+0x16e>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050d8:	e074      	b.n	80051c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ce      	bne.n	8005082 <HAL_SPI_Transmit+0x11c>
 80050e4:	e04c      	b.n	8005180 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_SPI_Transmit+0x18e>
 80050ee:	8afb      	ldrh	r3, [r7, #22]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d140      	bne.n	8005176 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800511a:	e02c      	b.n	8005176 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	d113      	bne.n	8005152 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	7812      	ldrb	r2, [r2, #0]
 8005136:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005150:	e011      	b.n	8005176 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005152:	f7fd ffa9 	bl	80030a8 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d803      	bhi.n	800516a <HAL_SPI_Transmit+0x204>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d102      	bne.n	8005170 <HAL_SPI_Transmit+0x20a>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005174:	e026      	b.n	80051c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1cd      	bne.n	800511c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 fbcb 	bl	8005920 <SPI_EndRxTxTransaction>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	77fb      	strb	r3, [r7, #31]
 80051c0:	e000      	b.n	80051c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80051c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b088      	sub	sp, #32
 80051e2:	af02      	add	r7, sp, #8
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	603b      	str	r3, [r7, #0]
 80051ea:	4613      	mov	r3, r2
 80051ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fa:	d112      	bne.n	8005222 <HAL_SPI_Receive+0x44>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10e      	bne.n	8005222 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2204      	movs	r2, #4
 8005208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800520c:	88fa      	ldrh	r2, [r7, #6]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f8f1 	bl	8005400 <HAL_SPI_TransmitReceive>
 800521e:	4603      	mov	r3, r0
 8005220:	e0ea      	b.n	80053f8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_SPI_Receive+0x52>
 800522c:	2302      	movs	r3, #2
 800522e:	e0e3      	b.n	80053f8 <HAL_SPI_Receive+0x21a>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005238:	f7fd ff36 	bl	80030a8 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	d002      	beq.n	8005250 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800524a:	2302      	movs	r3, #2
 800524c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800524e:	e0ca      	b.n	80053e6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_SPI_Receive+0x7e>
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005260:	e0c1      	b.n	80053e6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2204      	movs	r2, #4
 8005266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	88fa      	ldrh	r2, [r7, #6]
 800527a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	88fa      	ldrh	r2, [r7, #6]
 8005280:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	d10f      	bne.n	80052ca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80052c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b40      	cmp	r3, #64	; 0x40
 80052d6:	d007      	beq.n	80052e8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d162      	bne.n	80053b6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052f0:	e02e      	b.n	8005350 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d115      	bne.n	800532c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f103 020c 	add.w	r2, r3, #12
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	7812      	ldrb	r2, [r2, #0]
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800532a:	e011      	b.n	8005350 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800532c:	f7fd febc 	bl	80030a8 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d803      	bhi.n	8005344 <HAL_SPI_Receive+0x166>
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d102      	bne.n	800534a <HAL_SPI_Receive+0x16c>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800534e:	e04a      	b.n	80053e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1cb      	bne.n	80052f2 <HAL_SPI_Receive+0x114>
 800535a:	e031      	b.n	80053c0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d113      	bne.n	8005392 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68da      	ldr	r2, [r3, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	b292      	uxth	r2, r2
 8005376:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	1c9a      	adds	r2, r3, #2
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005390:	e011      	b.n	80053b6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005392:	f7fd fe89 	bl	80030a8 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d803      	bhi.n	80053aa <HAL_SPI_Receive+0x1cc>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d102      	bne.n	80053b0 <HAL_SPI_Receive+0x1d2>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053b4:	e017      	b.n	80053e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1cd      	bne.n	800535c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fa45 	bl	8005854 <SPI_EndRxTransaction>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	75fb      	strb	r3, [r7, #23]
 80053e2:	e000      	b.n	80053e6 <HAL_SPI_Receive+0x208>
  }

error :
 80053e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08c      	sub	sp, #48	; 0x30
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800540e:	2301      	movs	r3, #1
 8005410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_SPI_TransmitReceive+0x26>
 8005422:	2302      	movs	r3, #2
 8005424:	e18a      	b.n	800573c <HAL_SPI_TransmitReceive+0x33c>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800542e:	f7fd fe3b 	bl	80030a8 <HAL_GetTick>
 8005432:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005444:	887b      	ldrh	r3, [r7, #2]
 8005446:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800544c:	2b01      	cmp	r3, #1
 800544e:	d00f      	beq.n	8005470 <HAL_SPI_TransmitReceive+0x70>
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005456:	d107      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d103      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x68>
 8005460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005464:	2b04      	cmp	r3, #4
 8005466:	d003      	beq.n	8005470 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005468:	2302      	movs	r3, #2
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800546e:	e15b      	b.n	8005728 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_SPI_TransmitReceive+0x82>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <HAL_SPI_TransmitReceive+0x82>
 800547c:	887b      	ldrh	r3, [r7, #2]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005488:	e14e      	b.n	8005728 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b04      	cmp	r3, #4
 8005494:	d003      	beq.n	800549e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2205      	movs	r2, #5
 800549a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	887a      	ldrh	r2, [r7, #2]
 80054ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	887a      	ldrh	r2, [r7, #2]
 80054b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	887a      	ldrh	r2, [r7, #2]
 80054c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	887a      	ldrh	r2, [r7, #2]
 80054c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d007      	beq.n	80054f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054fa:	d178      	bne.n	80055ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_SPI_TransmitReceive+0x10a>
 8005504:	8b7b      	ldrh	r3, [r7, #26]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d166      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	881a      	ldrh	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	1c9a      	adds	r2, r3, #2
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800552e:	e053      	b.n	80055d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b02      	cmp	r3, #2
 800553c:	d11b      	bne.n	8005576 <HAL_SPI_TransmitReceive+0x176>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d016      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x176>
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d113      	bne.n	8005576 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	1c9a      	adds	r2, r3, #2
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b01      	cmp	r3, #1
 8005582:	d119      	bne.n	80055b8 <HAL_SPI_TransmitReceive+0x1b8>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d014      	beq.n	80055b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	b292      	uxth	r2, r2
 800559a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	1c9a      	adds	r2, r3, #2
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055b4:	2301      	movs	r3, #1
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055b8:	f7fd fd76 	bl	80030a8 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d807      	bhi.n	80055d8 <HAL_SPI_TransmitReceive+0x1d8>
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d003      	beq.n	80055d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055d6:	e0a7      	b.n	8005728 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1a6      	bne.n	8005530 <HAL_SPI_TransmitReceive+0x130>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1a1      	bne.n	8005530 <HAL_SPI_TransmitReceive+0x130>
 80055ec:	e07c      	b.n	80056e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_SPI_TransmitReceive+0x1fc>
 80055f6:	8b7b      	ldrh	r3, [r7, #26]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d16b      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	7812      	ldrb	r2, [r2, #0]
 8005608:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005622:	e057      	b.n	80056d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b02      	cmp	r3, #2
 8005630:	d11c      	bne.n	800566c <HAL_SPI_TransmitReceive+0x26c>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d017      	beq.n	800566c <HAL_SPI_TransmitReceive+0x26c>
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563e:	2b01      	cmp	r3, #1
 8005640:	d114      	bne.n	800566c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	330c      	adds	r3, #12
 800564c:	7812      	ldrb	r2, [r2, #0]
 800564e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b01      	cmp	r3, #1
 8005678:	d119      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x2ae>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d014      	beq.n	80056ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056aa:	2301      	movs	r3, #1
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056ae:	f7fd fcfb 	bl	80030a8 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d803      	bhi.n	80056c6 <HAL_SPI_TransmitReceive+0x2c6>
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_TransmitReceive+0x2cc>
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056d2:	e029      	b.n	8005728 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1a2      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x224>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d19d      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f917 	bl	8005920 <SPI_EndRxTxTransaction>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d006      	beq.n	8005706 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005704:	e010      	b.n	8005728 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	e000      	b.n	8005728 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005726:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800573c:	4618      	mov	r0, r3
 800573e:	3730      	adds	r7, #48	; 0x30
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4613      	mov	r3, r2
 8005752:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005754:	f7fd fca8 	bl	80030a8 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	4413      	add	r3, r2
 8005762:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005764:	f7fd fca0 	bl	80030a8 <HAL_GetTick>
 8005768:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800576a:	4b39      	ldr	r3, [pc, #228]	; (8005850 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	015b      	lsls	r3, r3, #5
 8005770:	0d1b      	lsrs	r3, r3, #20
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	fb02 f303 	mul.w	r3, r2, r3
 8005778:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800577a:	e054      	b.n	8005826 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d050      	beq.n	8005826 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005784:	f7fd fc90 	bl	80030a8 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	429a      	cmp	r2, r3
 8005792:	d902      	bls.n	800579a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d13d      	bne.n	8005816 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b2:	d111      	bne.n	80057d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057bc:	d004      	beq.n	80057c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c6:	d107      	bne.n	80057d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e0:	d10f      	bne.n	8005802 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005800:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e017      	b.n	8005846 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	3b01      	subs	r3, #1
 8005824:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4013      	ands	r3, r2
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	bf0c      	ite	eq
 8005836:	2301      	moveq	r3, #1
 8005838:	2300      	movne	r3, #0
 800583a:	b2db      	uxtb	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	429a      	cmp	r2, r3
 8005842:	d19b      	bne.n	800577c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3720      	adds	r7, #32
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000008 	.word	0x20000008

08005854 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005868:	d111      	bne.n	800588e <SPI_EndRxTransaction+0x3a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005872:	d004      	beq.n	800587e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587c:	d107      	bne.n	800588e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800588c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005896:	d12a      	bne.n	80058ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a0:	d012      	beq.n	80058c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2200      	movs	r2, #0
 80058aa:	2180      	movs	r1, #128	; 0x80
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff ff49 	bl	8005744 <SPI_WaitFlagStateUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d02d      	beq.n	8005914 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058bc:	f043 0220 	orr.w	r2, r3, #32
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e026      	b.n	8005916 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2200      	movs	r2, #0
 80058d0:	2101      	movs	r1, #1
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff ff36 	bl	8005744 <SPI_WaitFlagStateUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01a      	beq.n	8005914 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	f043 0220 	orr.w	r2, r3, #32
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e013      	b.n	8005916 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2200      	movs	r2, #0
 80058f6:	2101      	movs	r1, #1
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff ff23 	bl	8005744 <SPI_WaitFlagStateUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005908:	f043 0220 	orr.w	r2, r3, #32
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e000      	b.n	8005916 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <SPI_EndRxTxTransaction+0x7c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <SPI_EndRxTxTransaction+0x80>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	0d5b      	lsrs	r3, r3, #21
 8005938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800593c:	fb02 f303 	mul.w	r3, r2, r3
 8005940:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594a:	d112      	bne.n	8005972 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2200      	movs	r2, #0
 8005954:	2180      	movs	r1, #128	; 0x80
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f7ff fef4 	bl	8005744 <SPI_WaitFlagStateUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d016      	beq.n	8005990 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005966:	f043 0220 	orr.w	r2, r3, #32
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e00f      	b.n	8005992 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	3b01      	subs	r3, #1
 800597c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d0f2      	beq.n	8005972 <SPI_EndRxTxTransaction+0x52>
 800598c:	e000      	b.n	8005990 <SPI_EndRxTxTransaction+0x70>
        break;
 800598e:	bf00      	nop
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000008 	.word	0x20000008
 80059a0:	165e9f81 	.word	0x165e9f81

080059a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e03f      	b.n	8005a36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fd fa94 	bl	8002ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2224      	movs	r2, #36	; 0x24
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f905 	bl	8005bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695a      	ldr	r2, [r3, #20]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b08a      	sub	sp, #40	; 0x28
 8005a42:	af02      	add	r7, sp, #8
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d17c      	bne.n	8005b58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_UART_Transmit+0x2c>
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e075      	b.n	8005b5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_UART_Transmit+0x3e>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e06e      	b.n	8005b5a <HAL_UART_Transmit+0x11c>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2221      	movs	r2, #33	; 0x21
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a92:	f7fd fb09 	bl	80030a8 <HAL_GetTick>
 8005a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aac:	d108      	bne.n	8005ac0 <HAL_UART_Transmit+0x82>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e003      	b.n	8005ac8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ad0:	e02a      	b.n	8005b28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2180      	movs	r1, #128	; 0x80
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f840 	bl	8005b62 <UART_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e036      	b.n	8005b5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10b      	bne.n	8005b0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	3302      	adds	r3, #2
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	e007      	b.n	8005b1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1cf      	bne.n	8005ad2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2140      	movs	r1, #64	; 0x40
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f810 	bl	8005b62 <UART_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e006      	b.n	8005b5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e000      	b.n	8005b5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b58:	2302      	movs	r3, #2
  }
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	603b      	str	r3, [r7, #0]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b72:	e02c      	b.n	8005bce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d028      	beq.n	8005bce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b82:	f7fd fa91 	bl	80030a8 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d21d      	bcs.n	8005bce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ba0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e00f      	b.n	8005bee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	bf0c      	ite	eq
 8005bde:	2301      	moveq	r3, #1
 8005be0:	2300      	movne	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d0c3      	beq.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	b09f      	sub	sp, #124	; 0x7c
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0e:	68d9      	ldr	r1, [r3, #12]
 8005c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	ea40 0301 	orr.w	r3, r0, r1
 8005c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c3c:	f021 010c 	bic.w	r1, r1, #12
 8005c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c46:	430b      	orrs	r3, r1
 8005c48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c56:	6999      	ldr	r1, [r3, #24]
 8005c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	ea40 0301 	orr.w	r3, r0, r1
 8005c60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	4bc5      	ldr	r3, [pc, #788]	; (8005f7c <UART_SetConfig+0x384>)
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d004      	beq.n	8005c76 <UART_SetConfig+0x7e>
 8005c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4bc3      	ldr	r3, [pc, #780]	; (8005f80 <UART_SetConfig+0x388>)
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d103      	bne.n	8005c7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c76:	f7ff f8d9 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8005c7a:	6778      	str	r0, [r7, #116]	; 0x74
 8005c7c:	e002      	b.n	8005c84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c7e:	f7ff f8c1 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 8005c82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8c:	f040 80b6 	bne.w	8005dfc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c92:	461c      	mov	r4, r3
 8005c94:	f04f 0500 	mov.w	r5, #0
 8005c98:	4622      	mov	r2, r4
 8005c9a:	462b      	mov	r3, r5
 8005c9c:	1891      	adds	r1, r2, r2
 8005c9e:	6439      	str	r1, [r7, #64]	; 0x40
 8005ca0:	415b      	adcs	r3, r3
 8005ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ca8:	1912      	adds	r2, r2, r4
 8005caa:	eb45 0303 	adc.w	r3, r5, r3
 8005cae:	f04f 0000 	mov.w	r0, #0
 8005cb2:	f04f 0100 	mov.w	r1, #0
 8005cb6:	00d9      	lsls	r1, r3, #3
 8005cb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cbc:	00d0      	lsls	r0, r2, #3
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	1911      	adds	r1, r2, r4
 8005cc4:	6639      	str	r1, [r7, #96]	; 0x60
 8005cc6:	416b      	adcs	r3, r5
 8005cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	1891      	adds	r1, r2, r2
 8005cd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cd8:	415b      	adcs	r3, r3
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ce0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ce4:	f7fa ff68 	bl	8000bb8 <__aeabi_uldivmod>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4ba5      	ldr	r3, [pc, #660]	; (8005f84 <UART_SetConfig+0x38c>)
 8005cee:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	011e      	lsls	r6, r3, #4
 8005cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cf8:	461c      	mov	r4, r3
 8005cfa:	f04f 0500 	mov.w	r5, #0
 8005cfe:	4622      	mov	r2, r4
 8005d00:	462b      	mov	r3, r5
 8005d02:	1891      	adds	r1, r2, r2
 8005d04:	6339      	str	r1, [r7, #48]	; 0x30
 8005d06:	415b      	adcs	r3, r3
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
 8005d0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d0e:	1912      	adds	r2, r2, r4
 8005d10:	eb45 0303 	adc.w	r3, r5, r3
 8005d14:	f04f 0000 	mov.w	r0, #0
 8005d18:	f04f 0100 	mov.w	r1, #0
 8005d1c:	00d9      	lsls	r1, r3, #3
 8005d1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d22:	00d0      	lsls	r0, r2, #3
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	1911      	adds	r1, r2, r4
 8005d2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d2c:	416b      	adcs	r3, r5
 8005d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	461a      	mov	r2, r3
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	1891      	adds	r1, r2, r2
 8005d3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d3e:	415b      	adcs	r3, r3
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d4a:	f7fa ff35 	bl	8000bb8 <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4b8c      	ldr	r3, [pc, #560]	; (8005f84 <UART_SetConfig+0x38c>)
 8005d54:	fba3 1302 	umull	r1, r3, r3, r2
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	2164      	movs	r1, #100	; 0x64
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	3332      	adds	r3, #50	; 0x32
 8005d66:	4a87      	ldr	r2, [pc, #540]	; (8005f84 <UART_SetConfig+0x38c>)
 8005d68:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6c:	095b      	lsrs	r3, r3, #5
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d74:	441e      	add	r6, r3
 8005d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f04f 0100 	mov.w	r1, #0
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	1894      	adds	r4, r2, r2
 8005d84:	623c      	str	r4, [r7, #32]
 8005d86:	415b      	adcs	r3, r3
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d8e:	1812      	adds	r2, r2, r0
 8005d90:	eb41 0303 	adc.w	r3, r1, r3
 8005d94:	f04f 0400 	mov.w	r4, #0
 8005d98:	f04f 0500 	mov.w	r5, #0
 8005d9c:	00dd      	lsls	r5, r3, #3
 8005d9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005da2:	00d4      	lsls	r4, r2, #3
 8005da4:	4622      	mov	r2, r4
 8005da6:	462b      	mov	r3, r5
 8005da8:	1814      	adds	r4, r2, r0
 8005daa:	653c      	str	r4, [r7, #80]	; 0x50
 8005dac:	414b      	adcs	r3, r1
 8005dae:	657b      	str	r3, [r7, #84]	; 0x54
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	461a      	mov	r2, r3
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	1891      	adds	r1, r2, r2
 8005dbc:	61b9      	str	r1, [r7, #24]
 8005dbe:	415b      	adcs	r3, r3
 8005dc0:	61fb      	str	r3, [r7, #28]
 8005dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005dca:	f7fa fef5 	bl	8000bb8 <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4b6c      	ldr	r3, [pc, #432]	; (8005f84 <UART_SetConfig+0x38c>)
 8005dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	2164      	movs	r1, #100	; 0x64
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	3332      	adds	r3, #50	; 0x32
 8005de6:	4a67      	ldr	r2, [pc, #412]	; (8005f84 <UART_SetConfig+0x38c>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	f003 0207 	and.w	r2, r3, #7
 8005df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4432      	add	r2, r6
 8005df8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dfa:	e0b9      	b.n	8005f70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dfe:	461c      	mov	r4, r3
 8005e00:	f04f 0500 	mov.w	r5, #0
 8005e04:	4622      	mov	r2, r4
 8005e06:	462b      	mov	r3, r5
 8005e08:	1891      	adds	r1, r2, r2
 8005e0a:	6139      	str	r1, [r7, #16]
 8005e0c:	415b      	adcs	r3, r3
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e14:	1912      	adds	r2, r2, r4
 8005e16:	eb45 0303 	adc.w	r3, r5, r3
 8005e1a:	f04f 0000 	mov.w	r0, #0
 8005e1e:	f04f 0100 	mov.w	r1, #0
 8005e22:	00d9      	lsls	r1, r3, #3
 8005e24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e28:	00d0      	lsls	r0, r2, #3
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	eb12 0804 	adds.w	r8, r2, r4
 8005e32:	eb43 0905 	adc.w	r9, r3, r5
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f04f 0100 	mov.w	r1, #0
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	008b      	lsls	r3, r1, #2
 8005e4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e4e:	0082      	lsls	r2, r0, #2
 8005e50:	4640      	mov	r0, r8
 8005e52:	4649      	mov	r1, r9
 8005e54:	f7fa feb0 	bl	8000bb8 <__aeabi_uldivmod>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4b49      	ldr	r3, [pc, #292]	; (8005f84 <UART_SetConfig+0x38c>)
 8005e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	011e      	lsls	r6, r3, #4
 8005e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f04f 0100 	mov.w	r1, #0
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	1894      	adds	r4, r2, r2
 8005e74:	60bc      	str	r4, [r7, #8]
 8005e76:	415b      	adcs	r3, r3
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e7e:	1812      	adds	r2, r2, r0
 8005e80:	eb41 0303 	adc.w	r3, r1, r3
 8005e84:	f04f 0400 	mov.w	r4, #0
 8005e88:	f04f 0500 	mov.w	r5, #0
 8005e8c:	00dd      	lsls	r5, r3, #3
 8005e8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e92:	00d4      	lsls	r4, r2, #3
 8005e94:	4622      	mov	r2, r4
 8005e96:	462b      	mov	r3, r5
 8005e98:	1814      	adds	r4, r2, r0
 8005e9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005e9c:	414b      	adcs	r3, r1
 8005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f04f 0100 	mov.w	r1, #0
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	f04f 0300 	mov.w	r3, #0
 8005eb2:	008b      	lsls	r3, r1, #2
 8005eb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005eb8:	0082      	lsls	r2, r0, #2
 8005eba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ebe:	f7fa fe7b 	bl	8000bb8 <__aeabi_uldivmod>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4b2f      	ldr	r3, [pc, #188]	; (8005f84 <UART_SetConfig+0x38c>)
 8005ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	2164      	movs	r1, #100	; 0x64
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	3332      	adds	r3, #50	; 0x32
 8005eda:	4a2a      	ldr	r2, [pc, #168]	; (8005f84 <UART_SetConfig+0x38c>)
 8005edc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ee6:	441e      	add	r6, r3
 8005ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eea:	4618      	mov	r0, r3
 8005eec:	f04f 0100 	mov.w	r1, #0
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	1894      	adds	r4, r2, r2
 8005ef6:	603c      	str	r4, [r7, #0]
 8005ef8:	415b      	adcs	r3, r3
 8005efa:	607b      	str	r3, [r7, #4]
 8005efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f00:	1812      	adds	r2, r2, r0
 8005f02:	eb41 0303 	adc.w	r3, r1, r3
 8005f06:	f04f 0400 	mov.w	r4, #0
 8005f0a:	f04f 0500 	mov.w	r5, #0
 8005f0e:	00dd      	lsls	r5, r3, #3
 8005f10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f14:	00d4      	lsls	r4, r2, #3
 8005f16:	4622      	mov	r2, r4
 8005f18:	462b      	mov	r3, r5
 8005f1a:	eb12 0a00 	adds.w	sl, r2, r0
 8005f1e:	eb43 0b01 	adc.w	fp, r3, r1
 8005f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f04f 0100 	mov.w	r1, #0
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	008b      	lsls	r3, r1, #2
 8005f36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f3a:	0082      	lsls	r2, r0, #2
 8005f3c:	4650      	mov	r0, sl
 8005f3e:	4659      	mov	r1, fp
 8005f40:	f7fa fe3a 	bl	8000bb8 <__aeabi_uldivmod>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	4b0e      	ldr	r3, [pc, #56]	; (8005f84 <UART_SetConfig+0x38c>)
 8005f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	2164      	movs	r1, #100	; 0x64
 8005f52:	fb01 f303 	mul.w	r3, r1, r3
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	3332      	adds	r3, #50	; 0x32
 8005f5c:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <UART_SetConfig+0x38c>)
 8005f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	f003 020f 	and.w	r2, r3, #15
 8005f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4432      	add	r2, r6
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	bf00      	nop
 8005f72:	377c      	adds	r7, #124	; 0x7c
 8005f74:	46bd      	mov	sp, r7
 8005f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40011000 	.word	0x40011000
 8005f80:	40011400 	.word	0x40011400
 8005f84:	51eb851f 	.word	0x51eb851f

08005f88 <__errno>:
 8005f88:	4b01      	ldr	r3, [pc, #4]	; (8005f90 <__errno+0x8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20000014 	.word	0x20000014

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4d0d      	ldr	r5, [pc, #52]	; (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	; (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1b64      	subs	r4, r4, r5
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	42a6      	cmp	r6, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4d0b      	ldr	r5, [pc, #44]	; (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	; (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f003 fa14 	bl	80093d4 <_init>
 8005fac:	1b64      	subs	r4, r4, r5
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	42a6      	cmp	r6, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fbc:	4798      	blx	r3
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc6:	4798      	blx	r3
 8005fc8:	3601      	adds	r6, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	08009db0 	.word	0x08009db0
 8005fd0:	08009db0 	.word	0x08009db0
 8005fd4:	08009db0 	.word	0x08009db0
 8005fd8:	08009db4 	.word	0x08009db4

08005fdc <memcpy>:
 8005fdc:	440a      	add	r2, r1
 8005fde:	4291      	cmp	r1, r2
 8005fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fe4:	d100      	bne.n	8005fe8 <memcpy+0xc>
 8005fe6:	4770      	bx	lr
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff2:	4291      	cmp	r1, r2
 8005ff4:	d1f9      	bne.n	8005fea <memcpy+0xe>
 8005ff6:	bd10      	pop	{r4, pc}

08005ff8 <memset>:
 8005ff8:	4402      	add	r2, r0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d100      	bne.n	8006002 <memset+0xa>
 8006000:	4770      	bx	lr
 8006002:	f803 1b01 	strb.w	r1, [r3], #1
 8006006:	e7f9      	b.n	8005ffc <memset+0x4>

08006008 <__cvt>:
 8006008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800600c:	ec55 4b10 	vmov	r4, r5, d0
 8006010:	2d00      	cmp	r5, #0
 8006012:	460e      	mov	r6, r1
 8006014:	4619      	mov	r1, r3
 8006016:	462b      	mov	r3, r5
 8006018:	bfbb      	ittet	lt
 800601a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800601e:	461d      	movlt	r5, r3
 8006020:	2300      	movge	r3, #0
 8006022:	232d      	movlt	r3, #45	; 0x2d
 8006024:	700b      	strb	r3, [r1, #0]
 8006026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006028:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800602c:	4691      	mov	r9, r2
 800602e:	f023 0820 	bic.w	r8, r3, #32
 8006032:	bfbc      	itt	lt
 8006034:	4622      	movlt	r2, r4
 8006036:	4614      	movlt	r4, r2
 8006038:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800603c:	d005      	beq.n	800604a <__cvt+0x42>
 800603e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006042:	d100      	bne.n	8006046 <__cvt+0x3e>
 8006044:	3601      	adds	r6, #1
 8006046:	2102      	movs	r1, #2
 8006048:	e000      	b.n	800604c <__cvt+0x44>
 800604a:	2103      	movs	r1, #3
 800604c:	ab03      	add	r3, sp, #12
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	ab02      	add	r3, sp, #8
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	ec45 4b10 	vmov	d0, r4, r5
 8006058:	4653      	mov	r3, sl
 800605a:	4632      	mov	r2, r6
 800605c:	f000 fcec 	bl	8006a38 <_dtoa_r>
 8006060:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006064:	4607      	mov	r7, r0
 8006066:	d102      	bne.n	800606e <__cvt+0x66>
 8006068:	f019 0f01 	tst.w	r9, #1
 800606c:	d022      	beq.n	80060b4 <__cvt+0xac>
 800606e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006072:	eb07 0906 	add.w	r9, r7, r6
 8006076:	d110      	bne.n	800609a <__cvt+0x92>
 8006078:	783b      	ldrb	r3, [r7, #0]
 800607a:	2b30      	cmp	r3, #48	; 0x30
 800607c:	d10a      	bne.n	8006094 <__cvt+0x8c>
 800607e:	2200      	movs	r2, #0
 8006080:	2300      	movs	r3, #0
 8006082:	4620      	mov	r0, r4
 8006084:	4629      	mov	r1, r5
 8006086:	f7fa fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800608a:	b918      	cbnz	r0, 8006094 <__cvt+0x8c>
 800608c:	f1c6 0601 	rsb	r6, r6, #1
 8006090:	f8ca 6000 	str.w	r6, [sl]
 8006094:	f8da 3000 	ldr.w	r3, [sl]
 8006098:	4499      	add	r9, r3
 800609a:	2200      	movs	r2, #0
 800609c:	2300      	movs	r3, #0
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 80060a6:	b108      	cbz	r0, 80060ac <__cvt+0xa4>
 80060a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80060ac:	2230      	movs	r2, #48	; 0x30
 80060ae:	9b03      	ldr	r3, [sp, #12]
 80060b0:	454b      	cmp	r3, r9
 80060b2:	d307      	bcc.n	80060c4 <__cvt+0xbc>
 80060b4:	9b03      	ldr	r3, [sp, #12]
 80060b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060b8:	1bdb      	subs	r3, r3, r7
 80060ba:	4638      	mov	r0, r7
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	b004      	add	sp, #16
 80060c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c4:	1c59      	adds	r1, r3, #1
 80060c6:	9103      	str	r1, [sp, #12]
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	e7f0      	b.n	80060ae <__cvt+0xa6>

080060cc <__exponent>:
 80060cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ce:	4603      	mov	r3, r0
 80060d0:	2900      	cmp	r1, #0
 80060d2:	bfb8      	it	lt
 80060d4:	4249      	neglt	r1, r1
 80060d6:	f803 2b02 	strb.w	r2, [r3], #2
 80060da:	bfb4      	ite	lt
 80060dc:	222d      	movlt	r2, #45	; 0x2d
 80060de:	222b      	movge	r2, #43	; 0x2b
 80060e0:	2909      	cmp	r1, #9
 80060e2:	7042      	strb	r2, [r0, #1]
 80060e4:	dd2a      	ble.n	800613c <__exponent+0x70>
 80060e6:	f10d 0407 	add.w	r4, sp, #7
 80060ea:	46a4      	mov	ip, r4
 80060ec:	270a      	movs	r7, #10
 80060ee:	46a6      	mov	lr, r4
 80060f0:	460a      	mov	r2, r1
 80060f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80060f6:	fb07 1516 	mls	r5, r7, r6, r1
 80060fa:	3530      	adds	r5, #48	; 0x30
 80060fc:	2a63      	cmp	r2, #99	; 0x63
 80060fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8006102:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006106:	4631      	mov	r1, r6
 8006108:	dcf1      	bgt.n	80060ee <__exponent+0x22>
 800610a:	3130      	adds	r1, #48	; 0x30
 800610c:	f1ae 0502 	sub.w	r5, lr, #2
 8006110:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006114:	1c44      	adds	r4, r0, #1
 8006116:	4629      	mov	r1, r5
 8006118:	4561      	cmp	r1, ip
 800611a:	d30a      	bcc.n	8006132 <__exponent+0x66>
 800611c:	f10d 0209 	add.w	r2, sp, #9
 8006120:	eba2 020e 	sub.w	r2, r2, lr
 8006124:	4565      	cmp	r5, ip
 8006126:	bf88      	it	hi
 8006128:	2200      	movhi	r2, #0
 800612a:	4413      	add	r3, r2
 800612c:	1a18      	subs	r0, r3, r0
 800612e:	b003      	add	sp, #12
 8006130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006136:	f804 2f01 	strb.w	r2, [r4, #1]!
 800613a:	e7ed      	b.n	8006118 <__exponent+0x4c>
 800613c:	2330      	movs	r3, #48	; 0x30
 800613e:	3130      	adds	r1, #48	; 0x30
 8006140:	7083      	strb	r3, [r0, #2]
 8006142:	70c1      	strb	r1, [r0, #3]
 8006144:	1d03      	adds	r3, r0, #4
 8006146:	e7f1      	b.n	800612c <__exponent+0x60>

08006148 <_printf_float>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	ed2d 8b02 	vpush	{d8}
 8006150:	b08d      	sub	sp, #52	; 0x34
 8006152:	460c      	mov	r4, r1
 8006154:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006158:	4616      	mov	r6, r2
 800615a:	461f      	mov	r7, r3
 800615c:	4605      	mov	r5, r0
 800615e:	f001 fa57 	bl	8007610 <_localeconv_r>
 8006162:	f8d0 a000 	ldr.w	sl, [r0]
 8006166:	4650      	mov	r0, sl
 8006168:	f7fa f83a 	bl	80001e0 <strlen>
 800616c:	2300      	movs	r3, #0
 800616e:	930a      	str	r3, [sp, #40]	; 0x28
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	f8d8 3000 	ldr.w	r3, [r8]
 8006178:	f894 b018 	ldrb.w	fp, [r4, #24]
 800617c:	3307      	adds	r3, #7
 800617e:	f023 0307 	bic.w	r3, r3, #7
 8006182:	f103 0208 	add.w	r2, r3, #8
 8006186:	f8c8 2000 	str.w	r2, [r8]
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006192:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006196:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800619a:	9307      	str	r3, [sp, #28]
 800619c:	f8cd 8018 	str.w	r8, [sp, #24]
 80061a0:	ee08 0a10 	vmov	s16, r0
 80061a4:	4b9f      	ldr	r3, [pc, #636]	; (8006424 <_printf_float+0x2dc>)
 80061a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061aa:	f04f 32ff 	mov.w	r2, #4294967295
 80061ae:	f7fa fcc5 	bl	8000b3c <__aeabi_dcmpun>
 80061b2:	bb88      	cbnz	r0, 8006218 <_printf_float+0xd0>
 80061b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061b8:	4b9a      	ldr	r3, [pc, #616]	; (8006424 <_printf_float+0x2dc>)
 80061ba:	f04f 32ff 	mov.w	r2, #4294967295
 80061be:	f7fa fc9f 	bl	8000b00 <__aeabi_dcmple>
 80061c2:	bb48      	cbnz	r0, 8006218 <_printf_float+0xd0>
 80061c4:	2200      	movs	r2, #0
 80061c6:	2300      	movs	r3, #0
 80061c8:	4640      	mov	r0, r8
 80061ca:	4649      	mov	r1, r9
 80061cc:	f7fa fc8e 	bl	8000aec <__aeabi_dcmplt>
 80061d0:	b110      	cbz	r0, 80061d8 <_printf_float+0x90>
 80061d2:	232d      	movs	r3, #45	; 0x2d
 80061d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d8:	4b93      	ldr	r3, [pc, #588]	; (8006428 <_printf_float+0x2e0>)
 80061da:	4894      	ldr	r0, [pc, #592]	; (800642c <_printf_float+0x2e4>)
 80061dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061e0:	bf94      	ite	ls
 80061e2:	4698      	movls	r8, r3
 80061e4:	4680      	movhi	r8, r0
 80061e6:	2303      	movs	r3, #3
 80061e8:	6123      	str	r3, [r4, #16]
 80061ea:	9b05      	ldr	r3, [sp, #20]
 80061ec:	f023 0204 	bic.w	r2, r3, #4
 80061f0:	6022      	str	r2, [r4, #0]
 80061f2:	f04f 0900 	mov.w	r9, #0
 80061f6:	9700      	str	r7, [sp, #0]
 80061f8:	4633      	mov	r3, r6
 80061fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80061fc:	4621      	mov	r1, r4
 80061fe:	4628      	mov	r0, r5
 8006200:	f000 f9d8 	bl	80065b4 <_printf_common>
 8006204:	3001      	adds	r0, #1
 8006206:	f040 8090 	bne.w	800632a <_printf_float+0x1e2>
 800620a:	f04f 30ff 	mov.w	r0, #4294967295
 800620e:	b00d      	add	sp, #52	; 0x34
 8006210:	ecbd 8b02 	vpop	{d8}
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006218:	4642      	mov	r2, r8
 800621a:	464b      	mov	r3, r9
 800621c:	4640      	mov	r0, r8
 800621e:	4649      	mov	r1, r9
 8006220:	f7fa fc8c 	bl	8000b3c <__aeabi_dcmpun>
 8006224:	b140      	cbz	r0, 8006238 <_printf_float+0xf0>
 8006226:	464b      	mov	r3, r9
 8006228:	2b00      	cmp	r3, #0
 800622a:	bfbc      	itt	lt
 800622c:	232d      	movlt	r3, #45	; 0x2d
 800622e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006232:	487f      	ldr	r0, [pc, #508]	; (8006430 <_printf_float+0x2e8>)
 8006234:	4b7f      	ldr	r3, [pc, #508]	; (8006434 <_printf_float+0x2ec>)
 8006236:	e7d1      	b.n	80061dc <_printf_float+0x94>
 8006238:	6863      	ldr	r3, [r4, #4]
 800623a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800623e:	9206      	str	r2, [sp, #24]
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	d13f      	bne.n	80062c4 <_printf_float+0x17c>
 8006244:	2306      	movs	r3, #6
 8006246:	6063      	str	r3, [r4, #4]
 8006248:	9b05      	ldr	r3, [sp, #20]
 800624a:	6861      	ldr	r1, [r4, #4]
 800624c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006250:	2300      	movs	r3, #0
 8006252:	9303      	str	r3, [sp, #12]
 8006254:	ab0a      	add	r3, sp, #40	; 0x28
 8006256:	e9cd b301 	strd	fp, r3, [sp, #4]
 800625a:	ab09      	add	r3, sp, #36	; 0x24
 800625c:	ec49 8b10 	vmov	d0, r8, r9
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	6022      	str	r2, [r4, #0]
 8006264:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006268:	4628      	mov	r0, r5
 800626a:	f7ff fecd 	bl	8006008 <__cvt>
 800626e:	9b06      	ldr	r3, [sp, #24]
 8006270:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006272:	2b47      	cmp	r3, #71	; 0x47
 8006274:	4680      	mov	r8, r0
 8006276:	d108      	bne.n	800628a <_printf_float+0x142>
 8006278:	1cc8      	adds	r0, r1, #3
 800627a:	db02      	blt.n	8006282 <_printf_float+0x13a>
 800627c:	6863      	ldr	r3, [r4, #4]
 800627e:	4299      	cmp	r1, r3
 8006280:	dd41      	ble.n	8006306 <_printf_float+0x1be>
 8006282:	f1ab 0b02 	sub.w	fp, fp, #2
 8006286:	fa5f fb8b 	uxtb.w	fp, fp
 800628a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800628e:	d820      	bhi.n	80062d2 <_printf_float+0x18a>
 8006290:	3901      	subs	r1, #1
 8006292:	465a      	mov	r2, fp
 8006294:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006298:	9109      	str	r1, [sp, #36]	; 0x24
 800629a:	f7ff ff17 	bl	80060cc <__exponent>
 800629e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062a0:	1813      	adds	r3, r2, r0
 80062a2:	2a01      	cmp	r2, #1
 80062a4:	4681      	mov	r9, r0
 80062a6:	6123      	str	r3, [r4, #16]
 80062a8:	dc02      	bgt.n	80062b0 <_printf_float+0x168>
 80062aa:	6822      	ldr	r2, [r4, #0]
 80062ac:	07d2      	lsls	r2, r2, #31
 80062ae:	d501      	bpl.n	80062b4 <_printf_float+0x16c>
 80062b0:	3301      	adds	r3, #1
 80062b2:	6123      	str	r3, [r4, #16]
 80062b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d09c      	beq.n	80061f6 <_printf_float+0xae>
 80062bc:	232d      	movs	r3, #45	; 0x2d
 80062be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c2:	e798      	b.n	80061f6 <_printf_float+0xae>
 80062c4:	9a06      	ldr	r2, [sp, #24]
 80062c6:	2a47      	cmp	r2, #71	; 0x47
 80062c8:	d1be      	bne.n	8006248 <_printf_float+0x100>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1bc      	bne.n	8006248 <_printf_float+0x100>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e7b9      	b.n	8006246 <_printf_float+0xfe>
 80062d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80062d6:	d118      	bne.n	800630a <_printf_float+0x1c2>
 80062d8:	2900      	cmp	r1, #0
 80062da:	6863      	ldr	r3, [r4, #4]
 80062dc:	dd0b      	ble.n	80062f6 <_printf_float+0x1ae>
 80062de:	6121      	str	r1, [r4, #16]
 80062e0:	b913      	cbnz	r3, 80062e8 <_printf_float+0x1a0>
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	07d0      	lsls	r0, r2, #31
 80062e6:	d502      	bpl.n	80062ee <_printf_float+0x1a6>
 80062e8:	3301      	adds	r3, #1
 80062ea:	440b      	add	r3, r1
 80062ec:	6123      	str	r3, [r4, #16]
 80062ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80062f0:	f04f 0900 	mov.w	r9, #0
 80062f4:	e7de      	b.n	80062b4 <_printf_float+0x16c>
 80062f6:	b913      	cbnz	r3, 80062fe <_printf_float+0x1b6>
 80062f8:	6822      	ldr	r2, [r4, #0]
 80062fa:	07d2      	lsls	r2, r2, #31
 80062fc:	d501      	bpl.n	8006302 <_printf_float+0x1ba>
 80062fe:	3302      	adds	r3, #2
 8006300:	e7f4      	b.n	80062ec <_printf_float+0x1a4>
 8006302:	2301      	movs	r3, #1
 8006304:	e7f2      	b.n	80062ec <_printf_float+0x1a4>
 8006306:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800630a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630c:	4299      	cmp	r1, r3
 800630e:	db05      	blt.n	800631c <_printf_float+0x1d4>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	6121      	str	r1, [r4, #16]
 8006314:	07d8      	lsls	r0, r3, #31
 8006316:	d5ea      	bpl.n	80062ee <_printf_float+0x1a6>
 8006318:	1c4b      	adds	r3, r1, #1
 800631a:	e7e7      	b.n	80062ec <_printf_float+0x1a4>
 800631c:	2900      	cmp	r1, #0
 800631e:	bfd4      	ite	le
 8006320:	f1c1 0202 	rsble	r2, r1, #2
 8006324:	2201      	movgt	r2, #1
 8006326:	4413      	add	r3, r2
 8006328:	e7e0      	b.n	80062ec <_printf_float+0x1a4>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	055a      	lsls	r2, r3, #21
 800632e:	d407      	bmi.n	8006340 <_printf_float+0x1f8>
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	4642      	mov	r2, r8
 8006334:	4631      	mov	r1, r6
 8006336:	4628      	mov	r0, r5
 8006338:	47b8      	blx	r7
 800633a:	3001      	adds	r0, #1
 800633c:	d12c      	bne.n	8006398 <_printf_float+0x250>
 800633e:	e764      	b.n	800620a <_printf_float+0xc2>
 8006340:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006344:	f240 80e0 	bls.w	8006508 <_printf_float+0x3c0>
 8006348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800634c:	2200      	movs	r2, #0
 800634e:	2300      	movs	r3, #0
 8006350:	f7fa fbc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006354:	2800      	cmp	r0, #0
 8006356:	d034      	beq.n	80063c2 <_printf_float+0x27a>
 8006358:	4a37      	ldr	r2, [pc, #220]	; (8006438 <_printf_float+0x2f0>)
 800635a:	2301      	movs	r3, #1
 800635c:	4631      	mov	r1, r6
 800635e:	4628      	mov	r0, r5
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	f43f af51 	beq.w	800620a <_printf_float+0xc2>
 8006368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800636c:	429a      	cmp	r2, r3
 800636e:	db02      	blt.n	8006376 <_printf_float+0x22e>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	07d8      	lsls	r0, r3, #31
 8006374:	d510      	bpl.n	8006398 <_printf_float+0x250>
 8006376:	ee18 3a10 	vmov	r3, s16
 800637a:	4652      	mov	r2, sl
 800637c:	4631      	mov	r1, r6
 800637e:	4628      	mov	r0, r5
 8006380:	47b8      	blx	r7
 8006382:	3001      	adds	r0, #1
 8006384:	f43f af41 	beq.w	800620a <_printf_float+0xc2>
 8006388:	f04f 0800 	mov.w	r8, #0
 800638c:	f104 091a 	add.w	r9, r4, #26
 8006390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006392:	3b01      	subs	r3, #1
 8006394:	4543      	cmp	r3, r8
 8006396:	dc09      	bgt.n	80063ac <_printf_float+0x264>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	079b      	lsls	r3, r3, #30
 800639c:	f100 8105 	bmi.w	80065aa <_printf_float+0x462>
 80063a0:	68e0      	ldr	r0, [r4, #12]
 80063a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063a4:	4298      	cmp	r0, r3
 80063a6:	bfb8      	it	lt
 80063a8:	4618      	movlt	r0, r3
 80063aa:	e730      	b.n	800620e <_printf_float+0xc6>
 80063ac:	2301      	movs	r3, #1
 80063ae:	464a      	mov	r2, r9
 80063b0:	4631      	mov	r1, r6
 80063b2:	4628      	mov	r0, r5
 80063b4:	47b8      	blx	r7
 80063b6:	3001      	adds	r0, #1
 80063b8:	f43f af27 	beq.w	800620a <_printf_float+0xc2>
 80063bc:	f108 0801 	add.w	r8, r8, #1
 80063c0:	e7e6      	b.n	8006390 <_printf_float+0x248>
 80063c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	dc39      	bgt.n	800643c <_printf_float+0x2f4>
 80063c8:	4a1b      	ldr	r2, [pc, #108]	; (8006438 <_printf_float+0x2f0>)
 80063ca:	2301      	movs	r3, #1
 80063cc:	4631      	mov	r1, r6
 80063ce:	4628      	mov	r0, r5
 80063d0:	47b8      	blx	r7
 80063d2:	3001      	adds	r0, #1
 80063d4:	f43f af19 	beq.w	800620a <_printf_float+0xc2>
 80063d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063dc:	4313      	orrs	r3, r2
 80063de:	d102      	bne.n	80063e6 <_printf_float+0x29e>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	07d9      	lsls	r1, r3, #31
 80063e4:	d5d8      	bpl.n	8006398 <_printf_float+0x250>
 80063e6:	ee18 3a10 	vmov	r3, s16
 80063ea:	4652      	mov	r2, sl
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	f43f af09 	beq.w	800620a <_printf_float+0xc2>
 80063f8:	f04f 0900 	mov.w	r9, #0
 80063fc:	f104 0a1a 	add.w	sl, r4, #26
 8006400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006402:	425b      	negs	r3, r3
 8006404:	454b      	cmp	r3, r9
 8006406:	dc01      	bgt.n	800640c <_printf_float+0x2c4>
 8006408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800640a:	e792      	b.n	8006332 <_printf_float+0x1ea>
 800640c:	2301      	movs	r3, #1
 800640e:	4652      	mov	r2, sl
 8006410:	4631      	mov	r1, r6
 8006412:	4628      	mov	r0, r5
 8006414:	47b8      	blx	r7
 8006416:	3001      	adds	r0, #1
 8006418:	f43f aef7 	beq.w	800620a <_printf_float+0xc2>
 800641c:	f109 0901 	add.w	r9, r9, #1
 8006420:	e7ee      	b.n	8006400 <_printf_float+0x2b8>
 8006422:	bf00      	nop
 8006424:	7fefffff 	.word	0x7fefffff
 8006428:	08009958 	.word	0x08009958
 800642c:	0800995c 	.word	0x0800995c
 8006430:	08009964 	.word	0x08009964
 8006434:	08009960 	.word	0x08009960
 8006438:	08009968 	.word	0x08009968
 800643c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800643e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006440:	429a      	cmp	r2, r3
 8006442:	bfa8      	it	ge
 8006444:	461a      	movge	r2, r3
 8006446:	2a00      	cmp	r2, #0
 8006448:	4691      	mov	r9, r2
 800644a:	dc37      	bgt.n	80064bc <_printf_float+0x374>
 800644c:	f04f 0b00 	mov.w	fp, #0
 8006450:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006454:	f104 021a 	add.w	r2, r4, #26
 8006458:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800645a:	9305      	str	r3, [sp, #20]
 800645c:	eba3 0309 	sub.w	r3, r3, r9
 8006460:	455b      	cmp	r3, fp
 8006462:	dc33      	bgt.n	80064cc <_printf_float+0x384>
 8006464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006468:	429a      	cmp	r2, r3
 800646a:	db3b      	blt.n	80064e4 <_printf_float+0x39c>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	07da      	lsls	r2, r3, #31
 8006470:	d438      	bmi.n	80064e4 <_printf_float+0x39c>
 8006472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006474:	9b05      	ldr	r3, [sp, #20]
 8006476:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	eba2 0901 	sub.w	r9, r2, r1
 800647e:	4599      	cmp	r9, r3
 8006480:	bfa8      	it	ge
 8006482:	4699      	movge	r9, r3
 8006484:	f1b9 0f00 	cmp.w	r9, #0
 8006488:	dc35      	bgt.n	80064f6 <_printf_float+0x3ae>
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006492:	f104 0a1a 	add.w	sl, r4, #26
 8006496:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	eba3 0309 	sub.w	r3, r3, r9
 80064a0:	4543      	cmp	r3, r8
 80064a2:	f77f af79 	ble.w	8006398 <_printf_float+0x250>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4652      	mov	r2, sl
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f aeaa 	beq.w	800620a <_printf_float+0xc2>
 80064b6:	f108 0801 	add.w	r8, r8, #1
 80064ba:	e7ec      	b.n	8006496 <_printf_float+0x34e>
 80064bc:	4613      	mov	r3, r2
 80064be:	4631      	mov	r1, r6
 80064c0:	4642      	mov	r2, r8
 80064c2:	4628      	mov	r0, r5
 80064c4:	47b8      	blx	r7
 80064c6:	3001      	adds	r0, #1
 80064c8:	d1c0      	bne.n	800644c <_printf_float+0x304>
 80064ca:	e69e      	b.n	800620a <_printf_float+0xc2>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4631      	mov	r1, r6
 80064d0:	4628      	mov	r0, r5
 80064d2:	9205      	str	r2, [sp, #20]
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	f43f ae97 	beq.w	800620a <_printf_float+0xc2>
 80064dc:	9a05      	ldr	r2, [sp, #20]
 80064de:	f10b 0b01 	add.w	fp, fp, #1
 80064e2:	e7b9      	b.n	8006458 <_printf_float+0x310>
 80064e4:	ee18 3a10 	vmov	r3, s16
 80064e8:	4652      	mov	r2, sl
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	d1be      	bne.n	8006472 <_printf_float+0x32a>
 80064f4:	e689      	b.n	800620a <_printf_float+0xc2>
 80064f6:	9a05      	ldr	r2, [sp, #20]
 80064f8:	464b      	mov	r3, r9
 80064fa:	4442      	add	r2, r8
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	d1c1      	bne.n	800648a <_printf_float+0x342>
 8006506:	e680      	b.n	800620a <_printf_float+0xc2>
 8006508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800650a:	2a01      	cmp	r2, #1
 800650c:	dc01      	bgt.n	8006512 <_printf_float+0x3ca>
 800650e:	07db      	lsls	r3, r3, #31
 8006510:	d538      	bpl.n	8006584 <_printf_float+0x43c>
 8006512:	2301      	movs	r3, #1
 8006514:	4642      	mov	r2, r8
 8006516:	4631      	mov	r1, r6
 8006518:	4628      	mov	r0, r5
 800651a:	47b8      	blx	r7
 800651c:	3001      	adds	r0, #1
 800651e:	f43f ae74 	beq.w	800620a <_printf_float+0xc2>
 8006522:	ee18 3a10 	vmov	r3, s16
 8006526:	4652      	mov	r2, sl
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	47b8      	blx	r7
 800652e:	3001      	adds	r0, #1
 8006530:	f43f ae6b 	beq.w	800620a <_printf_float+0xc2>
 8006534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006538:	2200      	movs	r2, #0
 800653a:	2300      	movs	r3, #0
 800653c:	f7fa facc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006540:	b9d8      	cbnz	r0, 800657a <_printf_float+0x432>
 8006542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006544:	f108 0201 	add.w	r2, r8, #1
 8006548:	3b01      	subs	r3, #1
 800654a:	4631      	mov	r1, r6
 800654c:	4628      	mov	r0, r5
 800654e:	47b8      	blx	r7
 8006550:	3001      	adds	r0, #1
 8006552:	d10e      	bne.n	8006572 <_printf_float+0x42a>
 8006554:	e659      	b.n	800620a <_printf_float+0xc2>
 8006556:	2301      	movs	r3, #1
 8006558:	4652      	mov	r2, sl
 800655a:	4631      	mov	r1, r6
 800655c:	4628      	mov	r0, r5
 800655e:	47b8      	blx	r7
 8006560:	3001      	adds	r0, #1
 8006562:	f43f ae52 	beq.w	800620a <_printf_float+0xc2>
 8006566:	f108 0801 	add.w	r8, r8, #1
 800656a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800656c:	3b01      	subs	r3, #1
 800656e:	4543      	cmp	r3, r8
 8006570:	dcf1      	bgt.n	8006556 <_printf_float+0x40e>
 8006572:	464b      	mov	r3, r9
 8006574:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006578:	e6dc      	b.n	8006334 <_printf_float+0x1ec>
 800657a:	f04f 0800 	mov.w	r8, #0
 800657e:	f104 0a1a 	add.w	sl, r4, #26
 8006582:	e7f2      	b.n	800656a <_printf_float+0x422>
 8006584:	2301      	movs	r3, #1
 8006586:	4642      	mov	r2, r8
 8006588:	e7df      	b.n	800654a <_printf_float+0x402>
 800658a:	2301      	movs	r3, #1
 800658c:	464a      	mov	r2, r9
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	f43f ae38 	beq.w	800620a <_printf_float+0xc2>
 800659a:	f108 0801 	add.w	r8, r8, #1
 800659e:	68e3      	ldr	r3, [r4, #12]
 80065a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065a2:	1a5b      	subs	r3, r3, r1
 80065a4:	4543      	cmp	r3, r8
 80065a6:	dcf0      	bgt.n	800658a <_printf_float+0x442>
 80065a8:	e6fa      	b.n	80063a0 <_printf_float+0x258>
 80065aa:	f04f 0800 	mov.w	r8, #0
 80065ae:	f104 0919 	add.w	r9, r4, #25
 80065b2:	e7f4      	b.n	800659e <_printf_float+0x456>

080065b4 <_printf_common>:
 80065b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	4616      	mov	r6, r2
 80065ba:	4699      	mov	r9, r3
 80065bc:	688a      	ldr	r2, [r1, #8]
 80065be:	690b      	ldr	r3, [r1, #16]
 80065c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	bfb8      	it	lt
 80065c8:	4613      	movlt	r3, r2
 80065ca:	6033      	str	r3, [r6, #0]
 80065cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065d0:	4607      	mov	r7, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	b10a      	cbz	r2, 80065da <_printf_common+0x26>
 80065d6:	3301      	adds	r3, #1
 80065d8:	6033      	str	r3, [r6, #0]
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	0699      	lsls	r1, r3, #26
 80065de:	bf42      	ittt	mi
 80065e0:	6833      	ldrmi	r3, [r6, #0]
 80065e2:	3302      	addmi	r3, #2
 80065e4:	6033      	strmi	r3, [r6, #0]
 80065e6:	6825      	ldr	r5, [r4, #0]
 80065e8:	f015 0506 	ands.w	r5, r5, #6
 80065ec:	d106      	bne.n	80065fc <_printf_common+0x48>
 80065ee:	f104 0a19 	add.w	sl, r4, #25
 80065f2:	68e3      	ldr	r3, [r4, #12]
 80065f4:	6832      	ldr	r2, [r6, #0]
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	42ab      	cmp	r3, r5
 80065fa:	dc26      	bgt.n	800664a <_printf_common+0x96>
 80065fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006600:	1e13      	subs	r3, r2, #0
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	bf18      	it	ne
 8006606:	2301      	movne	r3, #1
 8006608:	0692      	lsls	r2, r2, #26
 800660a:	d42b      	bmi.n	8006664 <_printf_common+0xb0>
 800660c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006610:	4649      	mov	r1, r9
 8006612:	4638      	mov	r0, r7
 8006614:	47c0      	blx	r8
 8006616:	3001      	adds	r0, #1
 8006618:	d01e      	beq.n	8006658 <_printf_common+0xa4>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	68e5      	ldr	r5, [r4, #12]
 800661e:	6832      	ldr	r2, [r6, #0]
 8006620:	f003 0306 	and.w	r3, r3, #6
 8006624:	2b04      	cmp	r3, #4
 8006626:	bf08      	it	eq
 8006628:	1aad      	subeq	r5, r5, r2
 800662a:	68a3      	ldr	r3, [r4, #8]
 800662c:	6922      	ldr	r2, [r4, #16]
 800662e:	bf0c      	ite	eq
 8006630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006634:	2500      	movne	r5, #0
 8006636:	4293      	cmp	r3, r2
 8006638:	bfc4      	itt	gt
 800663a:	1a9b      	subgt	r3, r3, r2
 800663c:	18ed      	addgt	r5, r5, r3
 800663e:	2600      	movs	r6, #0
 8006640:	341a      	adds	r4, #26
 8006642:	42b5      	cmp	r5, r6
 8006644:	d11a      	bne.n	800667c <_printf_common+0xc8>
 8006646:	2000      	movs	r0, #0
 8006648:	e008      	b.n	800665c <_printf_common+0xa8>
 800664a:	2301      	movs	r3, #1
 800664c:	4652      	mov	r2, sl
 800664e:	4649      	mov	r1, r9
 8006650:	4638      	mov	r0, r7
 8006652:	47c0      	blx	r8
 8006654:	3001      	adds	r0, #1
 8006656:	d103      	bne.n	8006660 <_printf_common+0xac>
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006660:	3501      	adds	r5, #1
 8006662:	e7c6      	b.n	80065f2 <_printf_common+0x3e>
 8006664:	18e1      	adds	r1, r4, r3
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	2030      	movs	r0, #48	; 0x30
 800666a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800666e:	4422      	add	r2, r4
 8006670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006678:	3302      	adds	r3, #2
 800667a:	e7c7      	b.n	800660c <_printf_common+0x58>
 800667c:	2301      	movs	r3, #1
 800667e:	4622      	mov	r2, r4
 8006680:	4649      	mov	r1, r9
 8006682:	4638      	mov	r0, r7
 8006684:	47c0      	blx	r8
 8006686:	3001      	adds	r0, #1
 8006688:	d0e6      	beq.n	8006658 <_printf_common+0xa4>
 800668a:	3601      	adds	r6, #1
 800668c:	e7d9      	b.n	8006642 <_printf_common+0x8e>
	...

08006690 <_printf_i>:
 8006690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	460c      	mov	r4, r1
 8006696:	4691      	mov	r9, r2
 8006698:	7e27      	ldrb	r7, [r4, #24]
 800669a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800669c:	2f78      	cmp	r7, #120	; 0x78
 800669e:	4680      	mov	r8, r0
 80066a0:	469a      	mov	sl, r3
 80066a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066a6:	d807      	bhi.n	80066b8 <_printf_i+0x28>
 80066a8:	2f62      	cmp	r7, #98	; 0x62
 80066aa:	d80a      	bhi.n	80066c2 <_printf_i+0x32>
 80066ac:	2f00      	cmp	r7, #0
 80066ae:	f000 80d8 	beq.w	8006862 <_printf_i+0x1d2>
 80066b2:	2f58      	cmp	r7, #88	; 0x58
 80066b4:	f000 80a3 	beq.w	80067fe <_printf_i+0x16e>
 80066b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80066bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066c0:	e03a      	b.n	8006738 <_printf_i+0xa8>
 80066c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066c6:	2b15      	cmp	r3, #21
 80066c8:	d8f6      	bhi.n	80066b8 <_printf_i+0x28>
 80066ca:	a001      	add	r0, pc, #4	; (adr r0, 80066d0 <_printf_i+0x40>)
 80066cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80066d0:	08006729 	.word	0x08006729
 80066d4:	0800673d 	.word	0x0800673d
 80066d8:	080066b9 	.word	0x080066b9
 80066dc:	080066b9 	.word	0x080066b9
 80066e0:	080066b9 	.word	0x080066b9
 80066e4:	080066b9 	.word	0x080066b9
 80066e8:	0800673d 	.word	0x0800673d
 80066ec:	080066b9 	.word	0x080066b9
 80066f0:	080066b9 	.word	0x080066b9
 80066f4:	080066b9 	.word	0x080066b9
 80066f8:	080066b9 	.word	0x080066b9
 80066fc:	08006849 	.word	0x08006849
 8006700:	0800676d 	.word	0x0800676d
 8006704:	0800682b 	.word	0x0800682b
 8006708:	080066b9 	.word	0x080066b9
 800670c:	080066b9 	.word	0x080066b9
 8006710:	0800686b 	.word	0x0800686b
 8006714:	080066b9 	.word	0x080066b9
 8006718:	0800676d 	.word	0x0800676d
 800671c:	080066b9 	.word	0x080066b9
 8006720:	080066b9 	.word	0x080066b9
 8006724:	08006833 	.word	0x08006833
 8006728:	680b      	ldr	r3, [r1, #0]
 800672a:	1d1a      	adds	r2, r3, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	600a      	str	r2, [r1, #0]
 8006730:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006738:	2301      	movs	r3, #1
 800673a:	e0a3      	b.n	8006884 <_printf_i+0x1f4>
 800673c:	6825      	ldr	r5, [r4, #0]
 800673e:	6808      	ldr	r0, [r1, #0]
 8006740:	062e      	lsls	r6, r5, #24
 8006742:	f100 0304 	add.w	r3, r0, #4
 8006746:	d50a      	bpl.n	800675e <_printf_i+0xce>
 8006748:	6805      	ldr	r5, [r0, #0]
 800674a:	600b      	str	r3, [r1, #0]
 800674c:	2d00      	cmp	r5, #0
 800674e:	da03      	bge.n	8006758 <_printf_i+0xc8>
 8006750:	232d      	movs	r3, #45	; 0x2d
 8006752:	426d      	negs	r5, r5
 8006754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006758:	485e      	ldr	r0, [pc, #376]	; (80068d4 <_printf_i+0x244>)
 800675a:	230a      	movs	r3, #10
 800675c:	e019      	b.n	8006792 <_printf_i+0x102>
 800675e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006762:	6805      	ldr	r5, [r0, #0]
 8006764:	600b      	str	r3, [r1, #0]
 8006766:	bf18      	it	ne
 8006768:	b22d      	sxthne	r5, r5
 800676a:	e7ef      	b.n	800674c <_printf_i+0xbc>
 800676c:	680b      	ldr	r3, [r1, #0]
 800676e:	6825      	ldr	r5, [r4, #0]
 8006770:	1d18      	adds	r0, r3, #4
 8006772:	6008      	str	r0, [r1, #0]
 8006774:	0628      	lsls	r0, r5, #24
 8006776:	d501      	bpl.n	800677c <_printf_i+0xec>
 8006778:	681d      	ldr	r5, [r3, #0]
 800677a:	e002      	b.n	8006782 <_printf_i+0xf2>
 800677c:	0669      	lsls	r1, r5, #25
 800677e:	d5fb      	bpl.n	8006778 <_printf_i+0xe8>
 8006780:	881d      	ldrh	r5, [r3, #0]
 8006782:	4854      	ldr	r0, [pc, #336]	; (80068d4 <_printf_i+0x244>)
 8006784:	2f6f      	cmp	r7, #111	; 0x6f
 8006786:	bf0c      	ite	eq
 8006788:	2308      	moveq	r3, #8
 800678a:	230a      	movne	r3, #10
 800678c:	2100      	movs	r1, #0
 800678e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006792:	6866      	ldr	r6, [r4, #4]
 8006794:	60a6      	str	r6, [r4, #8]
 8006796:	2e00      	cmp	r6, #0
 8006798:	bfa2      	ittt	ge
 800679a:	6821      	ldrge	r1, [r4, #0]
 800679c:	f021 0104 	bicge.w	r1, r1, #4
 80067a0:	6021      	strge	r1, [r4, #0]
 80067a2:	b90d      	cbnz	r5, 80067a8 <_printf_i+0x118>
 80067a4:	2e00      	cmp	r6, #0
 80067a6:	d04d      	beq.n	8006844 <_printf_i+0x1b4>
 80067a8:	4616      	mov	r6, r2
 80067aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80067ae:	fb03 5711 	mls	r7, r3, r1, r5
 80067b2:	5dc7      	ldrb	r7, [r0, r7]
 80067b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067b8:	462f      	mov	r7, r5
 80067ba:	42bb      	cmp	r3, r7
 80067bc:	460d      	mov	r5, r1
 80067be:	d9f4      	bls.n	80067aa <_printf_i+0x11a>
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d10b      	bne.n	80067dc <_printf_i+0x14c>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	07df      	lsls	r7, r3, #31
 80067c8:	d508      	bpl.n	80067dc <_printf_i+0x14c>
 80067ca:	6923      	ldr	r3, [r4, #16]
 80067cc:	6861      	ldr	r1, [r4, #4]
 80067ce:	4299      	cmp	r1, r3
 80067d0:	bfde      	ittt	le
 80067d2:	2330      	movle	r3, #48	; 0x30
 80067d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067dc:	1b92      	subs	r2, r2, r6
 80067de:	6122      	str	r2, [r4, #16]
 80067e0:	f8cd a000 	str.w	sl, [sp]
 80067e4:	464b      	mov	r3, r9
 80067e6:	aa03      	add	r2, sp, #12
 80067e8:	4621      	mov	r1, r4
 80067ea:	4640      	mov	r0, r8
 80067ec:	f7ff fee2 	bl	80065b4 <_printf_common>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d14c      	bne.n	800688e <_printf_i+0x1fe>
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295
 80067f8:	b004      	add	sp, #16
 80067fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fe:	4835      	ldr	r0, [pc, #212]	; (80068d4 <_printf_i+0x244>)
 8006800:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	680e      	ldr	r6, [r1, #0]
 8006808:	061f      	lsls	r7, r3, #24
 800680a:	f856 5b04 	ldr.w	r5, [r6], #4
 800680e:	600e      	str	r6, [r1, #0]
 8006810:	d514      	bpl.n	800683c <_printf_i+0x1ac>
 8006812:	07d9      	lsls	r1, r3, #31
 8006814:	bf44      	itt	mi
 8006816:	f043 0320 	orrmi.w	r3, r3, #32
 800681a:	6023      	strmi	r3, [r4, #0]
 800681c:	b91d      	cbnz	r5, 8006826 <_printf_i+0x196>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	f023 0320 	bic.w	r3, r3, #32
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	2310      	movs	r3, #16
 8006828:	e7b0      	b.n	800678c <_printf_i+0xfc>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	f043 0320 	orr.w	r3, r3, #32
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	2378      	movs	r3, #120	; 0x78
 8006834:	4828      	ldr	r0, [pc, #160]	; (80068d8 <_printf_i+0x248>)
 8006836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800683a:	e7e3      	b.n	8006804 <_printf_i+0x174>
 800683c:	065e      	lsls	r6, r3, #25
 800683e:	bf48      	it	mi
 8006840:	b2ad      	uxthmi	r5, r5
 8006842:	e7e6      	b.n	8006812 <_printf_i+0x182>
 8006844:	4616      	mov	r6, r2
 8006846:	e7bb      	b.n	80067c0 <_printf_i+0x130>
 8006848:	680b      	ldr	r3, [r1, #0]
 800684a:	6826      	ldr	r6, [r4, #0]
 800684c:	6960      	ldr	r0, [r4, #20]
 800684e:	1d1d      	adds	r5, r3, #4
 8006850:	600d      	str	r5, [r1, #0]
 8006852:	0635      	lsls	r5, r6, #24
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	d501      	bpl.n	800685c <_printf_i+0x1cc>
 8006858:	6018      	str	r0, [r3, #0]
 800685a:	e002      	b.n	8006862 <_printf_i+0x1d2>
 800685c:	0671      	lsls	r1, r6, #25
 800685e:	d5fb      	bpl.n	8006858 <_printf_i+0x1c8>
 8006860:	8018      	strh	r0, [r3, #0]
 8006862:	2300      	movs	r3, #0
 8006864:	6123      	str	r3, [r4, #16]
 8006866:	4616      	mov	r6, r2
 8006868:	e7ba      	b.n	80067e0 <_printf_i+0x150>
 800686a:	680b      	ldr	r3, [r1, #0]
 800686c:	1d1a      	adds	r2, r3, #4
 800686e:	600a      	str	r2, [r1, #0]
 8006870:	681e      	ldr	r6, [r3, #0]
 8006872:	6862      	ldr	r2, [r4, #4]
 8006874:	2100      	movs	r1, #0
 8006876:	4630      	mov	r0, r6
 8006878:	f7f9 fcba 	bl	80001f0 <memchr>
 800687c:	b108      	cbz	r0, 8006882 <_printf_i+0x1f2>
 800687e:	1b80      	subs	r0, r0, r6
 8006880:	6060      	str	r0, [r4, #4]
 8006882:	6863      	ldr	r3, [r4, #4]
 8006884:	6123      	str	r3, [r4, #16]
 8006886:	2300      	movs	r3, #0
 8006888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800688c:	e7a8      	b.n	80067e0 <_printf_i+0x150>
 800688e:	6923      	ldr	r3, [r4, #16]
 8006890:	4632      	mov	r2, r6
 8006892:	4649      	mov	r1, r9
 8006894:	4640      	mov	r0, r8
 8006896:	47d0      	blx	sl
 8006898:	3001      	adds	r0, #1
 800689a:	d0ab      	beq.n	80067f4 <_printf_i+0x164>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	079b      	lsls	r3, r3, #30
 80068a0:	d413      	bmi.n	80068ca <_printf_i+0x23a>
 80068a2:	68e0      	ldr	r0, [r4, #12]
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	4298      	cmp	r0, r3
 80068a8:	bfb8      	it	lt
 80068aa:	4618      	movlt	r0, r3
 80068ac:	e7a4      	b.n	80067f8 <_printf_i+0x168>
 80068ae:	2301      	movs	r3, #1
 80068b0:	4632      	mov	r2, r6
 80068b2:	4649      	mov	r1, r9
 80068b4:	4640      	mov	r0, r8
 80068b6:	47d0      	blx	sl
 80068b8:	3001      	adds	r0, #1
 80068ba:	d09b      	beq.n	80067f4 <_printf_i+0x164>
 80068bc:	3501      	adds	r5, #1
 80068be:	68e3      	ldr	r3, [r4, #12]
 80068c0:	9903      	ldr	r1, [sp, #12]
 80068c2:	1a5b      	subs	r3, r3, r1
 80068c4:	42ab      	cmp	r3, r5
 80068c6:	dcf2      	bgt.n	80068ae <_printf_i+0x21e>
 80068c8:	e7eb      	b.n	80068a2 <_printf_i+0x212>
 80068ca:	2500      	movs	r5, #0
 80068cc:	f104 0619 	add.w	r6, r4, #25
 80068d0:	e7f5      	b.n	80068be <_printf_i+0x22e>
 80068d2:	bf00      	nop
 80068d4:	0800996a 	.word	0x0800996a
 80068d8:	0800997b 	.word	0x0800997b

080068dc <siprintf>:
 80068dc:	b40e      	push	{r1, r2, r3}
 80068de:	b500      	push	{lr}
 80068e0:	b09c      	sub	sp, #112	; 0x70
 80068e2:	ab1d      	add	r3, sp, #116	; 0x74
 80068e4:	9002      	str	r0, [sp, #8]
 80068e6:	9006      	str	r0, [sp, #24]
 80068e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80068ec:	4809      	ldr	r0, [pc, #36]	; (8006914 <siprintf+0x38>)
 80068ee:	9107      	str	r1, [sp, #28]
 80068f0:	9104      	str	r1, [sp, #16]
 80068f2:	4909      	ldr	r1, [pc, #36]	; (8006918 <siprintf+0x3c>)
 80068f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f8:	9105      	str	r1, [sp, #20]
 80068fa:	6800      	ldr	r0, [r0, #0]
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	a902      	add	r1, sp, #8
 8006900:	f001 fb26 	bl	8007f50 <_svfiprintf_r>
 8006904:	9b02      	ldr	r3, [sp, #8]
 8006906:	2200      	movs	r2, #0
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	b01c      	add	sp, #112	; 0x70
 800690c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006910:	b003      	add	sp, #12
 8006912:	4770      	bx	lr
 8006914:	20000014 	.word	0x20000014
 8006918:	ffff0208 	.word	0xffff0208

0800691c <quorem>:
 800691c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006920:	6903      	ldr	r3, [r0, #16]
 8006922:	690c      	ldr	r4, [r1, #16]
 8006924:	42a3      	cmp	r3, r4
 8006926:	4607      	mov	r7, r0
 8006928:	f2c0 8081 	blt.w	8006a2e <quorem+0x112>
 800692c:	3c01      	subs	r4, #1
 800692e:	f101 0814 	add.w	r8, r1, #20
 8006932:	f100 0514 	add.w	r5, r0, #20
 8006936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006944:	3301      	adds	r3, #1
 8006946:	429a      	cmp	r2, r3
 8006948:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800694c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006950:	fbb2 f6f3 	udiv	r6, r2, r3
 8006954:	d331      	bcc.n	80069ba <quorem+0x9e>
 8006956:	f04f 0e00 	mov.w	lr, #0
 800695a:	4640      	mov	r0, r8
 800695c:	46ac      	mov	ip, r5
 800695e:	46f2      	mov	sl, lr
 8006960:	f850 2b04 	ldr.w	r2, [r0], #4
 8006964:	b293      	uxth	r3, r2
 8006966:	fb06 e303 	mla	r3, r6, r3, lr
 800696a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800696e:	b29b      	uxth	r3, r3
 8006970:	ebaa 0303 	sub.w	r3, sl, r3
 8006974:	0c12      	lsrs	r2, r2, #16
 8006976:	f8dc a000 	ldr.w	sl, [ip]
 800697a:	fb06 e202 	mla	r2, r6, r2, lr
 800697e:	fa13 f38a 	uxtah	r3, r3, sl
 8006982:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006986:	fa1f fa82 	uxth.w	sl, r2
 800698a:	f8dc 2000 	ldr.w	r2, [ip]
 800698e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006992:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006996:	b29b      	uxth	r3, r3
 8006998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800699c:	4581      	cmp	r9, r0
 800699e:	f84c 3b04 	str.w	r3, [ip], #4
 80069a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069a6:	d2db      	bcs.n	8006960 <quorem+0x44>
 80069a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80069ac:	b92b      	cbnz	r3, 80069ba <quorem+0x9e>
 80069ae:	9b01      	ldr	r3, [sp, #4]
 80069b0:	3b04      	subs	r3, #4
 80069b2:	429d      	cmp	r5, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	d32e      	bcc.n	8006a16 <quorem+0xfa>
 80069b8:	613c      	str	r4, [r7, #16]
 80069ba:	4638      	mov	r0, r7
 80069bc:	f001 f8b2 	bl	8007b24 <__mcmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	db24      	blt.n	8006a0e <quorem+0xf2>
 80069c4:	3601      	adds	r6, #1
 80069c6:	4628      	mov	r0, r5
 80069c8:	f04f 0c00 	mov.w	ip, #0
 80069cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80069d0:	f8d0 e000 	ldr.w	lr, [r0]
 80069d4:	b293      	uxth	r3, r2
 80069d6:	ebac 0303 	sub.w	r3, ip, r3
 80069da:	0c12      	lsrs	r2, r2, #16
 80069dc:	fa13 f38e 	uxtah	r3, r3, lr
 80069e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ee:	45c1      	cmp	r9, r8
 80069f0:	f840 3b04 	str.w	r3, [r0], #4
 80069f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069f8:	d2e8      	bcs.n	80069cc <quorem+0xb0>
 80069fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a02:	b922      	cbnz	r2, 8006a0e <quorem+0xf2>
 8006a04:	3b04      	subs	r3, #4
 8006a06:	429d      	cmp	r5, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	d30a      	bcc.n	8006a22 <quorem+0x106>
 8006a0c:	613c      	str	r4, [r7, #16]
 8006a0e:	4630      	mov	r0, r6
 8006a10:	b003      	add	sp, #12
 8006a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	3b04      	subs	r3, #4
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	d1cc      	bne.n	80069b8 <quorem+0x9c>
 8006a1e:	3c01      	subs	r4, #1
 8006a20:	e7c7      	b.n	80069b2 <quorem+0x96>
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	3b04      	subs	r3, #4
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	d1f0      	bne.n	8006a0c <quorem+0xf0>
 8006a2a:	3c01      	subs	r4, #1
 8006a2c:	e7eb      	b.n	8006a06 <quorem+0xea>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	e7ee      	b.n	8006a10 <quorem+0xf4>
 8006a32:	0000      	movs	r0, r0
 8006a34:	0000      	movs	r0, r0
	...

08006a38 <_dtoa_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	ed2d 8b02 	vpush	{d8}
 8006a40:	ec57 6b10 	vmov	r6, r7, d0
 8006a44:	b095      	sub	sp, #84	; 0x54
 8006a46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a4c:	9105      	str	r1, [sp, #20]
 8006a4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006a52:	4604      	mov	r4, r0
 8006a54:	9209      	str	r2, [sp, #36]	; 0x24
 8006a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a58:	b975      	cbnz	r5, 8006a78 <_dtoa_r+0x40>
 8006a5a:	2010      	movs	r0, #16
 8006a5c:	f000 fddc 	bl	8007618 <malloc>
 8006a60:	4602      	mov	r2, r0
 8006a62:	6260      	str	r0, [r4, #36]	; 0x24
 8006a64:	b920      	cbnz	r0, 8006a70 <_dtoa_r+0x38>
 8006a66:	4bb2      	ldr	r3, [pc, #712]	; (8006d30 <_dtoa_r+0x2f8>)
 8006a68:	21ea      	movs	r1, #234	; 0xea
 8006a6a:	48b2      	ldr	r0, [pc, #712]	; (8006d34 <_dtoa_r+0x2fc>)
 8006a6c:	f001 fb80 	bl	8008170 <__assert_func>
 8006a70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a74:	6005      	str	r5, [r0, #0]
 8006a76:	60c5      	str	r5, [r0, #12]
 8006a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a7a:	6819      	ldr	r1, [r3, #0]
 8006a7c:	b151      	cbz	r1, 8006a94 <_dtoa_r+0x5c>
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	604a      	str	r2, [r1, #4]
 8006a82:	2301      	movs	r3, #1
 8006a84:	4093      	lsls	r3, r2
 8006a86:	608b      	str	r3, [r1, #8]
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 fe0d 	bl	80076a8 <_Bfree>
 8006a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	1e3b      	subs	r3, r7, #0
 8006a96:	bfb9      	ittee	lt
 8006a98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a9c:	9303      	strlt	r3, [sp, #12]
 8006a9e:	2300      	movge	r3, #0
 8006aa0:	f8c8 3000 	strge.w	r3, [r8]
 8006aa4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006aa8:	4ba3      	ldr	r3, [pc, #652]	; (8006d38 <_dtoa_r+0x300>)
 8006aaa:	bfbc      	itt	lt
 8006aac:	2201      	movlt	r2, #1
 8006aae:	f8c8 2000 	strlt.w	r2, [r8]
 8006ab2:	ea33 0309 	bics.w	r3, r3, r9
 8006ab6:	d11b      	bne.n	8006af0 <_dtoa_r+0xb8>
 8006ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006aba:	f242 730f 	movw	r3, #9999	; 0x270f
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ac4:	4333      	orrs	r3, r6
 8006ac6:	f000 857a 	beq.w	80075be <_dtoa_r+0xb86>
 8006aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006acc:	b963      	cbnz	r3, 8006ae8 <_dtoa_r+0xb0>
 8006ace:	4b9b      	ldr	r3, [pc, #620]	; (8006d3c <_dtoa_r+0x304>)
 8006ad0:	e024      	b.n	8006b1c <_dtoa_r+0xe4>
 8006ad2:	4b9b      	ldr	r3, [pc, #620]	; (8006d40 <_dtoa_r+0x308>)
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	9800      	ldr	r0, [sp, #0]
 8006ade:	b015      	add	sp, #84	; 0x54
 8006ae0:	ecbd 8b02 	vpop	{d8}
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	4b94      	ldr	r3, [pc, #592]	; (8006d3c <_dtoa_r+0x304>)
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	3303      	adds	r3, #3
 8006aee:	e7f3      	b.n	8006ad8 <_dtoa_r+0xa0>
 8006af0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	ec51 0b17 	vmov	r0, r1, d7
 8006afa:	2300      	movs	r3, #0
 8006afc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006b00:	f7f9 ffea 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b04:	4680      	mov	r8, r0
 8006b06:	b158      	cbz	r0, 8006b20 <_dtoa_r+0xe8>
 8006b08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8551 	beq.w	80075b8 <_dtoa_r+0xb80>
 8006b16:	488b      	ldr	r0, [pc, #556]	; (8006d44 <_dtoa_r+0x30c>)
 8006b18:	6018      	str	r0, [r3, #0]
 8006b1a:	1e43      	subs	r3, r0, #1
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	e7dd      	b.n	8006adc <_dtoa_r+0xa4>
 8006b20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006b24:	aa12      	add	r2, sp, #72	; 0x48
 8006b26:	a913      	add	r1, sp, #76	; 0x4c
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f001 f89f 	bl	8007c6c <__d2b>
 8006b2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b32:	4683      	mov	fp, r0
 8006b34:	2d00      	cmp	r5, #0
 8006b36:	d07c      	beq.n	8006c32 <_dtoa_r+0x1fa>
 8006b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006b3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006b46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006b4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006b4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b52:	4b7d      	ldr	r3, [pc, #500]	; (8006d48 <_dtoa_r+0x310>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	4630      	mov	r0, r6
 8006b58:	4639      	mov	r1, r7
 8006b5a:	f7f9 fb9d 	bl	8000298 <__aeabi_dsub>
 8006b5e:	a36e      	add	r3, pc, #440	; (adr r3, 8006d18 <_dtoa_r+0x2e0>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 fd50 	bl	8000608 <__aeabi_dmul>
 8006b68:	a36d      	add	r3, pc, #436	; (adr r3, 8006d20 <_dtoa_r+0x2e8>)
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f7f9 fb95 	bl	800029c <__adddf3>
 8006b72:	4606      	mov	r6, r0
 8006b74:	4628      	mov	r0, r5
 8006b76:	460f      	mov	r7, r1
 8006b78:	f7f9 fcdc 	bl	8000534 <__aeabi_i2d>
 8006b7c:	a36a      	add	r3, pc, #424	; (adr r3, 8006d28 <_dtoa_r+0x2f0>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f7f9 fd41 	bl	8000608 <__aeabi_dmul>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	f7f9 fb85 	bl	800029c <__adddf3>
 8006b92:	4606      	mov	r6, r0
 8006b94:	460f      	mov	r7, r1
 8006b96:	f7f9 ffe7 	bl	8000b68 <__aeabi_d2iz>
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f7f9 ffa2 	bl	8000aec <__aeabi_dcmplt>
 8006ba8:	b148      	cbz	r0, 8006bbe <_dtoa_r+0x186>
 8006baa:	4650      	mov	r0, sl
 8006bac:	f7f9 fcc2 	bl	8000534 <__aeabi_i2d>
 8006bb0:	4632      	mov	r2, r6
 8006bb2:	463b      	mov	r3, r7
 8006bb4:	f7f9 ff90 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bb8:	b908      	cbnz	r0, 8006bbe <_dtoa_r+0x186>
 8006bba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bbe:	f1ba 0f16 	cmp.w	sl, #22
 8006bc2:	d854      	bhi.n	8006c6e <_dtoa_r+0x236>
 8006bc4:	4b61      	ldr	r3, [pc, #388]	; (8006d4c <_dtoa_r+0x314>)
 8006bc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bd2:	f7f9 ff8b 	bl	8000aec <__aeabi_dcmplt>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d04b      	beq.n	8006c72 <_dtoa_r+0x23a>
 8006bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bde:	2300      	movs	r3, #0
 8006be0:	930e      	str	r3, [sp, #56]	; 0x38
 8006be2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006be4:	1b5d      	subs	r5, r3, r5
 8006be6:	1e6b      	subs	r3, r5, #1
 8006be8:	9304      	str	r3, [sp, #16]
 8006bea:	bf43      	ittte	mi
 8006bec:	2300      	movmi	r3, #0
 8006bee:	f1c5 0801 	rsbmi	r8, r5, #1
 8006bf2:	9304      	strmi	r3, [sp, #16]
 8006bf4:	f04f 0800 	movpl.w	r8, #0
 8006bf8:	f1ba 0f00 	cmp.w	sl, #0
 8006bfc:	db3b      	blt.n	8006c76 <_dtoa_r+0x23e>
 8006bfe:	9b04      	ldr	r3, [sp, #16]
 8006c00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006c04:	4453      	add	r3, sl
 8006c06:	9304      	str	r3, [sp, #16]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	9306      	str	r3, [sp, #24]
 8006c0c:	9b05      	ldr	r3, [sp, #20]
 8006c0e:	2b09      	cmp	r3, #9
 8006c10:	d869      	bhi.n	8006ce6 <_dtoa_r+0x2ae>
 8006c12:	2b05      	cmp	r3, #5
 8006c14:	bfc4      	itt	gt
 8006c16:	3b04      	subgt	r3, #4
 8006c18:	9305      	strgt	r3, [sp, #20]
 8006c1a:	9b05      	ldr	r3, [sp, #20]
 8006c1c:	f1a3 0302 	sub.w	r3, r3, #2
 8006c20:	bfcc      	ite	gt
 8006c22:	2500      	movgt	r5, #0
 8006c24:	2501      	movle	r5, #1
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d869      	bhi.n	8006cfe <_dtoa_r+0x2c6>
 8006c2a:	e8df f003 	tbb	[pc, r3]
 8006c2e:	4e2c      	.short	0x4e2c
 8006c30:	5a4c      	.short	0x5a4c
 8006c32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006c36:	441d      	add	r5, r3
 8006c38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	bfc1      	itttt	gt
 8006c40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c48:	fa09 f303 	lslgt.w	r3, r9, r3
 8006c4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c50:	bfda      	itte	le
 8006c52:	f1c3 0320 	rsble	r3, r3, #32
 8006c56:	fa06 f003 	lslle.w	r0, r6, r3
 8006c5a:	4318      	orrgt	r0, r3
 8006c5c:	f7f9 fc5a 	bl	8000514 <__aeabi_ui2d>
 8006c60:	2301      	movs	r3, #1
 8006c62:	4606      	mov	r6, r0
 8006c64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c68:	3d01      	subs	r5, #1
 8006c6a:	9310      	str	r3, [sp, #64]	; 0x40
 8006c6c:	e771      	b.n	8006b52 <_dtoa_r+0x11a>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e7b6      	b.n	8006be0 <_dtoa_r+0x1a8>
 8006c72:	900e      	str	r0, [sp, #56]	; 0x38
 8006c74:	e7b5      	b.n	8006be2 <_dtoa_r+0x1aa>
 8006c76:	f1ca 0300 	rsb	r3, sl, #0
 8006c7a:	9306      	str	r3, [sp, #24]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	eba8 080a 	sub.w	r8, r8, sl
 8006c82:	930d      	str	r3, [sp, #52]	; 0x34
 8006c84:	e7c2      	b.n	8006c0c <_dtoa_r+0x1d4>
 8006c86:	2300      	movs	r3, #0
 8006c88:	9308      	str	r3, [sp, #32]
 8006c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dc39      	bgt.n	8006d04 <_dtoa_r+0x2cc>
 8006c90:	f04f 0901 	mov.w	r9, #1
 8006c94:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c98:	464b      	mov	r3, r9
 8006c9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006c9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	6042      	str	r2, [r0, #4]
 8006ca4:	2204      	movs	r2, #4
 8006ca6:	f102 0614 	add.w	r6, r2, #20
 8006caa:	429e      	cmp	r6, r3
 8006cac:	6841      	ldr	r1, [r0, #4]
 8006cae:	d92f      	bls.n	8006d10 <_dtoa_r+0x2d8>
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 fcb9 	bl	8007628 <_Balloc>
 8006cb6:	9000      	str	r0, [sp, #0]
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d14b      	bne.n	8006d54 <_dtoa_r+0x31c>
 8006cbc:	4b24      	ldr	r3, [pc, #144]	; (8006d50 <_dtoa_r+0x318>)
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006cc4:	e6d1      	b.n	8006a6a <_dtoa_r+0x32>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e7de      	b.n	8006c88 <_dtoa_r+0x250>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9308      	str	r3, [sp, #32]
 8006cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd0:	eb0a 0903 	add.w	r9, sl, r3
 8006cd4:	f109 0301 	add.w	r3, r9, #1
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	bfb8      	it	lt
 8006cde:	2301      	movlt	r3, #1
 8006ce0:	e7dd      	b.n	8006c9e <_dtoa_r+0x266>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e7f2      	b.n	8006ccc <_dtoa_r+0x294>
 8006ce6:	2501      	movs	r5, #1
 8006ce8:	2300      	movs	r3, #0
 8006cea:	9305      	str	r3, [sp, #20]
 8006cec:	9508      	str	r5, [sp, #32]
 8006cee:	f04f 39ff 	mov.w	r9, #4294967295
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006cf8:	2312      	movs	r3, #18
 8006cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8006cfc:	e7cf      	b.n	8006c9e <_dtoa_r+0x266>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	9308      	str	r3, [sp, #32]
 8006d02:	e7f4      	b.n	8006cee <_dtoa_r+0x2b6>
 8006d04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006d08:	f8cd 9004 	str.w	r9, [sp, #4]
 8006d0c:	464b      	mov	r3, r9
 8006d0e:	e7c6      	b.n	8006c9e <_dtoa_r+0x266>
 8006d10:	3101      	adds	r1, #1
 8006d12:	6041      	str	r1, [r0, #4]
 8006d14:	0052      	lsls	r2, r2, #1
 8006d16:	e7c6      	b.n	8006ca6 <_dtoa_r+0x26e>
 8006d18:	636f4361 	.word	0x636f4361
 8006d1c:	3fd287a7 	.word	0x3fd287a7
 8006d20:	8b60c8b3 	.word	0x8b60c8b3
 8006d24:	3fc68a28 	.word	0x3fc68a28
 8006d28:	509f79fb 	.word	0x509f79fb
 8006d2c:	3fd34413 	.word	0x3fd34413
 8006d30:	08009999 	.word	0x08009999
 8006d34:	080099b0 	.word	0x080099b0
 8006d38:	7ff00000 	.word	0x7ff00000
 8006d3c:	08009995 	.word	0x08009995
 8006d40:	0800998c 	.word	0x0800998c
 8006d44:	08009969 	.word	0x08009969
 8006d48:	3ff80000 	.word	0x3ff80000
 8006d4c:	08009aa8 	.word	0x08009aa8
 8006d50:	08009a0f 	.word	0x08009a0f
 8006d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d56:	9a00      	ldr	r2, [sp, #0]
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	9b01      	ldr	r3, [sp, #4]
 8006d5c:	2b0e      	cmp	r3, #14
 8006d5e:	f200 80ad 	bhi.w	8006ebc <_dtoa_r+0x484>
 8006d62:	2d00      	cmp	r5, #0
 8006d64:	f000 80aa 	beq.w	8006ebc <_dtoa_r+0x484>
 8006d68:	f1ba 0f00 	cmp.w	sl, #0
 8006d6c:	dd36      	ble.n	8006ddc <_dtoa_r+0x3a4>
 8006d6e:	4ac3      	ldr	r2, [pc, #780]	; (800707c <_dtoa_r+0x644>)
 8006d70:	f00a 030f 	and.w	r3, sl, #15
 8006d74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d78:	ed93 7b00 	vldr	d7, [r3]
 8006d7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006d80:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006d84:	eeb0 8a47 	vmov.f32	s16, s14
 8006d88:	eef0 8a67 	vmov.f32	s17, s15
 8006d8c:	d016      	beq.n	8006dbc <_dtoa_r+0x384>
 8006d8e:	4bbc      	ldr	r3, [pc, #752]	; (8007080 <_dtoa_r+0x648>)
 8006d90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d98:	f7f9 fd60 	bl	800085c <__aeabi_ddiv>
 8006d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da0:	f007 070f 	and.w	r7, r7, #15
 8006da4:	2503      	movs	r5, #3
 8006da6:	4eb6      	ldr	r6, [pc, #728]	; (8007080 <_dtoa_r+0x648>)
 8006da8:	b957      	cbnz	r7, 8006dc0 <_dtoa_r+0x388>
 8006daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dae:	ec53 2b18 	vmov	r2, r3, d8
 8006db2:	f7f9 fd53 	bl	800085c <__aeabi_ddiv>
 8006db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dba:	e029      	b.n	8006e10 <_dtoa_r+0x3d8>
 8006dbc:	2502      	movs	r5, #2
 8006dbe:	e7f2      	b.n	8006da6 <_dtoa_r+0x36e>
 8006dc0:	07f9      	lsls	r1, r7, #31
 8006dc2:	d508      	bpl.n	8006dd6 <_dtoa_r+0x39e>
 8006dc4:	ec51 0b18 	vmov	r0, r1, d8
 8006dc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006dcc:	f7f9 fc1c 	bl	8000608 <__aeabi_dmul>
 8006dd0:	ec41 0b18 	vmov	d8, r0, r1
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	107f      	asrs	r7, r7, #1
 8006dd8:	3608      	adds	r6, #8
 8006dda:	e7e5      	b.n	8006da8 <_dtoa_r+0x370>
 8006ddc:	f000 80a6 	beq.w	8006f2c <_dtoa_r+0x4f4>
 8006de0:	f1ca 0600 	rsb	r6, sl, #0
 8006de4:	4ba5      	ldr	r3, [pc, #660]	; (800707c <_dtoa_r+0x644>)
 8006de6:	4fa6      	ldr	r7, [pc, #664]	; (8007080 <_dtoa_r+0x648>)
 8006de8:	f006 020f 	and.w	r2, r6, #15
 8006dec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006df8:	f7f9 fc06 	bl	8000608 <__aeabi_dmul>
 8006dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e00:	1136      	asrs	r6, r6, #4
 8006e02:	2300      	movs	r3, #0
 8006e04:	2502      	movs	r5, #2
 8006e06:	2e00      	cmp	r6, #0
 8006e08:	f040 8085 	bne.w	8006f16 <_dtoa_r+0x4de>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1d2      	bne.n	8006db6 <_dtoa_r+0x37e>
 8006e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 808c 	beq.w	8006f30 <_dtoa_r+0x4f8>
 8006e18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e1c:	4b99      	ldr	r3, [pc, #612]	; (8007084 <_dtoa_r+0x64c>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4630      	mov	r0, r6
 8006e22:	4639      	mov	r1, r7
 8006e24:	f7f9 fe62 	bl	8000aec <__aeabi_dcmplt>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	f000 8081 	beq.w	8006f30 <_dtoa_r+0x4f8>
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d07d      	beq.n	8006f30 <_dtoa_r+0x4f8>
 8006e34:	f1b9 0f00 	cmp.w	r9, #0
 8006e38:	dd3c      	ble.n	8006eb4 <_dtoa_r+0x47c>
 8006e3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006e3e:	9307      	str	r3, [sp, #28]
 8006e40:	2200      	movs	r2, #0
 8006e42:	4b91      	ldr	r3, [pc, #580]	; (8007088 <_dtoa_r+0x650>)
 8006e44:	4630      	mov	r0, r6
 8006e46:	4639      	mov	r1, r7
 8006e48:	f7f9 fbde 	bl	8000608 <__aeabi_dmul>
 8006e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e50:	3501      	adds	r5, #1
 8006e52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006e56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f7f9 fb6a 	bl	8000534 <__aeabi_i2d>
 8006e60:	4632      	mov	r2, r6
 8006e62:	463b      	mov	r3, r7
 8006e64:	f7f9 fbd0 	bl	8000608 <__aeabi_dmul>
 8006e68:	4b88      	ldr	r3, [pc, #544]	; (800708c <_dtoa_r+0x654>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f7f9 fa16 	bl	800029c <__adddf3>
 8006e70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d15c      	bne.n	8006f3a <_dtoa_r+0x502>
 8006e80:	4b83      	ldr	r3, [pc, #524]	; (8007090 <_dtoa_r+0x658>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	4630      	mov	r0, r6
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 fa06 	bl	8000298 <__aeabi_dsub>
 8006e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e90:	4606      	mov	r6, r0
 8006e92:	460f      	mov	r7, r1
 8006e94:	f7f9 fe48 	bl	8000b28 <__aeabi_dcmpgt>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	f040 8296 	bne.w	80073ca <_dtoa_r+0x992>
 8006e9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	f7f9 fe1f 	bl	8000aec <__aeabi_dcmplt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f040 8288 	bne.w	80073c4 <_dtoa_r+0x98c>
 8006eb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006eb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ebc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f2c0 8158 	blt.w	8007174 <_dtoa_r+0x73c>
 8006ec4:	f1ba 0f0e 	cmp.w	sl, #14
 8006ec8:	f300 8154 	bgt.w	8007174 <_dtoa_r+0x73c>
 8006ecc:	4b6b      	ldr	r3, [pc, #428]	; (800707c <_dtoa_r+0x644>)
 8006ece:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ed2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f280 80e3 	bge.w	80070a4 <_dtoa_r+0x66c>
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f300 80df 	bgt.w	80070a4 <_dtoa_r+0x66c>
 8006ee6:	f040 826d 	bne.w	80073c4 <_dtoa_r+0x98c>
 8006eea:	4b69      	ldr	r3, [pc, #420]	; (8007090 <_dtoa_r+0x658>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	4640      	mov	r0, r8
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	f7f9 fb89 	bl	8000608 <__aeabi_dmul>
 8006ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006efa:	f7f9 fe0b 	bl	8000b14 <__aeabi_dcmpge>
 8006efe:	9e01      	ldr	r6, [sp, #4]
 8006f00:	4637      	mov	r7, r6
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f040 8243 	bne.w	800738e <_dtoa_r+0x956>
 8006f08:	9d00      	ldr	r5, [sp, #0]
 8006f0a:	2331      	movs	r3, #49	; 0x31
 8006f0c:	f805 3b01 	strb.w	r3, [r5], #1
 8006f10:	f10a 0a01 	add.w	sl, sl, #1
 8006f14:	e23f      	b.n	8007396 <_dtoa_r+0x95e>
 8006f16:	07f2      	lsls	r2, r6, #31
 8006f18:	d505      	bpl.n	8006f26 <_dtoa_r+0x4ee>
 8006f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f1e:	f7f9 fb73 	bl	8000608 <__aeabi_dmul>
 8006f22:	3501      	adds	r5, #1
 8006f24:	2301      	movs	r3, #1
 8006f26:	1076      	asrs	r6, r6, #1
 8006f28:	3708      	adds	r7, #8
 8006f2a:	e76c      	b.n	8006e06 <_dtoa_r+0x3ce>
 8006f2c:	2502      	movs	r5, #2
 8006f2e:	e76f      	b.n	8006e10 <_dtoa_r+0x3d8>
 8006f30:	9b01      	ldr	r3, [sp, #4]
 8006f32:	f8cd a01c 	str.w	sl, [sp, #28]
 8006f36:	930c      	str	r3, [sp, #48]	; 0x30
 8006f38:	e78d      	b.n	8006e56 <_dtoa_r+0x41e>
 8006f3a:	9900      	ldr	r1, [sp, #0]
 8006f3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f40:	4b4e      	ldr	r3, [pc, #312]	; (800707c <_dtoa_r+0x644>)
 8006f42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f46:	4401      	add	r1, r0
 8006f48:	9102      	str	r1, [sp, #8]
 8006f4a:	9908      	ldr	r1, [sp, #32]
 8006f4c:	eeb0 8a47 	vmov.f32	s16, s14
 8006f50:	eef0 8a67 	vmov.f32	s17, s15
 8006f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	d045      	beq.n	8006fec <_dtoa_r+0x5b4>
 8006f60:	494c      	ldr	r1, [pc, #304]	; (8007094 <_dtoa_r+0x65c>)
 8006f62:	2000      	movs	r0, #0
 8006f64:	f7f9 fc7a 	bl	800085c <__aeabi_ddiv>
 8006f68:	ec53 2b18 	vmov	r2, r3, d8
 8006f6c:	f7f9 f994 	bl	8000298 <__aeabi_dsub>
 8006f70:	9d00      	ldr	r5, [sp, #0]
 8006f72:	ec41 0b18 	vmov	d8, r0, r1
 8006f76:	4639      	mov	r1, r7
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f7f9 fdf5 	bl	8000b68 <__aeabi_d2iz>
 8006f7e:	900c      	str	r0, [sp, #48]	; 0x30
 8006f80:	f7f9 fad8 	bl	8000534 <__aeabi_i2d>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4630      	mov	r0, r6
 8006f8a:	4639      	mov	r1, r7
 8006f8c:	f7f9 f984 	bl	8000298 <__aeabi_dsub>
 8006f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f92:	3330      	adds	r3, #48	; 0x30
 8006f94:	f805 3b01 	strb.w	r3, [r5], #1
 8006f98:	ec53 2b18 	vmov	r2, r3, d8
 8006f9c:	4606      	mov	r6, r0
 8006f9e:	460f      	mov	r7, r1
 8006fa0:	f7f9 fda4 	bl	8000aec <__aeabi_dcmplt>
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d165      	bne.n	8007074 <_dtoa_r+0x63c>
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	4935      	ldr	r1, [pc, #212]	; (8007084 <_dtoa_r+0x64c>)
 8006fae:	2000      	movs	r0, #0
 8006fb0:	f7f9 f972 	bl	8000298 <__aeabi_dsub>
 8006fb4:	ec53 2b18 	vmov	r2, r3, d8
 8006fb8:	f7f9 fd98 	bl	8000aec <__aeabi_dcmplt>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f040 80b9 	bne.w	8007134 <_dtoa_r+0x6fc>
 8006fc2:	9b02      	ldr	r3, [sp, #8]
 8006fc4:	429d      	cmp	r5, r3
 8006fc6:	f43f af75 	beq.w	8006eb4 <_dtoa_r+0x47c>
 8006fca:	4b2f      	ldr	r3, [pc, #188]	; (8007088 <_dtoa_r+0x650>)
 8006fcc:	ec51 0b18 	vmov	r0, r1, d8
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f7f9 fb19 	bl	8000608 <__aeabi_dmul>
 8006fd6:	4b2c      	ldr	r3, [pc, #176]	; (8007088 <_dtoa_r+0x650>)
 8006fd8:	ec41 0b18 	vmov	d8, r0, r1
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4630      	mov	r0, r6
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	f7f9 fb11 	bl	8000608 <__aeabi_dmul>
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	460f      	mov	r7, r1
 8006fea:	e7c4      	b.n	8006f76 <_dtoa_r+0x53e>
 8006fec:	ec51 0b17 	vmov	r0, r1, d7
 8006ff0:	f7f9 fb0a 	bl	8000608 <__aeabi_dmul>
 8006ff4:	9b02      	ldr	r3, [sp, #8]
 8006ff6:	9d00      	ldr	r5, [sp, #0]
 8006ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8006ffa:	ec41 0b18 	vmov	d8, r0, r1
 8006ffe:	4639      	mov	r1, r7
 8007000:	4630      	mov	r0, r6
 8007002:	f7f9 fdb1 	bl	8000b68 <__aeabi_d2iz>
 8007006:	9011      	str	r0, [sp, #68]	; 0x44
 8007008:	f7f9 fa94 	bl	8000534 <__aeabi_i2d>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 f940 	bl	8000298 <__aeabi_dsub>
 8007018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800701a:	3330      	adds	r3, #48	; 0x30
 800701c:	f805 3b01 	strb.w	r3, [r5], #1
 8007020:	9b02      	ldr	r3, [sp, #8]
 8007022:	429d      	cmp	r5, r3
 8007024:	4606      	mov	r6, r0
 8007026:	460f      	mov	r7, r1
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	d134      	bne.n	8007098 <_dtoa_r+0x660>
 800702e:	4b19      	ldr	r3, [pc, #100]	; (8007094 <_dtoa_r+0x65c>)
 8007030:	ec51 0b18 	vmov	r0, r1, d8
 8007034:	f7f9 f932 	bl	800029c <__adddf3>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	f7f9 fd72 	bl	8000b28 <__aeabi_dcmpgt>
 8007044:	2800      	cmp	r0, #0
 8007046:	d175      	bne.n	8007134 <_dtoa_r+0x6fc>
 8007048:	ec53 2b18 	vmov	r2, r3, d8
 800704c:	4911      	ldr	r1, [pc, #68]	; (8007094 <_dtoa_r+0x65c>)
 800704e:	2000      	movs	r0, #0
 8007050:	f7f9 f922 	bl	8000298 <__aeabi_dsub>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4630      	mov	r0, r6
 800705a:	4639      	mov	r1, r7
 800705c:	f7f9 fd46 	bl	8000aec <__aeabi_dcmplt>
 8007060:	2800      	cmp	r0, #0
 8007062:	f43f af27 	beq.w	8006eb4 <_dtoa_r+0x47c>
 8007066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007068:	1e6b      	subs	r3, r5, #1
 800706a:	930c      	str	r3, [sp, #48]	; 0x30
 800706c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007070:	2b30      	cmp	r3, #48	; 0x30
 8007072:	d0f8      	beq.n	8007066 <_dtoa_r+0x62e>
 8007074:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007078:	e04a      	b.n	8007110 <_dtoa_r+0x6d8>
 800707a:	bf00      	nop
 800707c:	08009aa8 	.word	0x08009aa8
 8007080:	08009a80 	.word	0x08009a80
 8007084:	3ff00000 	.word	0x3ff00000
 8007088:	40240000 	.word	0x40240000
 800708c:	401c0000 	.word	0x401c0000
 8007090:	40140000 	.word	0x40140000
 8007094:	3fe00000 	.word	0x3fe00000
 8007098:	4baf      	ldr	r3, [pc, #700]	; (8007358 <_dtoa_r+0x920>)
 800709a:	f7f9 fab5 	bl	8000608 <__aeabi_dmul>
 800709e:	4606      	mov	r6, r0
 80070a0:	460f      	mov	r7, r1
 80070a2:	e7ac      	b.n	8006ffe <_dtoa_r+0x5c6>
 80070a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80070a8:	9d00      	ldr	r5, [sp, #0]
 80070aa:	4642      	mov	r2, r8
 80070ac:	464b      	mov	r3, r9
 80070ae:	4630      	mov	r0, r6
 80070b0:	4639      	mov	r1, r7
 80070b2:	f7f9 fbd3 	bl	800085c <__aeabi_ddiv>
 80070b6:	f7f9 fd57 	bl	8000b68 <__aeabi_d2iz>
 80070ba:	9002      	str	r0, [sp, #8]
 80070bc:	f7f9 fa3a 	bl	8000534 <__aeabi_i2d>
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	f7f9 faa0 	bl	8000608 <__aeabi_dmul>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4630      	mov	r0, r6
 80070ce:	4639      	mov	r1, r7
 80070d0:	f7f9 f8e2 	bl	8000298 <__aeabi_dsub>
 80070d4:	9e02      	ldr	r6, [sp, #8]
 80070d6:	9f01      	ldr	r7, [sp, #4]
 80070d8:	3630      	adds	r6, #48	; 0x30
 80070da:	f805 6b01 	strb.w	r6, [r5], #1
 80070de:	9e00      	ldr	r6, [sp, #0]
 80070e0:	1bae      	subs	r6, r5, r6
 80070e2:	42b7      	cmp	r7, r6
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	d137      	bne.n	800715a <_dtoa_r+0x722>
 80070ea:	f7f9 f8d7 	bl	800029c <__adddf3>
 80070ee:	4642      	mov	r2, r8
 80070f0:	464b      	mov	r3, r9
 80070f2:	4606      	mov	r6, r0
 80070f4:	460f      	mov	r7, r1
 80070f6:	f7f9 fd17 	bl	8000b28 <__aeabi_dcmpgt>
 80070fa:	b9c8      	cbnz	r0, 8007130 <_dtoa_r+0x6f8>
 80070fc:	4642      	mov	r2, r8
 80070fe:	464b      	mov	r3, r9
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	f7f9 fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007108:	b110      	cbz	r0, 8007110 <_dtoa_r+0x6d8>
 800710a:	9b02      	ldr	r3, [sp, #8]
 800710c:	07d9      	lsls	r1, r3, #31
 800710e:	d40f      	bmi.n	8007130 <_dtoa_r+0x6f8>
 8007110:	4620      	mov	r0, r4
 8007112:	4659      	mov	r1, fp
 8007114:	f000 fac8 	bl	80076a8 <_Bfree>
 8007118:	2300      	movs	r3, #0
 800711a:	702b      	strb	r3, [r5, #0]
 800711c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800711e:	f10a 0001 	add.w	r0, sl, #1
 8007122:	6018      	str	r0, [r3, #0]
 8007124:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007126:	2b00      	cmp	r3, #0
 8007128:	f43f acd8 	beq.w	8006adc <_dtoa_r+0xa4>
 800712c:	601d      	str	r5, [r3, #0]
 800712e:	e4d5      	b.n	8006adc <_dtoa_r+0xa4>
 8007130:	f8cd a01c 	str.w	sl, [sp, #28]
 8007134:	462b      	mov	r3, r5
 8007136:	461d      	mov	r5, r3
 8007138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800713c:	2a39      	cmp	r2, #57	; 0x39
 800713e:	d108      	bne.n	8007152 <_dtoa_r+0x71a>
 8007140:	9a00      	ldr	r2, [sp, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d1f7      	bne.n	8007136 <_dtoa_r+0x6fe>
 8007146:	9a07      	ldr	r2, [sp, #28]
 8007148:	9900      	ldr	r1, [sp, #0]
 800714a:	3201      	adds	r2, #1
 800714c:	9207      	str	r2, [sp, #28]
 800714e:	2230      	movs	r2, #48	; 0x30
 8007150:	700a      	strb	r2, [r1, #0]
 8007152:	781a      	ldrb	r2, [r3, #0]
 8007154:	3201      	adds	r2, #1
 8007156:	701a      	strb	r2, [r3, #0]
 8007158:	e78c      	b.n	8007074 <_dtoa_r+0x63c>
 800715a:	4b7f      	ldr	r3, [pc, #508]	; (8007358 <_dtoa_r+0x920>)
 800715c:	2200      	movs	r2, #0
 800715e:	f7f9 fa53 	bl	8000608 <__aeabi_dmul>
 8007162:	2200      	movs	r2, #0
 8007164:	2300      	movs	r3, #0
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	f7f9 fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800716e:	2800      	cmp	r0, #0
 8007170:	d09b      	beq.n	80070aa <_dtoa_r+0x672>
 8007172:	e7cd      	b.n	8007110 <_dtoa_r+0x6d8>
 8007174:	9a08      	ldr	r2, [sp, #32]
 8007176:	2a00      	cmp	r2, #0
 8007178:	f000 80c4 	beq.w	8007304 <_dtoa_r+0x8cc>
 800717c:	9a05      	ldr	r2, [sp, #20]
 800717e:	2a01      	cmp	r2, #1
 8007180:	f300 80a8 	bgt.w	80072d4 <_dtoa_r+0x89c>
 8007184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007186:	2a00      	cmp	r2, #0
 8007188:	f000 80a0 	beq.w	80072cc <_dtoa_r+0x894>
 800718c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007190:	9e06      	ldr	r6, [sp, #24]
 8007192:	4645      	mov	r5, r8
 8007194:	9a04      	ldr	r2, [sp, #16]
 8007196:	2101      	movs	r1, #1
 8007198:	441a      	add	r2, r3
 800719a:	4620      	mov	r0, r4
 800719c:	4498      	add	r8, r3
 800719e:	9204      	str	r2, [sp, #16]
 80071a0:	f000 fb3e 	bl	8007820 <__i2b>
 80071a4:	4607      	mov	r7, r0
 80071a6:	2d00      	cmp	r5, #0
 80071a8:	dd0b      	ble.n	80071c2 <_dtoa_r+0x78a>
 80071aa:	9b04      	ldr	r3, [sp, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	dd08      	ble.n	80071c2 <_dtoa_r+0x78a>
 80071b0:	42ab      	cmp	r3, r5
 80071b2:	9a04      	ldr	r2, [sp, #16]
 80071b4:	bfa8      	it	ge
 80071b6:	462b      	movge	r3, r5
 80071b8:	eba8 0803 	sub.w	r8, r8, r3
 80071bc:	1aed      	subs	r5, r5, r3
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	9304      	str	r3, [sp, #16]
 80071c2:	9b06      	ldr	r3, [sp, #24]
 80071c4:	b1fb      	cbz	r3, 8007206 <_dtoa_r+0x7ce>
 80071c6:	9b08      	ldr	r3, [sp, #32]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 809f 	beq.w	800730c <_dtoa_r+0x8d4>
 80071ce:	2e00      	cmp	r6, #0
 80071d0:	dd11      	ble.n	80071f6 <_dtoa_r+0x7be>
 80071d2:	4639      	mov	r1, r7
 80071d4:	4632      	mov	r2, r6
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fbde 	bl	8007998 <__pow5mult>
 80071dc:	465a      	mov	r2, fp
 80071de:	4601      	mov	r1, r0
 80071e0:	4607      	mov	r7, r0
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 fb32 	bl	800784c <__multiply>
 80071e8:	4659      	mov	r1, fp
 80071ea:	9007      	str	r0, [sp, #28]
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fa5b 	bl	80076a8 <_Bfree>
 80071f2:	9b07      	ldr	r3, [sp, #28]
 80071f4:	469b      	mov	fp, r3
 80071f6:	9b06      	ldr	r3, [sp, #24]
 80071f8:	1b9a      	subs	r2, r3, r6
 80071fa:	d004      	beq.n	8007206 <_dtoa_r+0x7ce>
 80071fc:	4659      	mov	r1, fp
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 fbca 	bl	8007998 <__pow5mult>
 8007204:	4683      	mov	fp, r0
 8007206:	2101      	movs	r1, #1
 8007208:	4620      	mov	r0, r4
 800720a:	f000 fb09 	bl	8007820 <__i2b>
 800720e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	4606      	mov	r6, r0
 8007214:	dd7c      	ble.n	8007310 <_dtoa_r+0x8d8>
 8007216:	461a      	mov	r2, r3
 8007218:	4601      	mov	r1, r0
 800721a:	4620      	mov	r0, r4
 800721c:	f000 fbbc 	bl	8007998 <__pow5mult>
 8007220:	9b05      	ldr	r3, [sp, #20]
 8007222:	2b01      	cmp	r3, #1
 8007224:	4606      	mov	r6, r0
 8007226:	dd76      	ble.n	8007316 <_dtoa_r+0x8de>
 8007228:	2300      	movs	r3, #0
 800722a:	9306      	str	r3, [sp, #24]
 800722c:	6933      	ldr	r3, [r6, #16]
 800722e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007232:	6918      	ldr	r0, [r3, #16]
 8007234:	f000 faa4 	bl	8007780 <__hi0bits>
 8007238:	f1c0 0020 	rsb	r0, r0, #32
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	4418      	add	r0, r3
 8007240:	f010 001f 	ands.w	r0, r0, #31
 8007244:	f000 8086 	beq.w	8007354 <_dtoa_r+0x91c>
 8007248:	f1c0 0320 	rsb	r3, r0, #32
 800724c:	2b04      	cmp	r3, #4
 800724e:	dd7f      	ble.n	8007350 <_dtoa_r+0x918>
 8007250:	f1c0 001c 	rsb	r0, r0, #28
 8007254:	9b04      	ldr	r3, [sp, #16]
 8007256:	4403      	add	r3, r0
 8007258:	4480      	add	r8, r0
 800725a:	4405      	add	r5, r0
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	f1b8 0f00 	cmp.w	r8, #0
 8007262:	dd05      	ble.n	8007270 <_dtoa_r+0x838>
 8007264:	4659      	mov	r1, fp
 8007266:	4642      	mov	r2, r8
 8007268:	4620      	mov	r0, r4
 800726a:	f000 fbef 	bl	8007a4c <__lshift>
 800726e:	4683      	mov	fp, r0
 8007270:	9b04      	ldr	r3, [sp, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	dd05      	ble.n	8007282 <_dtoa_r+0x84a>
 8007276:	4631      	mov	r1, r6
 8007278:	461a      	mov	r2, r3
 800727a:	4620      	mov	r0, r4
 800727c:	f000 fbe6 	bl	8007a4c <__lshift>
 8007280:	4606      	mov	r6, r0
 8007282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007284:	2b00      	cmp	r3, #0
 8007286:	d069      	beq.n	800735c <_dtoa_r+0x924>
 8007288:	4631      	mov	r1, r6
 800728a:	4658      	mov	r0, fp
 800728c:	f000 fc4a 	bl	8007b24 <__mcmp>
 8007290:	2800      	cmp	r0, #0
 8007292:	da63      	bge.n	800735c <_dtoa_r+0x924>
 8007294:	2300      	movs	r3, #0
 8007296:	4659      	mov	r1, fp
 8007298:	220a      	movs	r2, #10
 800729a:	4620      	mov	r0, r4
 800729c:	f000 fa26 	bl	80076ec <__multadd>
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072a6:	4683      	mov	fp, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 818f 	beq.w	80075cc <_dtoa_r+0xb94>
 80072ae:	4639      	mov	r1, r7
 80072b0:	2300      	movs	r3, #0
 80072b2:	220a      	movs	r2, #10
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fa19 	bl	80076ec <__multadd>
 80072ba:	f1b9 0f00 	cmp.w	r9, #0
 80072be:	4607      	mov	r7, r0
 80072c0:	f300 808e 	bgt.w	80073e0 <_dtoa_r+0x9a8>
 80072c4:	9b05      	ldr	r3, [sp, #20]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	dc50      	bgt.n	800736c <_dtoa_r+0x934>
 80072ca:	e089      	b.n	80073e0 <_dtoa_r+0x9a8>
 80072cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072d2:	e75d      	b.n	8007190 <_dtoa_r+0x758>
 80072d4:	9b01      	ldr	r3, [sp, #4]
 80072d6:	1e5e      	subs	r6, r3, #1
 80072d8:	9b06      	ldr	r3, [sp, #24]
 80072da:	42b3      	cmp	r3, r6
 80072dc:	bfbf      	itttt	lt
 80072de:	9b06      	ldrlt	r3, [sp, #24]
 80072e0:	9606      	strlt	r6, [sp, #24]
 80072e2:	1af2      	sublt	r2, r6, r3
 80072e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80072e6:	bfb6      	itet	lt
 80072e8:	189b      	addlt	r3, r3, r2
 80072ea:	1b9e      	subge	r6, r3, r6
 80072ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80072ee:	9b01      	ldr	r3, [sp, #4]
 80072f0:	bfb8      	it	lt
 80072f2:	2600      	movlt	r6, #0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bfb5      	itete	lt
 80072f8:	eba8 0503 	sublt.w	r5, r8, r3
 80072fc:	9b01      	ldrge	r3, [sp, #4]
 80072fe:	2300      	movlt	r3, #0
 8007300:	4645      	movge	r5, r8
 8007302:	e747      	b.n	8007194 <_dtoa_r+0x75c>
 8007304:	9e06      	ldr	r6, [sp, #24]
 8007306:	9f08      	ldr	r7, [sp, #32]
 8007308:	4645      	mov	r5, r8
 800730a:	e74c      	b.n	80071a6 <_dtoa_r+0x76e>
 800730c:	9a06      	ldr	r2, [sp, #24]
 800730e:	e775      	b.n	80071fc <_dtoa_r+0x7c4>
 8007310:	9b05      	ldr	r3, [sp, #20]
 8007312:	2b01      	cmp	r3, #1
 8007314:	dc18      	bgt.n	8007348 <_dtoa_r+0x910>
 8007316:	9b02      	ldr	r3, [sp, #8]
 8007318:	b9b3      	cbnz	r3, 8007348 <_dtoa_r+0x910>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007320:	b9a3      	cbnz	r3, 800734c <_dtoa_r+0x914>
 8007322:	9b03      	ldr	r3, [sp, #12]
 8007324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007328:	0d1b      	lsrs	r3, r3, #20
 800732a:	051b      	lsls	r3, r3, #20
 800732c:	b12b      	cbz	r3, 800733a <_dtoa_r+0x902>
 800732e:	9b04      	ldr	r3, [sp, #16]
 8007330:	3301      	adds	r3, #1
 8007332:	9304      	str	r3, [sp, #16]
 8007334:	f108 0801 	add.w	r8, r8, #1
 8007338:	2301      	movs	r3, #1
 800733a:	9306      	str	r3, [sp, #24]
 800733c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800733e:	2b00      	cmp	r3, #0
 8007340:	f47f af74 	bne.w	800722c <_dtoa_r+0x7f4>
 8007344:	2001      	movs	r0, #1
 8007346:	e779      	b.n	800723c <_dtoa_r+0x804>
 8007348:	2300      	movs	r3, #0
 800734a:	e7f6      	b.n	800733a <_dtoa_r+0x902>
 800734c:	9b02      	ldr	r3, [sp, #8]
 800734e:	e7f4      	b.n	800733a <_dtoa_r+0x902>
 8007350:	d085      	beq.n	800725e <_dtoa_r+0x826>
 8007352:	4618      	mov	r0, r3
 8007354:	301c      	adds	r0, #28
 8007356:	e77d      	b.n	8007254 <_dtoa_r+0x81c>
 8007358:	40240000 	.word	0x40240000
 800735c:	9b01      	ldr	r3, [sp, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	dc38      	bgt.n	80073d4 <_dtoa_r+0x99c>
 8007362:	9b05      	ldr	r3, [sp, #20]
 8007364:	2b02      	cmp	r3, #2
 8007366:	dd35      	ble.n	80073d4 <_dtoa_r+0x99c>
 8007368:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800736c:	f1b9 0f00 	cmp.w	r9, #0
 8007370:	d10d      	bne.n	800738e <_dtoa_r+0x956>
 8007372:	4631      	mov	r1, r6
 8007374:	464b      	mov	r3, r9
 8007376:	2205      	movs	r2, #5
 8007378:	4620      	mov	r0, r4
 800737a:	f000 f9b7 	bl	80076ec <__multadd>
 800737e:	4601      	mov	r1, r0
 8007380:	4606      	mov	r6, r0
 8007382:	4658      	mov	r0, fp
 8007384:	f000 fbce 	bl	8007b24 <__mcmp>
 8007388:	2800      	cmp	r0, #0
 800738a:	f73f adbd 	bgt.w	8006f08 <_dtoa_r+0x4d0>
 800738e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007390:	9d00      	ldr	r5, [sp, #0]
 8007392:	ea6f 0a03 	mvn.w	sl, r3
 8007396:	f04f 0800 	mov.w	r8, #0
 800739a:	4631      	mov	r1, r6
 800739c:	4620      	mov	r0, r4
 800739e:	f000 f983 	bl	80076a8 <_Bfree>
 80073a2:	2f00      	cmp	r7, #0
 80073a4:	f43f aeb4 	beq.w	8007110 <_dtoa_r+0x6d8>
 80073a8:	f1b8 0f00 	cmp.w	r8, #0
 80073ac:	d005      	beq.n	80073ba <_dtoa_r+0x982>
 80073ae:	45b8      	cmp	r8, r7
 80073b0:	d003      	beq.n	80073ba <_dtoa_r+0x982>
 80073b2:	4641      	mov	r1, r8
 80073b4:	4620      	mov	r0, r4
 80073b6:	f000 f977 	bl	80076a8 <_Bfree>
 80073ba:	4639      	mov	r1, r7
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 f973 	bl	80076a8 <_Bfree>
 80073c2:	e6a5      	b.n	8007110 <_dtoa_r+0x6d8>
 80073c4:	2600      	movs	r6, #0
 80073c6:	4637      	mov	r7, r6
 80073c8:	e7e1      	b.n	800738e <_dtoa_r+0x956>
 80073ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80073cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80073d0:	4637      	mov	r7, r6
 80073d2:	e599      	b.n	8006f08 <_dtoa_r+0x4d0>
 80073d4:	9b08      	ldr	r3, [sp, #32]
 80073d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 80fd 	beq.w	80075da <_dtoa_r+0xba2>
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	dd05      	ble.n	80073f0 <_dtoa_r+0x9b8>
 80073e4:	4639      	mov	r1, r7
 80073e6:	462a      	mov	r2, r5
 80073e8:	4620      	mov	r0, r4
 80073ea:	f000 fb2f 	bl	8007a4c <__lshift>
 80073ee:	4607      	mov	r7, r0
 80073f0:	9b06      	ldr	r3, [sp, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d05c      	beq.n	80074b0 <_dtoa_r+0xa78>
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 f915 	bl	8007628 <_Balloc>
 80073fe:	4605      	mov	r5, r0
 8007400:	b928      	cbnz	r0, 800740e <_dtoa_r+0x9d6>
 8007402:	4b80      	ldr	r3, [pc, #512]	; (8007604 <_dtoa_r+0xbcc>)
 8007404:	4602      	mov	r2, r0
 8007406:	f240 21ea 	movw	r1, #746	; 0x2ea
 800740a:	f7ff bb2e 	b.w	8006a6a <_dtoa_r+0x32>
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	3202      	adds	r2, #2
 8007412:	0092      	lsls	r2, r2, #2
 8007414:	f107 010c 	add.w	r1, r7, #12
 8007418:	300c      	adds	r0, #12
 800741a:	f7fe fddf 	bl	8005fdc <memcpy>
 800741e:	2201      	movs	r2, #1
 8007420:	4629      	mov	r1, r5
 8007422:	4620      	mov	r0, r4
 8007424:	f000 fb12 	bl	8007a4c <__lshift>
 8007428:	9b00      	ldr	r3, [sp, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	9b00      	ldr	r3, [sp, #0]
 8007430:	444b      	add	r3, r9
 8007432:	9307      	str	r3, [sp, #28]
 8007434:	9b02      	ldr	r3, [sp, #8]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	46b8      	mov	r8, r7
 800743c:	9306      	str	r3, [sp, #24]
 800743e:	4607      	mov	r7, r0
 8007440:	9b01      	ldr	r3, [sp, #4]
 8007442:	4631      	mov	r1, r6
 8007444:	3b01      	subs	r3, #1
 8007446:	4658      	mov	r0, fp
 8007448:	9302      	str	r3, [sp, #8]
 800744a:	f7ff fa67 	bl	800691c <quorem>
 800744e:	4603      	mov	r3, r0
 8007450:	3330      	adds	r3, #48	; 0x30
 8007452:	9004      	str	r0, [sp, #16]
 8007454:	4641      	mov	r1, r8
 8007456:	4658      	mov	r0, fp
 8007458:	9308      	str	r3, [sp, #32]
 800745a:	f000 fb63 	bl	8007b24 <__mcmp>
 800745e:	463a      	mov	r2, r7
 8007460:	4681      	mov	r9, r0
 8007462:	4631      	mov	r1, r6
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fb79 	bl	8007b5c <__mdiff>
 800746a:	68c2      	ldr	r2, [r0, #12]
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	4605      	mov	r5, r0
 8007470:	bb02      	cbnz	r2, 80074b4 <_dtoa_r+0xa7c>
 8007472:	4601      	mov	r1, r0
 8007474:	4658      	mov	r0, fp
 8007476:	f000 fb55 	bl	8007b24 <__mcmp>
 800747a:	9b08      	ldr	r3, [sp, #32]
 800747c:	4602      	mov	r2, r0
 800747e:	4629      	mov	r1, r5
 8007480:	4620      	mov	r0, r4
 8007482:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007486:	f000 f90f 	bl	80076a8 <_Bfree>
 800748a:	9b05      	ldr	r3, [sp, #20]
 800748c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800748e:	9d01      	ldr	r5, [sp, #4]
 8007490:	ea43 0102 	orr.w	r1, r3, r2
 8007494:	9b06      	ldr	r3, [sp, #24]
 8007496:	430b      	orrs	r3, r1
 8007498:	9b08      	ldr	r3, [sp, #32]
 800749a:	d10d      	bne.n	80074b8 <_dtoa_r+0xa80>
 800749c:	2b39      	cmp	r3, #57	; 0x39
 800749e:	d029      	beq.n	80074f4 <_dtoa_r+0xabc>
 80074a0:	f1b9 0f00 	cmp.w	r9, #0
 80074a4:	dd01      	ble.n	80074aa <_dtoa_r+0xa72>
 80074a6:	9b04      	ldr	r3, [sp, #16]
 80074a8:	3331      	adds	r3, #49	; 0x31
 80074aa:	9a02      	ldr	r2, [sp, #8]
 80074ac:	7013      	strb	r3, [r2, #0]
 80074ae:	e774      	b.n	800739a <_dtoa_r+0x962>
 80074b0:	4638      	mov	r0, r7
 80074b2:	e7b9      	b.n	8007428 <_dtoa_r+0x9f0>
 80074b4:	2201      	movs	r2, #1
 80074b6:	e7e2      	b.n	800747e <_dtoa_r+0xa46>
 80074b8:	f1b9 0f00 	cmp.w	r9, #0
 80074bc:	db06      	blt.n	80074cc <_dtoa_r+0xa94>
 80074be:	9905      	ldr	r1, [sp, #20]
 80074c0:	ea41 0909 	orr.w	r9, r1, r9
 80074c4:	9906      	ldr	r1, [sp, #24]
 80074c6:	ea59 0101 	orrs.w	r1, r9, r1
 80074ca:	d120      	bne.n	800750e <_dtoa_r+0xad6>
 80074cc:	2a00      	cmp	r2, #0
 80074ce:	ddec      	ble.n	80074aa <_dtoa_r+0xa72>
 80074d0:	4659      	mov	r1, fp
 80074d2:	2201      	movs	r2, #1
 80074d4:	4620      	mov	r0, r4
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	f000 fab8 	bl	8007a4c <__lshift>
 80074dc:	4631      	mov	r1, r6
 80074de:	4683      	mov	fp, r0
 80074e0:	f000 fb20 	bl	8007b24 <__mcmp>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	9b01      	ldr	r3, [sp, #4]
 80074e8:	dc02      	bgt.n	80074f0 <_dtoa_r+0xab8>
 80074ea:	d1de      	bne.n	80074aa <_dtoa_r+0xa72>
 80074ec:	07da      	lsls	r2, r3, #31
 80074ee:	d5dc      	bpl.n	80074aa <_dtoa_r+0xa72>
 80074f0:	2b39      	cmp	r3, #57	; 0x39
 80074f2:	d1d8      	bne.n	80074a6 <_dtoa_r+0xa6e>
 80074f4:	9a02      	ldr	r2, [sp, #8]
 80074f6:	2339      	movs	r3, #57	; 0x39
 80074f8:	7013      	strb	r3, [r2, #0]
 80074fa:	462b      	mov	r3, r5
 80074fc:	461d      	mov	r5, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007504:	2a39      	cmp	r2, #57	; 0x39
 8007506:	d050      	beq.n	80075aa <_dtoa_r+0xb72>
 8007508:	3201      	adds	r2, #1
 800750a:	701a      	strb	r2, [r3, #0]
 800750c:	e745      	b.n	800739a <_dtoa_r+0x962>
 800750e:	2a00      	cmp	r2, #0
 8007510:	dd03      	ble.n	800751a <_dtoa_r+0xae2>
 8007512:	2b39      	cmp	r3, #57	; 0x39
 8007514:	d0ee      	beq.n	80074f4 <_dtoa_r+0xabc>
 8007516:	3301      	adds	r3, #1
 8007518:	e7c7      	b.n	80074aa <_dtoa_r+0xa72>
 800751a:	9a01      	ldr	r2, [sp, #4]
 800751c:	9907      	ldr	r1, [sp, #28]
 800751e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007522:	428a      	cmp	r2, r1
 8007524:	d02a      	beq.n	800757c <_dtoa_r+0xb44>
 8007526:	4659      	mov	r1, fp
 8007528:	2300      	movs	r3, #0
 800752a:	220a      	movs	r2, #10
 800752c:	4620      	mov	r0, r4
 800752e:	f000 f8dd 	bl	80076ec <__multadd>
 8007532:	45b8      	cmp	r8, r7
 8007534:	4683      	mov	fp, r0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	f04f 020a 	mov.w	r2, #10
 800753e:	4641      	mov	r1, r8
 8007540:	4620      	mov	r0, r4
 8007542:	d107      	bne.n	8007554 <_dtoa_r+0xb1c>
 8007544:	f000 f8d2 	bl	80076ec <__multadd>
 8007548:	4680      	mov	r8, r0
 800754a:	4607      	mov	r7, r0
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	3301      	adds	r3, #1
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	e775      	b.n	8007440 <_dtoa_r+0xa08>
 8007554:	f000 f8ca 	bl	80076ec <__multadd>
 8007558:	4639      	mov	r1, r7
 800755a:	4680      	mov	r8, r0
 800755c:	2300      	movs	r3, #0
 800755e:	220a      	movs	r2, #10
 8007560:	4620      	mov	r0, r4
 8007562:	f000 f8c3 	bl	80076ec <__multadd>
 8007566:	4607      	mov	r7, r0
 8007568:	e7f0      	b.n	800754c <_dtoa_r+0xb14>
 800756a:	f1b9 0f00 	cmp.w	r9, #0
 800756e:	9a00      	ldr	r2, [sp, #0]
 8007570:	bfcc      	ite	gt
 8007572:	464d      	movgt	r5, r9
 8007574:	2501      	movle	r5, #1
 8007576:	4415      	add	r5, r2
 8007578:	f04f 0800 	mov.w	r8, #0
 800757c:	4659      	mov	r1, fp
 800757e:	2201      	movs	r2, #1
 8007580:	4620      	mov	r0, r4
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	f000 fa62 	bl	8007a4c <__lshift>
 8007588:	4631      	mov	r1, r6
 800758a:	4683      	mov	fp, r0
 800758c:	f000 faca 	bl	8007b24 <__mcmp>
 8007590:	2800      	cmp	r0, #0
 8007592:	dcb2      	bgt.n	80074fa <_dtoa_r+0xac2>
 8007594:	d102      	bne.n	800759c <_dtoa_r+0xb64>
 8007596:	9b01      	ldr	r3, [sp, #4]
 8007598:	07db      	lsls	r3, r3, #31
 800759a:	d4ae      	bmi.n	80074fa <_dtoa_r+0xac2>
 800759c:	462b      	mov	r3, r5
 800759e:	461d      	mov	r5, r3
 80075a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075a4:	2a30      	cmp	r2, #48	; 0x30
 80075a6:	d0fa      	beq.n	800759e <_dtoa_r+0xb66>
 80075a8:	e6f7      	b.n	800739a <_dtoa_r+0x962>
 80075aa:	9a00      	ldr	r2, [sp, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d1a5      	bne.n	80074fc <_dtoa_r+0xac4>
 80075b0:	f10a 0a01 	add.w	sl, sl, #1
 80075b4:	2331      	movs	r3, #49	; 0x31
 80075b6:	e779      	b.n	80074ac <_dtoa_r+0xa74>
 80075b8:	4b13      	ldr	r3, [pc, #76]	; (8007608 <_dtoa_r+0xbd0>)
 80075ba:	f7ff baaf 	b.w	8006b1c <_dtoa_r+0xe4>
 80075be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f47f aa86 	bne.w	8006ad2 <_dtoa_r+0x9a>
 80075c6:	4b11      	ldr	r3, [pc, #68]	; (800760c <_dtoa_r+0xbd4>)
 80075c8:	f7ff baa8 	b.w	8006b1c <_dtoa_r+0xe4>
 80075cc:	f1b9 0f00 	cmp.w	r9, #0
 80075d0:	dc03      	bgt.n	80075da <_dtoa_r+0xba2>
 80075d2:	9b05      	ldr	r3, [sp, #20]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	f73f aec9 	bgt.w	800736c <_dtoa_r+0x934>
 80075da:	9d00      	ldr	r5, [sp, #0]
 80075dc:	4631      	mov	r1, r6
 80075de:	4658      	mov	r0, fp
 80075e0:	f7ff f99c 	bl	800691c <quorem>
 80075e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80075e8:	f805 3b01 	strb.w	r3, [r5], #1
 80075ec:	9a00      	ldr	r2, [sp, #0]
 80075ee:	1aaa      	subs	r2, r5, r2
 80075f0:	4591      	cmp	r9, r2
 80075f2:	ddba      	ble.n	800756a <_dtoa_r+0xb32>
 80075f4:	4659      	mov	r1, fp
 80075f6:	2300      	movs	r3, #0
 80075f8:	220a      	movs	r2, #10
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 f876 	bl	80076ec <__multadd>
 8007600:	4683      	mov	fp, r0
 8007602:	e7eb      	b.n	80075dc <_dtoa_r+0xba4>
 8007604:	08009a0f 	.word	0x08009a0f
 8007608:	08009968 	.word	0x08009968
 800760c:	0800998c 	.word	0x0800998c

08007610 <_localeconv_r>:
 8007610:	4800      	ldr	r0, [pc, #0]	; (8007614 <_localeconv_r+0x4>)
 8007612:	4770      	bx	lr
 8007614:	20000168 	.word	0x20000168

08007618 <malloc>:
 8007618:	4b02      	ldr	r3, [pc, #8]	; (8007624 <malloc+0xc>)
 800761a:	4601      	mov	r1, r0
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	f000 bbe1 	b.w	8007de4 <_malloc_r>
 8007622:	bf00      	nop
 8007624:	20000014 	.word	0x20000014

08007628 <_Balloc>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800762c:	4604      	mov	r4, r0
 800762e:	460d      	mov	r5, r1
 8007630:	b976      	cbnz	r6, 8007650 <_Balloc+0x28>
 8007632:	2010      	movs	r0, #16
 8007634:	f7ff fff0 	bl	8007618 <malloc>
 8007638:	4602      	mov	r2, r0
 800763a:	6260      	str	r0, [r4, #36]	; 0x24
 800763c:	b920      	cbnz	r0, 8007648 <_Balloc+0x20>
 800763e:	4b18      	ldr	r3, [pc, #96]	; (80076a0 <_Balloc+0x78>)
 8007640:	4818      	ldr	r0, [pc, #96]	; (80076a4 <_Balloc+0x7c>)
 8007642:	2166      	movs	r1, #102	; 0x66
 8007644:	f000 fd94 	bl	8008170 <__assert_func>
 8007648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800764c:	6006      	str	r6, [r0, #0]
 800764e:	60c6      	str	r6, [r0, #12]
 8007650:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007652:	68f3      	ldr	r3, [r6, #12]
 8007654:	b183      	cbz	r3, 8007678 <_Balloc+0x50>
 8007656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800765e:	b9b8      	cbnz	r0, 8007690 <_Balloc+0x68>
 8007660:	2101      	movs	r1, #1
 8007662:	fa01 f605 	lsl.w	r6, r1, r5
 8007666:	1d72      	adds	r2, r6, #5
 8007668:	0092      	lsls	r2, r2, #2
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fb5a 	bl	8007d24 <_calloc_r>
 8007670:	b160      	cbz	r0, 800768c <_Balloc+0x64>
 8007672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007676:	e00e      	b.n	8007696 <_Balloc+0x6e>
 8007678:	2221      	movs	r2, #33	; 0x21
 800767a:	2104      	movs	r1, #4
 800767c:	4620      	mov	r0, r4
 800767e:	f000 fb51 	bl	8007d24 <_calloc_r>
 8007682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007684:	60f0      	str	r0, [r6, #12]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1e4      	bne.n	8007656 <_Balloc+0x2e>
 800768c:	2000      	movs	r0, #0
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	6802      	ldr	r2, [r0, #0]
 8007692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007696:	2300      	movs	r3, #0
 8007698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800769c:	e7f7      	b.n	800768e <_Balloc+0x66>
 800769e:	bf00      	nop
 80076a0:	08009999 	.word	0x08009999
 80076a4:	08009a20 	.word	0x08009a20

080076a8 <_Bfree>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076ac:	4605      	mov	r5, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	b976      	cbnz	r6, 80076d0 <_Bfree+0x28>
 80076b2:	2010      	movs	r0, #16
 80076b4:	f7ff ffb0 	bl	8007618 <malloc>
 80076b8:	4602      	mov	r2, r0
 80076ba:	6268      	str	r0, [r5, #36]	; 0x24
 80076bc:	b920      	cbnz	r0, 80076c8 <_Bfree+0x20>
 80076be:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <_Bfree+0x3c>)
 80076c0:	4809      	ldr	r0, [pc, #36]	; (80076e8 <_Bfree+0x40>)
 80076c2:	218a      	movs	r1, #138	; 0x8a
 80076c4:	f000 fd54 	bl	8008170 <__assert_func>
 80076c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076cc:	6006      	str	r6, [r0, #0]
 80076ce:	60c6      	str	r6, [r0, #12]
 80076d0:	b13c      	cbz	r4, 80076e2 <_Bfree+0x3a>
 80076d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076d4:	6862      	ldr	r2, [r4, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076dc:	6021      	str	r1, [r4, #0]
 80076de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	08009999 	.word	0x08009999
 80076e8:	08009a20 	.word	0x08009a20

080076ec <__multadd>:
 80076ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f0:	690e      	ldr	r6, [r1, #16]
 80076f2:	4607      	mov	r7, r0
 80076f4:	4698      	mov	r8, r3
 80076f6:	460c      	mov	r4, r1
 80076f8:	f101 0014 	add.w	r0, r1, #20
 80076fc:	2300      	movs	r3, #0
 80076fe:	6805      	ldr	r5, [r0, #0]
 8007700:	b2a9      	uxth	r1, r5
 8007702:	fb02 8101 	mla	r1, r2, r1, r8
 8007706:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800770a:	0c2d      	lsrs	r5, r5, #16
 800770c:	fb02 c505 	mla	r5, r2, r5, ip
 8007710:	b289      	uxth	r1, r1
 8007712:	3301      	adds	r3, #1
 8007714:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007718:	429e      	cmp	r6, r3
 800771a:	f840 1b04 	str.w	r1, [r0], #4
 800771e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007722:	dcec      	bgt.n	80076fe <__multadd+0x12>
 8007724:	f1b8 0f00 	cmp.w	r8, #0
 8007728:	d022      	beq.n	8007770 <__multadd+0x84>
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	42b3      	cmp	r3, r6
 800772e:	dc19      	bgt.n	8007764 <__multadd+0x78>
 8007730:	6861      	ldr	r1, [r4, #4]
 8007732:	4638      	mov	r0, r7
 8007734:	3101      	adds	r1, #1
 8007736:	f7ff ff77 	bl	8007628 <_Balloc>
 800773a:	4605      	mov	r5, r0
 800773c:	b928      	cbnz	r0, 800774a <__multadd+0x5e>
 800773e:	4602      	mov	r2, r0
 8007740:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <__multadd+0x8c>)
 8007742:	480e      	ldr	r0, [pc, #56]	; (800777c <__multadd+0x90>)
 8007744:	21b5      	movs	r1, #181	; 0xb5
 8007746:	f000 fd13 	bl	8008170 <__assert_func>
 800774a:	6922      	ldr	r2, [r4, #16]
 800774c:	3202      	adds	r2, #2
 800774e:	f104 010c 	add.w	r1, r4, #12
 8007752:	0092      	lsls	r2, r2, #2
 8007754:	300c      	adds	r0, #12
 8007756:	f7fe fc41 	bl	8005fdc <memcpy>
 800775a:	4621      	mov	r1, r4
 800775c:	4638      	mov	r0, r7
 800775e:	f7ff ffa3 	bl	80076a8 <_Bfree>
 8007762:	462c      	mov	r4, r5
 8007764:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007768:	3601      	adds	r6, #1
 800776a:	f8c3 8014 	str.w	r8, [r3, #20]
 800776e:	6126      	str	r6, [r4, #16]
 8007770:	4620      	mov	r0, r4
 8007772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007776:	bf00      	nop
 8007778:	08009a0f 	.word	0x08009a0f
 800777c:	08009a20 	.word	0x08009a20

08007780 <__hi0bits>:
 8007780:	0c03      	lsrs	r3, r0, #16
 8007782:	041b      	lsls	r3, r3, #16
 8007784:	b9d3      	cbnz	r3, 80077bc <__hi0bits+0x3c>
 8007786:	0400      	lsls	r0, r0, #16
 8007788:	2310      	movs	r3, #16
 800778a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800778e:	bf04      	itt	eq
 8007790:	0200      	lsleq	r0, r0, #8
 8007792:	3308      	addeq	r3, #8
 8007794:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007798:	bf04      	itt	eq
 800779a:	0100      	lsleq	r0, r0, #4
 800779c:	3304      	addeq	r3, #4
 800779e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80077a2:	bf04      	itt	eq
 80077a4:	0080      	lsleq	r0, r0, #2
 80077a6:	3302      	addeq	r3, #2
 80077a8:	2800      	cmp	r0, #0
 80077aa:	db05      	blt.n	80077b8 <__hi0bits+0x38>
 80077ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80077b0:	f103 0301 	add.w	r3, r3, #1
 80077b4:	bf08      	it	eq
 80077b6:	2320      	moveq	r3, #32
 80077b8:	4618      	mov	r0, r3
 80077ba:	4770      	bx	lr
 80077bc:	2300      	movs	r3, #0
 80077be:	e7e4      	b.n	800778a <__hi0bits+0xa>

080077c0 <__lo0bits>:
 80077c0:	6803      	ldr	r3, [r0, #0]
 80077c2:	f013 0207 	ands.w	r2, r3, #7
 80077c6:	4601      	mov	r1, r0
 80077c8:	d00b      	beq.n	80077e2 <__lo0bits+0x22>
 80077ca:	07da      	lsls	r2, r3, #31
 80077cc:	d424      	bmi.n	8007818 <__lo0bits+0x58>
 80077ce:	0798      	lsls	r0, r3, #30
 80077d0:	bf49      	itett	mi
 80077d2:	085b      	lsrmi	r3, r3, #1
 80077d4:	089b      	lsrpl	r3, r3, #2
 80077d6:	2001      	movmi	r0, #1
 80077d8:	600b      	strmi	r3, [r1, #0]
 80077da:	bf5c      	itt	pl
 80077dc:	600b      	strpl	r3, [r1, #0]
 80077de:	2002      	movpl	r0, #2
 80077e0:	4770      	bx	lr
 80077e2:	b298      	uxth	r0, r3
 80077e4:	b9b0      	cbnz	r0, 8007814 <__lo0bits+0x54>
 80077e6:	0c1b      	lsrs	r3, r3, #16
 80077e8:	2010      	movs	r0, #16
 80077ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077ee:	bf04      	itt	eq
 80077f0:	0a1b      	lsreq	r3, r3, #8
 80077f2:	3008      	addeq	r0, #8
 80077f4:	071a      	lsls	r2, r3, #28
 80077f6:	bf04      	itt	eq
 80077f8:	091b      	lsreq	r3, r3, #4
 80077fa:	3004      	addeq	r0, #4
 80077fc:	079a      	lsls	r2, r3, #30
 80077fe:	bf04      	itt	eq
 8007800:	089b      	lsreq	r3, r3, #2
 8007802:	3002      	addeq	r0, #2
 8007804:	07da      	lsls	r2, r3, #31
 8007806:	d403      	bmi.n	8007810 <__lo0bits+0x50>
 8007808:	085b      	lsrs	r3, r3, #1
 800780a:	f100 0001 	add.w	r0, r0, #1
 800780e:	d005      	beq.n	800781c <__lo0bits+0x5c>
 8007810:	600b      	str	r3, [r1, #0]
 8007812:	4770      	bx	lr
 8007814:	4610      	mov	r0, r2
 8007816:	e7e8      	b.n	80077ea <__lo0bits+0x2a>
 8007818:	2000      	movs	r0, #0
 800781a:	4770      	bx	lr
 800781c:	2020      	movs	r0, #32
 800781e:	4770      	bx	lr

08007820 <__i2b>:
 8007820:	b510      	push	{r4, lr}
 8007822:	460c      	mov	r4, r1
 8007824:	2101      	movs	r1, #1
 8007826:	f7ff feff 	bl	8007628 <_Balloc>
 800782a:	4602      	mov	r2, r0
 800782c:	b928      	cbnz	r0, 800783a <__i2b+0x1a>
 800782e:	4b05      	ldr	r3, [pc, #20]	; (8007844 <__i2b+0x24>)
 8007830:	4805      	ldr	r0, [pc, #20]	; (8007848 <__i2b+0x28>)
 8007832:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007836:	f000 fc9b 	bl	8008170 <__assert_func>
 800783a:	2301      	movs	r3, #1
 800783c:	6144      	str	r4, [r0, #20]
 800783e:	6103      	str	r3, [r0, #16]
 8007840:	bd10      	pop	{r4, pc}
 8007842:	bf00      	nop
 8007844:	08009a0f 	.word	0x08009a0f
 8007848:	08009a20 	.word	0x08009a20

0800784c <__multiply>:
 800784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	4614      	mov	r4, r2
 8007852:	690a      	ldr	r2, [r1, #16]
 8007854:	6923      	ldr	r3, [r4, #16]
 8007856:	429a      	cmp	r2, r3
 8007858:	bfb8      	it	lt
 800785a:	460b      	movlt	r3, r1
 800785c:	460d      	mov	r5, r1
 800785e:	bfbc      	itt	lt
 8007860:	4625      	movlt	r5, r4
 8007862:	461c      	movlt	r4, r3
 8007864:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007868:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800786c:	68ab      	ldr	r3, [r5, #8]
 800786e:	6869      	ldr	r1, [r5, #4]
 8007870:	eb0a 0709 	add.w	r7, sl, r9
 8007874:	42bb      	cmp	r3, r7
 8007876:	b085      	sub	sp, #20
 8007878:	bfb8      	it	lt
 800787a:	3101      	addlt	r1, #1
 800787c:	f7ff fed4 	bl	8007628 <_Balloc>
 8007880:	b930      	cbnz	r0, 8007890 <__multiply+0x44>
 8007882:	4602      	mov	r2, r0
 8007884:	4b42      	ldr	r3, [pc, #264]	; (8007990 <__multiply+0x144>)
 8007886:	4843      	ldr	r0, [pc, #268]	; (8007994 <__multiply+0x148>)
 8007888:	f240 115d 	movw	r1, #349	; 0x15d
 800788c:	f000 fc70 	bl	8008170 <__assert_func>
 8007890:	f100 0614 	add.w	r6, r0, #20
 8007894:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007898:	4633      	mov	r3, r6
 800789a:	2200      	movs	r2, #0
 800789c:	4543      	cmp	r3, r8
 800789e:	d31e      	bcc.n	80078de <__multiply+0x92>
 80078a0:	f105 0c14 	add.w	ip, r5, #20
 80078a4:	f104 0314 	add.w	r3, r4, #20
 80078a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80078ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80078b0:	9202      	str	r2, [sp, #8]
 80078b2:	ebac 0205 	sub.w	r2, ip, r5
 80078b6:	3a15      	subs	r2, #21
 80078b8:	f022 0203 	bic.w	r2, r2, #3
 80078bc:	3204      	adds	r2, #4
 80078be:	f105 0115 	add.w	r1, r5, #21
 80078c2:	458c      	cmp	ip, r1
 80078c4:	bf38      	it	cc
 80078c6:	2204      	movcc	r2, #4
 80078c8:	9201      	str	r2, [sp, #4]
 80078ca:	9a02      	ldr	r2, [sp, #8]
 80078cc:	9303      	str	r3, [sp, #12]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d808      	bhi.n	80078e4 <__multiply+0x98>
 80078d2:	2f00      	cmp	r7, #0
 80078d4:	dc55      	bgt.n	8007982 <__multiply+0x136>
 80078d6:	6107      	str	r7, [r0, #16]
 80078d8:	b005      	add	sp, #20
 80078da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078de:	f843 2b04 	str.w	r2, [r3], #4
 80078e2:	e7db      	b.n	800789c <__multiply+0x50>
 80078e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80078e8:	f1ba 0f00 	cmp.w	sl, #0
 80078ec:	d020      	beq.n	8007930 <__multiply+0xe4>
 80078ee:	f105 0e14 	add.w	lr, r5, #20
 80078f2:	46b1      	mov	r9, r6
 80078f4:	2200      	movs	r2, #0
 80078f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80078fa:	f8d9 b000 	ldr.w	fp, [r9]
 80078fe:	b2a1      	uxth	r1, r4
 8007900:	fa1f fb8b 	uxth.w	fp, fp
 8007904:	fb0a b101 	mla	r1, sl, r1, fp
 8007908:	4411      	add	r1, r2
 800790a:	f8d9 2000 	ldr.w	r2, [r9]
 800790e:	0c24      	lsrs	r4, r4, #16
 8007910:	0c12      	lsrs	r2, r2, #16
 8007912:	fb0a 2404 	mla	r4, sl, r4, r2
 8007916:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800791a:	b289      	uxth	r1, r1
 800791c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007920:	45f4      	cmp	ip, lr
 8007922:	f849 1b04 	str.w	r1, [r9], #4
 8007926:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800792a:	d8e4      	bhi.n	80078f6 <__multiply+0xaa>
 800792c:	9901      	ldr	r1, [sp, #4]
 800792e:	5072      	str	r2, [r6, r1]
 8007930:	9a03      	ldr	r2, [sp, #12]
 8007932:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007936:	3304      	adds	r3, #4
 8007938:	f1b9 0f00 	cmp.w	r9, #0
 800793c:	d01f      	beq.n	800797e <__multiply+0x132>
 800793e:	6834      	ldr	r4, [r6, #0]
 8007940:	f105 0114 	add.w	r1, r5, #20
 8007944:	46b6      	mov	lr, r6
 8007946:	f04f 0a00 	mov.w	sl, #0
 800794a:	880a      	ldrh	r2, [r1, #0]
 800794c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007950:	fb09 b202 	mla	r2, r9, r2, fp
 8007954:	4492      	add	sl, r2
 8007956:	b2a4      	uxth	r4, r4
 8007958:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800795c:	f84e 4b04 	str.w	r4, [lr], #4
 8007960:	f851 4b04 	ldr.w	r4, [r1], #4
 8007964:	f8be 2000 	ldrh.w	r2, [lr]
 8007968:	0c24      	lsrs	r4, r4, #16
 800796a:	fb09 2404 	mla	r4, r9, r4, r2
 800796e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007972:	458c      	cmp	ip, r1
 8007974:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007978:	d8e7      	bhi.n	800794a <__multiply+0xfe>
 800797a:	9a01      	ldr	r2, [sp, #4]
 800797c:	50b4      	str	r4, [r6, r2]
 800797e:	3604      	adds	r6, #4
 8007980:	e7a3      	b.n	80078ca <__multiply+0x7e>
 8007982:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1a5      	bne.n	80078d6 <__multiply+0x8a>
 800798a:	3f01      	subs	r7, #1
 800798c:	e7a1      	b.n	80078d2 <__multiply+0x86>
 800798e:	bf00      	nop
 8007990:	08009a0f 	.word	0x08009a0f
 8007994:	08009a20 	.word	0x08009a20

08007998 <__pow5mult>:
 8007998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800799c:	4615      	mov	r5, r2
 800799e:	f012 0203 	ands.w	r2, r2, #3
 80079a2:	4606      	mov	r6, r0
 80079a4:	460f      	mov	r7, r1
 80079a6:	d007      	beq.n	80079b8 <__pow5mult+0x20>
 80079a8:	4c25      	ldr	r4, [pc, #148]	; (8007a40 <__pow5mult+0xa8>)
 80079aa:	3a01      	subs	r2, #1
 80079ac:	2300      	movs	r3, #0
 80079ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079b2:	f7ff fe9b 	bl	80076ec <__multadd>
 80079b6:	4607      	mov	r7, r0
 80079b8:	10ad      	asrs	r5, r5, #2
 80079ba:	d03d      	beq.n	8007a38 <__pow5mult+0xa0>
 80079bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079be:	b97c      	cbnz	r4, 80079e0 <__pow5mult+0x48>
 80079c0:	2010      	movs	r0, #16
 80079c2:	f7ff fe29 	bl	8007618 <malloc>
 80079c6:	4602      	mov	r2, r0
 80079c8:	6270      	str	r0, [r6, #36]	; 0x24
 80079ca:	b928      	cbnz	r0, 80079d8 <__pow5mult+0x40>
 80079cc:	4b1d      	ldr	r3, [pc, #116]	; (8007a44 <__pow5mult+0xac>)
 80079ce:	481e      	ldr	r0, [pc, #120]	; (8007a48 <__pow5mult+0xb0>)
 80079d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80079d4:	f000 fbcc 	bl	8008170 <__assert_func>
 80079d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079dc:	6004      	str	r4, [r0, #0]
 80079de:	60c4      	str	r4, [r0, #12]
 80079e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079e8:	b94c      	cbnz	r4, 80079fe <__pow5mult+0x66>
 80079ea:	f240 2171 	movw	r1, #625	; 0x271
 80079ee:	4630      	mov	r0, r6
 80079f0:	f7ff ff16 	bl	8007820 <__i2b>
 80079f4:	2300      	movs	r3, #0
 80079f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80079fa:	4604      	mov	r4, r0
 80079fc:	6003      	str	r3, [r0, #0]
 80079fe:	f04f 0900 	mov.w	r9, #0
 8007a02:	07eb      	lsls	r3, r5, #31
 8007a04:	d50a      	bpl.n	8007a1c <__pow5mult+0x84>
 8007a06:	4639      	mov	r1, r7
 8007a08:	4622      	mov	r2, r4
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff ff1e 	bl	800784c <__multiply>
 8007a10:	4639      	mov	r1, r7
 8007a12:	4680      	mov	r8, r0
 8007a14:	4630      	mov	r0, r6
 8007a16:	f7ff fe47 	bl	80076a8 <_Bfree>
 8007a1a:	4647      	mov	r7, r8
 8007a1c:	106d      	asrs	r5, r5, #1
 8007a1e:	d00b      	beq.n	8007a38 <__pow5mult+0xa0>
 8007a20:	6820      	ldr	r0, [r4, #0]
 8007a22:	b938      	cbnz	r0, 8007a34 <__pow5mult+0x9c>
 8007a24:	4622      	mov	r2, r4
 8007a26:	4621      	mov	r1, r4
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f7ff ff0f 	bl	800784c <__multiply>
 8007a2e:	6020      	str	r0, [r4, #0]
 8007a30:	f8c0 9000 	str.w	r9, [r0]
 8007a34:	4604      	mov	r4, r0
 8007a36:	e7e4      	b.n	8007a02 <__pow5mult+0x6a>
 8007a38:	4638      	mov	r0, r7
 8007a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3e:	bf00      	nop
 8007a40:	08009b70 	.word	0x08009b70
 8007a44:	08009999 	.word	0x08009999
 8007a48:	08009a20 	.word	0x08009a20

08007a4c <__lshift>:
 8007a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a50:	460c      	mov	r4, r1
 8007a52:	6849      	ldr	r1, [r1, #4]
 8007a54:	6923      	ldr	r3, [r4, #16]
 8007a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a5a:	68a3      	ldr	r3, [r4, #8]
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	4691      	mov	r9, r2
 8007a60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a64:	f108 0601 	add.w	r6, r8, #1
 8007a68:	42b3      	cmp	r3, r6
 8007a6a:	db0b      	blt.n	8007a84 <__lshift+0x38>
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f7ff fddb 	bl	8007628 <_Balloc>
 8007a72:	4605      	mov	r5, r0
 8007a74:	b948      	cbnz	r0, 8007a8a <__lshift+0x3e>
 8007a76:	4602      	mov	r2, r0
 8007a78:	4b28      	ldr	r3, [pc, #160]	; (8007b1c <__lshift+0xd0>)
 8007a7a:	4829      	ldr	r0, [pc, #164]	; (8007b20 <__lshift+0xd4>)
 8007a7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a80:	f000 fb76 	bl	8008170 <__assert_func>
 8007a84:	3101      	adds	r1, #1
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	e7ee      	b.n	8007a68 <__lshift+0x1c>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f100 0114 	add.w	r1, r0, #20
 8007a90:	f100 0210 	add.w	r2, r0, #16
 8007a94:	4618      	mov	r0, r3
 8007a96:	4553      	cmp	r3, sl
 8007a98:	db33      	blt.n	8007b02 <__lshift+0xb6>
 8007a9a:	6920      	ldr	r0, [r4, #16]
 8007a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007aa0:	f104 0314 	add.w	r3, r4, #20
 8007aa4:	f019 091f 	ands.w	r9, r9, #31
 8007aa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007aac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ab0:	d02b      	beq.n	8007b0a <__lshift+0xbe>
 8007ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ab6:	468a      	mov	sl, r1
 8007ab8:	2200      	movs	r2, #0
 8007aba:	6818      	ldr	r0, [r3, #0]
 8007abc:	fa00 f009 	lsl.w	r0, r0, r9
 8007ac0:	4302      	orrs	r2, r0
 8007ac2:	f84a 2b04 	str.w	r2, [sl], #4
 8007ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aca:	459c      	cmp	ip, r3
 8007acc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ad0:	d8f3      	bhi.n	8007aba <__lshift+0x6e>
 8007ad2:	ebac 0304 	sub.w	r3, ip, r4
 8007ad6:	3b15      	subs	r3, #21
 8007ad8:	f023 0303 	bic.w	r3, r3, #3
 8007adc:	3304      	adds	r3, #4
 8007ade:	f104 0015 	add.w	r0, r4, #21
 8007ae2:	4584      	cmp	ip, r0
 8007ae4:	bf38      	it	cc
 8007ae6:	2304      	movcc	r3, #4
 8007ae8:	50ca      	str	r2, [r1, r3]
 8007aea:	b10a      	cbz	r2, 8007af0 <__lshift+0xa4>
 8007aec:	f108 0602 	add.w	r6, r8, #2
 8007af0:	3e01      	subs	r6, #1
 8007af2:	4638      	mov	r0, r7
 8007af4:	612e      	str	r6, [r5, #16]
 8007af6:	4621      	mov	r1, r4
 8007af8:	f7ff fdd6 	bl	80076a8 <_Bfree>
 8007afc:	4628      	mov	r0, r5
 8007afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b02:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b06:	3301      	adds	r3, #1
 8007b08:	e7c5      	b.n	8007a96 <__lshift+0x4a>
 8007b0a:	3904      	subs	r1, #4
 8007b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b10:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b14:	459c      	cmp	ip, r3
 8007b16:	d8f9      	bhi.n	8007b0c <__lshift+0xc0>
 8007b18:	e7ea      	b.n	8007af0 <__lshift+0xa4>
 8007b1a:	bf00      	nop
 8007b1c:	08009a0f 	.word	0x08009a0f
 8007b20:	08009a20 	.word	0x08009a20

08007b24 <__mcmp>:
 8007b24:	b530      	push	{r4, r5, lr}
 8007b26:	6902      	ldr	r2, [r0, #16]
 8007b28:	690c      	ldr	r4, [r1, #16]
 8007b2a:	1b12      	subs	r2, r2, r4
 8007b2c:	d10e      	bne.n	8007b4c <__mcmp+0x28>
 8007b2e:	f100 0314 	add.w	r3, r0, #20
 8007b32:	3114      	adds	r1, #20
 8007b34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007b38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007b40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b44:	42a5      	cmp	r5, r4
 8007b46:	d003      	beq.n	8007b50 <__mcmp+0x2c>
 8007b48:	d305      	bcc.n	8007b56 <__mcmp+0x32>
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	bd30      	pop	{r4, r5, pc}
 8007b50:	4283      	cmp	r3, r0
 8007b52:	d3f3      	bcc.n	8007b3c <__mcmp+0x18>
 8007b54:	e7fa      	b.n	8007b4c <__mcmp+0x28>
 8007b56:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5a:	e7f7      	b.n	8007b4c <__mcmp+0x28>

08007b5c <__mdiff>:
 8007b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b60:	460c      	mov	r4, r1
 8007b62:	4606      	mov	r6, r0
 8007b64:	4611      	mov	r1, r2
 8007b66:	4620      	mov	r0, r4
 8007b68:	4617      	mov	r7, r2
 8007b6a:	f7ff ffdb 	bl	8007b24 <__mcmp>
 8007b6e:	1e05      	subs	r5, r0, #0
 8007b70:	d110      	bne.n	8007b94 <__mdiff+0x38>
 8007b72:	4629      	mov	r1, r5
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7ff fd57 	bl	8007628 <_Balloc>
 8007b7a:	b930      	cbnz	r0, 8007b8a <__mdiff+0x2e>
 8007b7c:	4b39      	ldr	r3, [pc, #228]	; (8007c64 <__mdiff+0x108>)
 8007b7e:	4602      	mov	r2, r0
 8007b80:	f240 2132 	movw	r1, #562	; 0x232
 8007b84:	4838      	ldr	r0, [pc, #224]	; (8007c68 <__mdiff+0x10c>)
 8007b86:	f000 faf3 	bl	8008170 <__assert_func>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	bfa4      	itt	ge
 8007b96:	463b      	movge	r3, r7
 8007b98:	4627      	movge	r7, r4
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	bfa6      	itte	ge
 8007ba0:	461c      	movge	r4, r3
 8007ba2:	2500      	movge	r5, #0
 8007ba4:	2501      	movlt	r5, #1
 8007ba6:	f7ff fd3f 	bl	8007628 <_Balloc>
 8007baa:	b920      	cbnz	r0, 8007bb6 <__mdiff+0x5a>
 8007bac:	4b2d      	ldr	r3, [pc, #180]	; (8007c64 <__mdiff+0x108>)
 8007bae:	4602      	mov	r2, r0
 8007bb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007bb4:	e7e6      	b.n	8007b84 <__mdiff+0x28>
 8007bb6:	693e      	ldr	r6, [r7, #16]
 8007bb8:	60c5      	str	r5, [r0, #12]
 8007bba:	6925      	ldr	r5, [r4, #16]
 8007bbc:	f107 0114 	add.w	r1, r7, #20
 8007bc0:	f104 0914 	add.w	r9, r4, #20
 8007bc4:	f100 0e14 	add.w	lr, r0, #20
 8007bc8:	f107 0210 	add.w	r2, r7, #16
 8007bcc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007bd0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007bd4:	46f2      	mov	sl, lr
 8007bd6:	2700      	movs	r7, #0
 8007bd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007be0:	fa1f f883 	uxth.w	r8, r3
 8007be4:	fa17 f78b 	uxtah	r7, r7, fp
 8007be8:	0c1b      	lsrs	r3, r3, #16
 8007bea:	eba7 0808 	sub.w	r8, r7, r8
 8007bee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007bf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007bf6:	fa1f f888 	uxth.w	r8, r8
 8007bfa:	141f      	asrs	r7, r3, #16
 8007bfc:	454d      	cmp	r5, r9
 8007bfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007c02:	f84a 3b04 	str.w	r3, [sl], #4
 8007c06:	d8e7      	bhi.n	8007bd8 <__mdiff+0x7c>
 8007c08:	1b2b      	subs	r3, r5, r4
 8007c0a:	3b15      	subs	r3, #21
 8007c0c:	f023 0303 	bic.w	r3, r3, #3
 8007c10:	3304      	adds	r3, #4
 8007c12:	3415      	adds	r4, #21
 8007c14:	42a5      	cmp	r5, r4
 8007c16:	bf38      	it	cc
 8007c18:	2304      	movcc	r3, #4
 8007c1a:	4419      	add	r1, r3
 8007c1c:	4473      	add	r3, lr
 8007c1e:	469e      	mov	lr, r3
 8007c20:	460d      	mov	r5, r1
 8007c22:	4565      	cmp	r5, ip
 8007c24:	d30e      	bcc.n	8007c44 <__mdiff+0xe8>
 8007c26:	f10c 0203 	add.w	r2, ip, #3
 8007c2a:	1a52      	subs	r2, r2, r1
 8007c2c:	f022 0203 	bic.w	r2, r2, #3
 8007c30:	3903      	subs	r1, #3
 8007c32:	458c      	cmp	ip, r1
 8007c34:	bf38      	it	cc
 8007c36:	2200      	movcc	r2, #0
 8007c38:	441a      	add	r2, r3
 8007c3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007c3e:	b17b      	cbz	r3, 8007c60 <__mdiff+0x104>
 8007c40:	6106      	str	r6, [r0, #16]
 8007c42:	e7a5      	b.n	8007b90 <__mdiff+0x34>
 8007c44:	f855 8b04 	ldr.w	r8, [r5], #4
 8007c48:	fa17 f488 	uxtah	r4, r7, r8
 8007c4c:	1422      	asrs	r2, r4, #16
 8007c4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007c52:	b2a4      	uxth	r4, r4
 8007c54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007c58:	f84e 4b04 	str.w	r4, [lr], #4
 8007c5c:	1417      	asrs	r7, r2, #16
 8007c5e:	e7e0      	b.n	8007c22 <__mdiff+0xc6>
 8007c60:	3e01      	subs	r6, #1
 8007c62:	e7ea      	b.n	8007c3a <__mdiff+0xde>
 8007c64:	08009a0f 	.word	0x08009a0f
 8007c68:	08009a20 	.word	0x08009a20

08007c6c <__d2b>:
 8007c6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c70:	4689      	mov	r9, r1
 8007c72:	2101      	movs	r1, #1
 8007c74:	ec57 6b10 	vmov	r6, r7, d0
 8007c78:	4690      	mov	r8, r2
 8007c7a:	f7ff fcd5 	bl	8007628 <_Balloc>
 8007c7e:	4604      	mov	r4, r0
 8007c80:	b930      	cbnz	r0, 8007c90 <__d2b+0x24>
 8007c82:	4602      	mov	r2, r0
 8007c84:	4b25      	ldr	r3, [pc, #148]	; (8007d1c <__d2b+0xb0>)
 8007c86:	4826      	ldr	r0, [pc, #152]	; (8007d20 <__d2b+0xb4>)
 8007c88:	f240 310a 	movw	r1, #778	; 0x30a
 8007c8c:	f000 fa70 	bl	8008170 <__assert_func>
 8007c90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c98:	bb35      	cbnz	r5, 8007ce8 <__d2b+0x7c>
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	d028      	beq.n	8007cf2 <__d2b+0x86>
 8007ca0:	4668      	mov	r0, sp
 8007ca2:	9600      	str	r6, [sp, #0]
 8007ca4:	f7ff fd8c 	bl	80077c0 <__lo0bits>
 8007ca8:	9900      	ldr	r1, [sp, #0]
 8007caa:	b300      	cbz	r0, 8007cee <__d2b+0x82>
 8007cac:	9a01      	ldr	r2, [sp, #4]
 8007cae:	f1c0 0320 	rsb	r3, r0, #32
 8007cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	40c2      	lsrs	r2, r0
 8007cba:	6163      	str	r3, [r4, #20]
 8007cbc:	9201      	str	r2, [sp, #4]
 8007cbe:	9b01      	ldr	r3, [sp, #4]
 8007cc0:	61a3      	str	r3, [r4, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bf14      	ite	ne
 8007cc6:	2202      	movne	r2, #2
 8007cc8:	2201      	moveq	r2, #1
 8007cca:	6122      	str	r2, [r4, #16]
 8007ccc:	b1d5      	cbz	r5, 8007d04 <__d2b+0x98>
 8007cce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cd2:	4405      	add	r5, r0
 8007cd4:	f8c9 5000 	str.w	r5, [r9]
 8007cd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cdc:	f8c8 0000 	str.w	r0, [r8]
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	b003      	add	sp, #12
 8007ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cec:	e7d5      	b.n	8007c9a <__d2b+0x2e>
 8007cee:	6161      	str	r1, [r4, #20]
 8007cf0:	e7e5      	b.n	8007cbe <__d2b+0x52>
 8007cf2:	a801      	add	r0, sp, #4
 8007cf4:	f7ff fd64 	bl	80077c0 <__lo0bits>
 8007cf8:	9b01      	ldr	r3, [sp, #4]
 8007cfa:	6163      	str	r3, [r4, #20]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	6122      	str	r2, [r4, #16]
 8007d00:	3020      	adds	r0, #32
 8007d02:	e7e3      	b.n	8007ccc <__d2b+0x60>
 8007d04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d0c:	f8c9 0000 	str.w	r0, [r9]
 8007d10:	6918      	ldr	r0, [r3, #16]
 8007d12:	f7ff fd35 	bl	8007780 <__hi0bits>
 8007d16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d1a:	e7df      	b.n	8007cdc <__d2b+0x70>
 8007d1c:	08009a0f 	.word	0x08009a0f
 8007d20:	08009a20 	.word	0x08009a20

08007d24 <_calloc_r>:
 8007d24:	b513      	push	{r0, r1, r4, lr}
 8007d26:	434a      	muls	r2, r1
 8007d28:	4611      	mov	r1, r2
 8007d2a:	9201      	str	r2, [sp, #4]
 8007d2c:	f000 f85a 	bl	8007de4 <_malloc_r>
 8007d30:	4604      	mov	r4, r0
 8007d32:	b118      	cbz	r0, 8007d3c <_calloc_r+0x18>
 8007d34:	9a01      	ldr	r2, [sp, #4]
 8007d36:	2100      	movs	r1, #0
 8007d38:	f7fe f95e 	bl	8005ff8 <memset>
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	b002      	add	sp, #8
 8007d40:	bd10      	pop	{r4, pc}
	...

08007d44 <_free_r>:
 8007d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d46:	2900      	cmp	r1, #0
 8007d48:	d048      	beq.n	8007ddc <_free_r+0x98>
 8007d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d4e:	9001      	str	r0, [sp, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f1a1 0404 	sub.w	r4, r1, #4
 8007d56:	bfb8      	it	lt
 8007d58:	18e4      	addlt	r4, r4, r3
 8007d5a:	f000 fa65 	bl	8008228 <__malloc_lock>
 8007d5e:	4a20      	ldr	r2, [pc, #128]	; (8007de0 <_free_r+0x9c>)
 8007d60:	9801      	ldr	r0, [sp, #4]
 8007d62:	6813      	ldr	r3, [r2, #0]
 8007d64:	4615      	mov	r5, r2
 8007d66:	b933      	cbnz	r3, 8007d76 <_free_r+0x32>
 8007d68:	6063      	str	r3, [r4, #4]
 8007d6a:	6014      	str	r4, [r2, #0]
 8007d6c:	b003      	add	sp, #12
 8007d6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d72:	f000 ba5f 	b.w	8008234 <__malloc_unlock>
 8007d76:	42a3      	cmp	r3, r4
 8007d78:	d90b      	bls.n	8007d92 <_free_r+0x4e>
 8007d7a:	6821      	ldr	r1, [r4, #0]
 8007d7c:	1862      	adds	r2, r4, r1
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	bf04      	itt	eq
 8007d82:	681a      	ldreq	r2, [r3, #0]
 8007d84:	685b      	ldreq	r3, [r3, #4]
 8007d86:	6063      	str	r3, [r4, #4]
 8007d88:	bf04      	itt	eq
 8007d8a:	1852      	addeq	r2, r2, r1
 8007d8c:	6022      	streq	r2, [r4, #0]
 8007d8e:	602c      	str	r4, [r5, #0]
 8007d90:	e7ec      	b.n	8007d6c <_free_r+0x28>
 8007d92:	461a      	mov	r2, r3
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	b10b      	cbz	r3, 8007d9c <_free_r+0x58>
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	d9fa      	bls.n	8007d92 <_free_r+0x4e>
 8007d9c:	6811      	ldr	r1, [r2, #0]
 8007d9e:	1855      	adds	r5, r2, r1
 8007da0:	42a5      	cmp	r5, r4
 8007da2:	d10b      	bne.n	8007dbc <_free_r+0x78>
 8007da4:	6824      	ldr	r4, [r4, #0]
 8007da6:	4421      	add	r1, r4
 8007da8:	1854      	adds	r4, r2, r1
 8007daa:	42a3      	cmp	r3, r4
 8007dac:	6011      	str	r1, [r2, #0]
 8007dae:	d1dd      	bne.n	8007d6c <_free_r+0x28>
 8007db0:	681c      	ldr	r4, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	6053      	str	r3, [r2, #4]
 8007db6:	4421      	add	r1, r4
 8007db8:	6011      	str	r1, [r2, #0]
 8007dba:	e7d7      	b.n	8007d6c <_free_r+0x28>
 8007dbc:	d902      	bls.n	8007dc4 <_free_r+0x80>
 8007dbe:	230c      	movs	r3, #12
 8007dc0:	6003      	str	r3, [r0, #0]
 8007dc2:	e7d3      	b.n	8007d6c <_free_r+0x28>
 8007dc4:	6825      	ldr	r5, [r4, #0]
 8007dc6:	1961      	adds	r1, r4, r5
 8007dc8:	428b      	cmp	r3, r1
 8007dca:	bf04      	itt	eq
 8007dcc:	6819      	ldreq	r1, [r3, #0]
 8007dce:	685b      	ldreq	r3, [r3, #4]
 8007dd0:	6063      	str	r3, [r4, #4]
 8007dd2:	bf04      	itt	eq
 8007dd4:	1949      	addeq	r1, r1, r5
 8007dd6:	6021      	streq	r1, [r4, #0]
 8007dd8:	6054      	str	r4, [r2, #4]
 8007dda:	e7c7      	b.n	8007d6c <_free_r+0x28>
 8007ddc:	b003      	add	sp, #12
 8007dde:	bd30      	pop	{r4, r5, pc}
 8007de0:	200006c0 	.word	0x200006c0

08007de4 <_malloc_r>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	1ccd      	adds	r5, r1, #3
 8007de8:	f025 0503 	bic.w	r5, r5, #3
 8007dec:	3508      	adds	r5, #8
 8007dee:	2d0c      	cmp	r5, #12
 8007df0:	bf38      	it	cc
 8007df2:	250c      	movcc	r5, #12
 8007df4:	2d00      	cmp	r5, #0
 8007df6:	4606      	mov	r6, r0
 8007df8:	db01      	blt.n	8007dfe <_malloc_r+0x1a>
 8007dfa:	42a9      	cmp	r1, r5
 8007dfc:	d903      	bls.n	8007e06 <_malloc_r+0x22>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	6033      	str	r3, [r6, #0]
 8007e02:	2000      	movs	r0, #0
 8007e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e06:	f000 fa0f 	bl	8008228 <__malloc_lock>
 8007e0a:	4921      	ldr	r1, [pc, #132]	; (8007e90 <_malloc_r+0xac>)
 8007e0c:	680a      	ldr	r2, [r1, #0]
 8007e0e:	4614      	mov	r4, r2
 8007e10:	b99c      	cbnz	r4, 8007e3a <_malloc_r+0x56>
 8007e12:	4f20      	ldr	r7, [pc, #128]	; (8007e94 <_malloc_r+0xb0>)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	b923      	cbnz	r3, 8007e22 <_malloc_r+0x3e>
 8007e18:	4621      	mov	r1, r4
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	f000 f998 	bl	8008150 <_sbrk_r>
 8007e20:	6038      	str	r0, [r7, #0]
 8007e22:	4629      	mov	r1, r5
 8007e24:	4630      	mov	r0, r6
 8007e26:	f000 f993 	bl	8008150 <_sbrk_r>
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	d123      	bne.n	8007e76 <_malloc_r+0x92>
 8007e2e:	230c      	movs	r3, #12
 8007e30:	6033      	str	r3, [r6, #0]
 8007e32:	4630      	mov	r0, r6
 8007e34:	f000 f9fe 	bl	8008234 <__malloc_unlock>
 8007e38:	e7e3      	b.n	8007e02 <_malloc_r+0x1e>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	1b5b      	subs	r3, r3, r5
 8007e3e:	d417      	bmi.n	8007e70 <_malloc_r+0x8c>
 8007e40:	2b0b      	cmp	r3, #11
 8007e42:	d903      	bls.n	8007e4c <_malloc_r+0x68>
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	441c      	add	r4, r3
 8007e48:	6025      	str	r5, [r4, #0]
 8007e4a:	e004      	b.n	8007e56 <_malloc_r+0x72>
 8007e4c:	6863      	ldr	r3, [r4, #4]
 8007e4e:	42a2      	cmp	r2, r4
 8007e50:	bf0c      	ite	eq
 8007e52:	600b      	streq	r3, [r1, #0]
 8007e54:	6053      	strne	r3, [r2, #4]
 8007e56:	4630      	mov	r0, r6
 8007e58:	f000 f9ec 	bl	8008234 <__malloc_unlock>
 8007e5c:	f104 000b 	add.w	r0, r4, #11
 8007e60:	1d23      	adds	r3, r4, #4
 8007e62:	f020 0007 	bic.w	r0, r0, #7
 8007e66:	1ac2      	subs	r2, r0, r3
 8007e68:	d0cc      	beq.n	8007e04 <_malloc_r+0x20>
 8007e6a:	1a1b      	subs	r3, r3, r0
 8007e6c:	50a3      	str	r3, [r4, r2]
 8007e6e:	e7c9      	b.n	8007e04 <_malloc_r+0x20>
 8007e70:	4622      	mov	r2, r4
 8007e72:	6864      	ldr	r4, [r4, #4]
 8007e74:	e7cc      	b.n	8007e10 <_malloc_r+0x2c>
 8007e76:	1cc4      	adds	r4, r0, #3
 8007e78:	f024 0403 	bic.w	r4, r4, #3
 8007e7c:	42a0      	cmp	r0, r4
 8007e7e:	d0e3      	beq.n	8007e48 <_malloc_r+0x64>
 8007e80:	1a21      	subs	r1, r4, r0
 8007e82:	4630      	mov	r0, r6
 8007e84:	f000 f964 	bl	8008150 <_sbrk_r>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d1dd      	bne.n	8007e48 <_malloc_r+0x64>
 8007e8c:	e7cf      	b.n	8007e2e <_malloc_r+0x4a>
 8007e8e:	bf00      	nop
 8007e90:	200006c0 	.word	0x200006c0
 8007e94:	200006c4 	.word	0x200006c4

08007e98 <__ssputs_r>:
 8007e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9c:	688e      	ldr	r6, [r1, #8]
 8007e9e:	429e      	cmp	r6, r3
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	4690      	mov	r8, r2
 8007ea6:	461f      	mov	r7, r3
 8007ea8:	d838      	bhi.n	8007f1c <__ssputs_r+0x84>
 8007eaa:	898a      	ldrh	r2, [r1, #12]
 8007eac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eb0:	d032      	beq.n	8007f18 <__ssputs_r+0x80>
 8007eb2:	6825      	ldr	r5, [r4, #0]
 8007eb4:	6909      	ldr	r1, [r1, #16]
 8007eb6:	eba5 0901 	sub.w	r9, r5, r1
 8007eba:	6965      	ldr	r5, [r4, #20]
 8007ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ec0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	444b      	add	r3, r9
 8007ec8:	106d      	asrs	r5, r5, #1
 8007eca:	429d      	cmp	r5, r3
 8007ecc:	bf38      	it	cc
 8007ece:	461d      	movcc	r5, r3
 8007ed0:	0553      	lsls	r3, r2, #21
 8007ed2:	d531      	bpl.n	8007f38 <__ssputs_r+0xa0>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f7ff ff85 	bl	8007de4 <_malloc_r>
 8007eda:	4606      	mov	r6, r0
 8007edc:	b950      	cbnz	r0, 8007ef4 <__ssputs_r+0x5c>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	f8ca 3000 	str.w	r3, [sl]
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef4:	6921      	ldr	r1, [r4, #16]
 8007ef6:	464a      	mov	r2, r9
 8007ef8:	f7fe f870 	bl	8005fdc <memcpy>
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f06:	81a3      	strh	r3, [r4, #12]
 8007f08:	6126      	str	r6, [r4, #16]
 8007f0a:	6165      	str	r5, [r4, #20]
 8007f0c:	444e      	add	r6, r9
 8007f0e:	eba5 0509 	sub.w	r5, r5, r9
 8007f12:	6026      	str	r6, [r4, #0]
 8007f14:	60a5      	str	r5, [r4, #8]
 8007f16:	463e      	mov	r6, r7
 8007f18:	42be      	cmp	r6, r7
 8007f1a:	d900      	bls.n	8007f1e <__ssputs_r+0x86>
 8007f1c:	463e      	mov	r6, r7
 8007f1e:	4632      	mov	r2, r6
 8007f20:	6820      	ldr	r0, [r4, #0]
 8007f22:	4641      	mov	r1, r8
 8007f24:	f000 f966 	bl	80081f4 <memmove>
 8007f28:	68a3      	ldr	r3, [r4, #8]
 8007f2a:	6822      	ldr	r2, [r4, #0]
 8007f2c:	1b9b      	subs	r3, r3, r6
 8007f2e:	4432      	add	r2, r6
 8007f30:	60a3      	str	r3, [r4, #8]
 8007f32:	6022      	str	r2, [r4, #0]
 8007f34:	2000      	movs	r0, #0
 8007f36:	e7db      	b.n	8007ef0 <__ssputs_r+0x58>
 8007f38:	462a      	mov	r2, r5
 8007f3a:	f000 f981 	bl	8008240 <_realloc_r>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1e1      	bne.n	8007f08 <__ssputs_r+0x70>
 8007f44:	6921      	ldr	r1, [r4, #16]
 8007f46:	4650      	mov	r0, sl
 8007f48:	f7ff fefc 	bl	8007d44 <_free_r>
 8007f4c:	e7c7      	b.n	8007ede <__ssputs_r+0x46>
	...

08007f50 <_svfiprintf_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	4698      	mov	r8, r3
 8007f56:	898b      	ldrh	r3, [r1, #12]
 8007f58:	061b      	lsls	r3, r3, #24
 8007f5a:	b09d      	sub	sp, #116	; 0x74
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	460d      	mov	r5, r1
 8007f60:	4614      	mov	r4, r2
 8007f62:	d50e      	bpl.n	8007f82 <_svfiprintf_r+0x32>
 8007f64:	690b      	ldr	r3, [r1, #16]
 8007f66:	b963      	cbnz	r3, 8007f82 <_svfiprintf_r+0x32>
 8007f68:	2140      	movs	r1, #64	; 0x40
 8007f6a:	f7ff ff3b 	bl	8007de4 <_malloc_r>
 8007f6e:	6028      	str	r0, [r5, #0]
 8007f70:	6128      	str	r0, [r5, #16]
 8007f72:	b920      	cbnz	r0, 8007f7e <_svfiprintf_r+0x2e>
 8007f74:	230c      	movs	r3, #12
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	e0d1      	b.n	8008122 <_svfiprintf_r+0x1d2>
 8007f7e:	2340      	movs	r3, #64	; 0x40
 8007f80:	616b      	str	r3, [r5, #20]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9309      	str	r3, [sp, #36]	; 0x24
 8007f86:	2320      	movs	r3, #32
 8007f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f90:	2330      	movs	r3, #48	; 0x30
 8007f92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800813c <_svfiprintf_r+0x1ec>
 8007f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f9a:	f04f 0901 	mov.w	r9, #1
 8007f9e:	4623      	mov	r3, r4
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa6:	b10a      	cbz	r2, 8007fac <_svfiprintf_r+0x5c>
 8007fa8:	2a25      	cmp	r2, #37	; 0x25
 8007faa:	d1f9      	bne.n	8007fa0 <_svfiprintf_r+0x50>
 8007fac:	ebba 0b04 	subs.w	fp, sl, r4
 8007fb0:	d00b      	beq.n	8007fca <_svfiprintf_r+0x7a>
 8007fb2:	465b      	mov	r3, fp
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4638      	mov	r0, r7
 8007fba:	f7ff ff6d 	bl	8007e98 <__ssputs_r>
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f000 80aa 	beq.w	8008118 <_svfiprintf_r+0x1c8>
 8007fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc6:	445a      	add	r2, fp
 8007fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8007fca:	f89a 3000 	ldrb.w	r3, [sl]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 80a2 	beq.w	8008118 <_svfiprintf_r+0x1c8>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fde:	f10a 0a01 	add.w	sl, sl, #1
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	9307      	str	r3, [sp, #28]
 8007fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fea:	931a      	str	r3, [sp, #104]	; 0x68
 8007fec:	4654      	mov	r4, sl
 8007fee:	2205      	movs	r2, #5
 8007ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff4:	4851      	ldr	r0, [pc, #324]	; (800813c <_svfiprintf_r+0x1ec>)
 8007ff6:	f7f8 f8fb 	bl	80001f0 <memchr>
 8007ffa:	9a04      	ldr	r2, [sp, #16]
 8007ffc:	b9d8      	cbnz	r0, 8008036 <_svfiprintf_r+0xe6>
 8007ffe:	06d0      	lsls	r0, r2, #27
 8008000:	bf44      	itt	mi
 8008002:	2320      	movmi	r3, #32
 8008004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008008:	0711      	lsls	r1, r2, #28
 800800a:	bf44      	itt	mi
 800800c:	232b      	movmi	r3, #43	; 0x2b
 800800e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008012:	f89a 3000 	ldrb.w	r3, [sl]
 8008016:	2b2a      	cmp	r3, #42	; 0x2a
 8008018:	d015      	beq.n	8008046 <_svfiprintf_r+0xf6>
 800801a:	9a07      	ldr	r2, [sp, #28]
 800801c:	4654      	mov	r4, sl
 800801e:	2000      	movs	r0, #0
 8008020:	f04f 0c0a 	mov.w	ip, #10
 8008024:	4621      	mov	r1, r4
 8008026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800802a:	3b30      	subs	r3, #48	; 0x30
 800802c:	2b09      	cmp	r3, #9
 800802e:	d94e      	bls.n	80080ce <_svfiprintf_r+0x17e>
 8008030:	b1b0      	cbz	r0, 8008060 <_svfiprintf_r+0x110>
 8008032:	9207      	str	r2, [sp, #28]
 8008034:	e014      	b.n	8008060 <_svfiprintf_r+0x110>
 8008036:	eba0 0308 	sub.w	r3, r0, r8
 800803a:	fa09 f303 	lsl.w	r3, r9, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	46a2      	mov	sl, r4
 8008044:	e7d2      	b.n	8007fec <_svfiprintf_r+0x9c>
 8008046:	9b03      	ldr	r3, [sp, #12]
 8008048:	1d19      	adds	r1, r3, #4
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	9103      	str	r1, [sp, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	bfbb      	ittet	lt
 8008052:	425b      	neglt	r3, r3
 8008054:	f042 0202 	orrlt.w	r2, r2, #2
 8008058:	9307      	strge	r3, [sp, #28]
 800805a:	9307      	strlt	r3, [sp, #28]
 800805c:	bfb8      	it	lt
 800805e:	9204      	strlt	r2, [sp, #16]
 8008060:	7823      	ldrb	r3, [r4, #0]
 8008062:	2b2e      	cmp	r3, #46	; 0x2e
 8008064:	d10c      	bne.n	8008080 <_svfiprintf_r+0x130>
 8008066:	7863      	ldrb	r3, [r4, #1]
 8008068:	2b2a      	cmp	r3, #42	; 0x2a
 800806a:	d135      	bne.n	80080d8 <_svfiprintf_r+0x188>
 800806c:	9b03      	ldr	r3, [sp, #12]
 800806e:	1d1a      	adds	r2, r3, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	9203      	str	r2, [sp, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	bfb8      	it	lt
 8008078:	f04f 33ff 	movlt.w	r3, #4294967295
 800807c:	3402      	adds	r4, #2
 800807e:	9305      	str	r3, [sp, #20]
 8008080:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800814c <_svfiprintf_r+0x1fc>
 8008084:	7821      	ldrb	r1, [r4, #0]
 8008086:	2203      	movs	r2, #3
 8008088:	4650      	mov	r0, sl
 800808a:	f7f8 f8b1 	bl	80001f0 <memchr>
 800808e:	b140      	cbz	r0, 80080a2 <_svfiprintf_r+0x152>
 8008090:	2340      	movs	r3, #64	; 0x40
 8008092:	eba0 000a 	sub.w	r0, r0, sl
 8008096:	fa03 f000 	lsl.w	r0, r3, r0
 800809a:	9b04      	ldr	r3, [sp, #16]
 800809c:	4303      	orrs	r3, r0
 800809e:	3401      	adds	r4, #1
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a6:	4826      	ldr	r0, [pc, #152]	; (8008140 <_svfiprintf_r+0x1f0>)
 80080a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080ac:	2206      	movs	r2, #6
 80080ae:	f7f8 f89f 	bl	80001f0 <memchr>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d038      	beq.n	8008128 <_svfiprintf_r+0x1d8>
 80080b6:	4b23      	ldr	r3, [pc, #140]	; (8008144 <_svfiprintf_r+0x1f4>)
 80080b8:	bb1b      	cbnz	r3, 8008102 <_svfiprintf_r+0x1b2>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	3307      	adds	r3, #7
 80080be:	f023 0307 	bic.w	r3, r3, #7
 80080c2:	3308      	adds	r3, #8
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c8:	4433      	add	r3, r6
 80080ca:	9309      	str	r3, [sp, #36]	; 0x24
 80080cc:	e767      	b.n	8007f9e <_svfiprintf_r+0x4e>
 80080ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d2:	460c      	mov	r4, r1
 80080d4:	2001      	movs	r0, #1
 80080d6:	e7a5      	b.n	8008024 <_svfiprintf_r+0xd4>
 80080d8:	2300      	movs	r3, #0
 80080da:	3401      	adds	r4, #1
 80080dc:	9305      	str	r3, [sp, #20]
 80080de:	4619      	mov	r1, r3
 80080e0:	f04f 0c0a 	mov.w	ip, #10
 80080e4:	4620      	mov	r0, r4
 80080e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080ea:	3a30      	subs	r2, #48	; 0x30
 80080ec:	2a09      	cmp	r2, #9
 80080ee:	d903      	bls.n	80080f8 <_svfiprintf_r+0x1a8>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0c5      	beq.n	8008080 <_svfiprintf_r+0x130>
 80080f4:	9105      	str	r1, [sp, #20]
 80080f6:	e7c3      	b.n	8008080 <_svfiprintf_r+0x130>
 80080f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80080fc:	4604      	mov	r4, r0
 80080fe:	2301      	movs	r3, #1
 8008100:	e7f0      	b.n	80080e4 <_svfiprintf_r+0x194>
 8008102:	ab03      	add	r3, sp, #12
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	462a      	mov	r2, r5
 8008108:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <_svfiprintf_r+0x1f8>)
 800810a:	a904      	add	r1, sp, #16
 800810c:	4638      	mov	r0, r7
 800810e:	f7fe f81b 	bl	8006148 <_printf_float>
 8008112:	1c42      	adds	r2, r0, #1
 8008114:	4606      	mov	r6, r0
 8008116:	d1d6      	bne.n	80080c6 <_svfiprintf_r+0x176>
 8008118:	89ab      	ldrh	r3, [r5, #12]
 800811a:	065b      	lsls	r3, r3, #25
 800811c:	f53f af2c 	bmi.w	8007f78 <_svfiprintf_r+0x28>
 8008120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008122:	b01d      	add	sp, #116	; 0x74
 8008124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008128:	ab03      	add	r3, sp, #12
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	462a      	mov	r2, r5
 800812e:	4b06      	ldr	r3, [pc, #24]	; (8008148 <_svfiprintf_r+0x1f8>)
 8008130:	a904      	add	r1, sp, #16
 8008132:	4638      	mov	r0, r7
 8008134:	f7fe faac 	bl	8006690 <_printf_i>
 8008138:	e7eb      	b.n	8008112 <_svfiprintf_r+0x1c2>
 800813a:	bf00      	nop
 800813c:	08009b7c 	.word	0x08009b7c
 8008140:	08009b86 	.word	0x08009b86
 8008144:	08006149 	.word	0x08006149
 8008148:	08007e99 	.word	0x08007e99
 800814c:	08009b82 	.word	0x08009b82

08008150 <_sbrk_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d06      	ldr	r5, [pc, #24]	; (800816c <_sbrk_r+0x1c>)
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	602b      	str	r3, [r5, #0]
 800815c:	f7fa fe60 	bl	8002e20 <_sbrk>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_sbrk_r+0x1a>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_sbrk_r+0x1a>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	20000888 	.word	0x20000888

08008170 <__assert_func>:
 8008170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008172:	4614      	mov	r4, r2
 8008174:	461a      	mov	r2, r3
 8008176:	4b09      	ldr	r3, [pc, #36]	; (800819c <__assert_func+0x2c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4605      	mov	r5, r0
 800817c:	68d8      	ldr	r0, [r3, #12]
 800817e:	b14c      	cbz	r4, 8008194 <__assert_func+0x24>
 8008180:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <__assert_func+0x30>)
 8008182:	9100      	str	r1, [sp, #0]
 8008184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008188:	4906      	ldr	r1, [pc, #24]	; (80081a4 <__assert_func+0x34>)
 800818a:	462b      	mov	r3, r5
 800818c:	f000 f80e 	bl	80081ac <fiprintf>
 8008190:	f000 faa4 	bl	80086dc <abort>
 8008194:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <__assert_func+0x38>)
 8008196:	461c      	mov	r4, r3
 8008198:	e7f3      	b.n	8008182 <__assert_func+0x12>
 800819a:	bf00      	nop
 800819c:	20000014 	.word	0x20000014
 80081a0:	08009b8d 	.word	0x08009b8d
 80081a4:	08009b9a 	.word	0x08009b9a
 80081a8:	08009bc8 	.word	0x08009bc8

080081ac <fiprintf>:
 80081ac:	b40e      	push	{r1, r2, r3}
 80081ae:	b503      	push	{r0, r1, lr}
 80081b0:	4601      	mov	r1, r0
 80081b2:	ab03      	add	r3, sp, #12
 80081b4:	4805      	ldr	r0, [pc, #20]	; (80081cc <fiprintf+0x20>)
 80081b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	f000 f88f 	bl	80082e0 <_vfiprintf_r>
 80081c2:	b002      	add	sp, #8
 80081c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c8:	b003      	add	sp, #12
 80081ca:	4770      	bx	lr
 80081cc:	20000014 	.word	0x20000014

080081d0 <__ascii_mbtowc>:
 80081d0:	b082      	sub	sp, #8
 80081d2:	b901      	cbnz	r1, 80081d6 <__ascii_mbtowc+0x6>
 80081d4:	a901      	add	r1, sp, #4
 80081d6:	b142      	cbz	r2, 80081ea <__ascii_mbtowc+0x1a>
 80081d8:	b14b      	cbz	r3, 80081ee <__ascii_mbtowc+0x1e>
 80081da:	7813      	ldrb	r3, [r2, #0]
 80081dc:	600b      	str	r3, [r1, #0]
 80081de:	7812      	ldrb	r2, [r2, #0]
 80081e0:	1e10      	subs	r0, r2, #0
 80081e2:	bf18      	it	ne
 80081e4:	2001      	movne	r0, #1
 80081e6:	b002      	add	sp, #8
 80081e8:	4770      	bx	lr
 80081ea:	4610      	mov	r0, r2
 80081ec:	e7fb      	b.n	80081e6 <__ascii_mbtowc+0x16>
 80081ee:	f06f 0001 	mvn.w	r0, #1
 80081f2:	e7f8      	b.n	80081e6 <__ascii_mbtowc+0x16>

080081f4 <memmove>:
 80081f4:	4288      	cmp	r0, r1
 80081f6:	b510      	push	{r4, lr}
 80081f8:	eb01 0402 	add.w	r4, r1, r2
 80081fc:	d902      	bls.n	8008204 <memmove+0x10>
 80081fe:	4284      	cmp	r4, r0
 8008200:	4623      	mov	r3, r4
 8008202:	d807      	bhi.n	8008214 <memmove+0x20>
 8008204:	1e43      	subs	r3, r0, #1
 8008206:	42a1      	cmp	r1, r4
 8008208:	d008      	beq.n	800821c <memmove+0x28>
 800820a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800820e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008212:	e7f8      	b.n	8008206 <memmove+0x12>
 8008214:	4402      	add	r2, r0
 8008216:	4601      	mov	r1, r0
 8008218:	428a      	cmp	r2, r1
 800821a:	d100      	bne.n	800821e <memmove+0x2a>
 800821c:	bd10      	pop	{r4, pc}
 800821e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008226:	e7f7      	b.n	8008218 <memmove+0x24>

08008228 <__malloc_lock>:
 8008228:	4801      	ldr	r0, [pc, #4]	; (8008230 <__malloc_lock+0x8>)
 800822a:	f000 bc17 	b.w	8008a5c <__retarget_lock_acquire_recursive>
 800822e:	bf00      	nop
 8008230:	20000890 	.word	0x20000890

08008234 <__malloc_unlock>:
 8008234:	4801      	ldr	r0, [pc, #4]	; (800823c <__malloc_unlock+0x8>)
 8008236:	f000 bc12 	b.w	8008a5e <__retarget_lock_release_recursive>
 800823a:	bf00      	nop
 800823c:	20000890 	.word	0x20000890

08008240 <_realloc_r>:
 8008240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008242:	4607      	mov	r7, r0
 8008244:	4614      	mov	r4, r2
 8008246:	460e      	mov	r6, r1
 8008248:	b921      	cbnz	r1, 8008254 <_realloc_r+0x14>
 800824a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800824e:	4611      	mov	r1, r2
 8008250:	f7ff bdc8 	b.w	8007de4 <_malloc_r>
 8008254:	b922      	cbnz	r2, 8008260 <_realloc_r+0x20>
 8008256:	f7ff fd75 	bl	8007d44 <_free_r>
 800825a:	4625      	mov	r5, r4
 800825c:	4628      	mov	r0, r5
 800825e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008260:	f000 fc62 	bl	8008b28 <_malloc_usable_size_r>
 8008264:	42a0      	cmp	r0, r4
 8008266:	d20f      	bcs.n	8008288 <_realloc_r+0x48>
 8008268:	4621      	mov	r1, r4
 800826a:	4638      	mov	r0, r7
 800826c:	f7ff fdba 	bl	8007de4 <_malloc_r>
 8008270:	4605      	mov	r5, r0
 8008272:	2800      	cmp	r0, #0
 8008274:	d0f2      	beq.n	800825c <_realloc_r+0x1c>
 8008276:	4631      	mov	r1, r6
 8008278:	4622      	mov	r2, r4
 800827a:	f7fd feaf 	bl	8005fdc <memcpy>
 800827e:	4631      	mov	r1, r6
 8008280:	4638      	mov	r0, r7
 8008282:	f7ff fd5f 	bl	8007d44 <_free_r>
 8008286:	e7e9      	b.n	800825c <_realloc_r+0x1c>
 8008288:	4635      	mov	r5, r6
 800828a:	e7e7      	b.n	800825c <_realloc_r+0x1c>

0800828c <__sfputc_r>:
 800828c:	6893      	ldr	r3, [r2, #8]
 800828e:	3b01      	subs	r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	b410      	push	{r4}
 8008294:	6093      	str	r3, [r2, #8]
 8008296:	da08      	bge.n	80082aa <__sfputc_r+0x1e>
 8008298:	6994      	ldr	r4, [r2, #24]
 800829a:	42a3      	cmp	r3, r4
 800829c:	db01      	blt.n	80082a2 <__sfputc_r+0x16>
 800829e:	290a      	cmp	r1, #10
 80082a0:	d103      	bne.n	80082aa <__sfputc_r+0x1e>
 80082a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a6:	f000 b94b 	b.w	8008540 <__swbuf_r>
 80082aa:	6813      	ldr	r3, [r2, #0]
 80082ac:	1c58      	adds	r0, r3, #1
 80082ae:	6010      	str	r0, [r2, #0]
 80082b0:	7019      	strb	r1, [r3, #0]
 80082b2:	4608      	mov	r0, r1
 80082b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <__sfputs_r>:
 80082ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082bc:	4606      	mov	r6, r0
 80082be:	460f      	mov	r7, r1
 80082c0:	4614      	mov	r4, r2
 80082c2:	18d5      	adds	r5, r2, r3
 80082c4:	42ac      	cmp	r4, r5
 80082c6:	d101      	bne.n	80082cc <__sfputs_r+0x12>
 80082c8:	2000      	movs	r0, #0
 80082ca:	e007      	b.n	80082dc <__sfputs_r+0x22>
 80082cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d0:	463a      	mov	r2, r7
 80082d2:	4630      	mov	r0, r6
 80082d4:	f7ff ffda 	bl	800828c <__sfputc_r>
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d1f3      	bne.n	80082c4 <__sfputs_r+0xa>
 80082dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082e0 <_vfiprintf_r>:
 80082e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	460d      	mov	r5, r1
 80082e6:	b09d      	sub	sp, #116	; 0x74
 80082e8:	4614      	mov	r4, r2
 80082ea:	4698      	mov	r8, r3
 80082ec:	4606      	mov	r6, r0
 80082ee:	b118      	cbz	r0, 80082f8 <_vfiprintf_r+0x18>
 80082f0:	6983      	ldr	r3, [r0, #24]
 80082f2:	b90b      	cbnz	r3, 80082f8 <_vfiprintf_r+0x18>
 80082f4:	f000 fb14 	bl	8008920 <__sinit>
 80082f8:	4b89      	ldr	r3, [pc, #548]	; (8008520 <_vfiprintf_r+0x240>)
 80082fa:	429d      	cmp	r5, r3
 80082fc:	d11b      	bne.n	8008336 <_vfiprintf_r+0x56>
 80082fe:	6875      	ldr	r5, [r6, #4]
 8008300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008302:	07d9      	lsls	r1, r3, #31
 8008304:	d405      	bmi.n	8008312 <_vfiprintf_r+0x32>
 8008306:	89ab      	ldrh	r3, [r5, #12]
 8008308:	059a      	lsls	r2, r3, #22
 800830a:	d402      	bmi.n	8008312 <_vfiprintf_r+0x32>
 800830c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800830e:	f000 fba5 	bl	8008a5c <__retarget_lock_acquire_recursive>
 8008312:	89ab      	ldrh	r3, [r5, #12]
 8008314:	071b      	lsls	r3, r3, #28
 8008316:	d501      	bpl.n	800831c <_vfiprintf_r+0x3c>
 8008318:	692b      	ldr	r3, [r5, #16]
 800831a:	b9eb      	cbnz	r3, 8008358 <_vfiprintf_r+0x78>
 800831c:	4629      	mov	r1, r5
 800831e:	4630      	mov	r0, r6
 8008320:	f000 f96e 	bl	8008600 <__swsetup_r>
 8008324:	b1c0      	cbz	r0, 8008358 <_vfiprintf_r+0x78>
 8008326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008328:	07dc      	lsls	r4, r3, #31
 800832a:	d50e      	bpl.n	800834a <_vfiprintf_r+0x6a>
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	b01d      	add	sp, #116	; 0x74
 8008332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008336:	4b7b      	ldr	r3, [pc, #492]	; (8008524 <_vfiprintf_r+0x244>)
 8008338:	429d      	cmp	r5, r3
 800833a:	d101      	bne.n	8008340 <_vfiprintf_r+0x60>
 800833c:	68b5      	ldr	r5, [r6, #8]
 800833e:	e7df      	b.n	8008300 <_vfiprintf_r+0x20>
 8008340:	4b79      	ldr	r3, [pc, #484]	; (8008528 <_vfiprintf_r+0x248>)
 8008342:	429d      	cmp	r5, r3
 8008344:	bf08      	it	eq
 8008346:	68f5      	ldreq	r5, [r6, #12]
 8008348:	e7da      	b.n	8008300 <_vfiprintf_r+0x20>
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	0598      	lsls	r0, r3, #22
 800834e:	d4ed      	bmi.n	800832c <_vfiprintf_r+0x4c>
 8008350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008352:	f000 fb84 	bl	8008a5e <__retarget_lock_release_recursive>
 8008356:	e7e9      	b.n	800832c <_vfiprintf_r+0x4c>
 8008358:	2300      	movs	r3, #0
 800835a:	9309      	str	r3, [sp, #36]	; 0x24
 800835c:	2320      	movs	r3, #32
 800835e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008362:	f8cd 800c 	str.w	r8, [sp, #12]
 8008366:	2330      	movs	r3, #48	; 0x30
 8008368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800852c <_vfiprintf_r+0x24c>
 800836c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008370:	f04f 0901 	mov.w	r9, #1
 8008374:	4623      	mov	r3, r4
 8008376:	469a      	mov	sl, r3
 8008378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800837c:	b10a      	cbz	r2, 8008382 <_vfiprintf_r+0xa2>
 800837e:	2a25      	cmp	r2, #37	; 0x25
 8008380:	d1f9      	bne.n	8008376 <_vfiprintf_r+0x96>
 8008382:	ebba 0b04 	subs.w	fp, sl, r4
 8008386:	d00b      	beq.n	80083a0 <_vfiprintf_r+0xc0>
 8008388:	465b      	mov	r3, fp
 800838a:	4622      	mov	r2, r4
 800838c:	4629      	mov	r1, r5
 800838e:	4630      	mov	r0, r6
 8008390:	f7ff ff93 	bl	80082ba <__sfputs_r>
 8008394:	3001      	adds	r0, #1
 8008396:	f000 80aa 	beq.w	80084ee <_vfiprintf_r+0x20e>
 800839a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800839c:	445a      	add	r2, fp
 800839e:	9209      	str	r2, [sp, #36]	; 0x24
 80083a0:	f89a 3000 	ldrb.w	r3, [sl]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 80a2 	beq.w	80084ee <_vfiprintf_r+0x20e>
 80083aa:	2300      	movs	r3, #0
 80083ac:	f04f 32ff 	mov.w	r2, #4294967295
 80083b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b4:	f10a 0a01 	add.w	sl, sl, #1
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	9307      	str	r3, [sp, #28]
 80083bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083c0:	931a      	str	r3, [sp, #104]	; 0x68
 80083c2:	4654      	mov	r4, sl
 80083c4:	2205      	movs	r2, #5
 80083c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ca:	4858      	ldr	r0, [pc, #352]	; (800852c <_vfiprintf_r+0x24c>)
 80083cc:	f7f7 ff10 	bl	80001f0 <memchr>
 80083d0:	9a04      	ldr	r2, [sp, #16]
 80083d2:	b9d8      	cbnz	r0, 800840c <_vfiprintf_r+0x12c>
 80083d4:	06d1      	lsls	r1, r2, #27
 80083d6:	bf44      	itt	mi
 80083d8:	2320      	movmi	r3, #32
 80083da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083de:	0713      	lsls	r3, r2, #28
 80083e0:	bf44      	itt	mi
 80083e2:	232b      	movmi	r3, #43	; 0x2b
 80083e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e8:	f89a 3000 	ldrb.w	r3, [sl]
 80083ec:	2b2a      	cmp	r3, #42	; 0x2a
 80083ee:	d015      	beq.n	800841c <_vfiprintf_r+0x13c>
 80083f0:	9a07      	ldr	r2, [sp, #28]
 80083f2:	4654      	mov	r4, sl
 80083f4:	2000      	movs	r0, #0
 80083f6:	f04f 0c0a 	mov.w	ip, #10
 80083fa:	4621      	mov	r1, r4
 80083fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008400:	3b30      	subs	r3, #48	; 0x30
 8008402:	2b09      	cmp	r3, #9
 8008404:	d94e      	bls.n	80084a4 <_vfiprintf_r+0x1c4>
 8008406:	b1b0      	cbz	r0, 8008436 <_vfiprintf_r+0x156>
 8008408:	9207      	str	r2, [sp, #28]
 800840a:	e014      	b.n	8008436 <_vfiprintf_r+0x156>
 800840c:	eba0 0308 	sub.w	r3, r0, r8
 8008410:	fa09 f303 	lsl.w	r3, r9, r3
 8008414:	4313      	orrs	r3, r2
 8008416:	9304      	str	r3, [sp, #16]
 8008418:	46a2      	mov	sl, r4
 800841a:	e7d2      	b.n	80083c2 <_vfiprintf_r+0xe2>
 800841c:	9b03      	ldr	r3, [sp, #12]
 800841e:	1d19      	adds	r1, r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	9103      	str	r1, [sp, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	bfbb      	ittet	lt
 8008428:	425b      	neglt	r3, r3
 800842a:	f042 0202 	orrlt.w	r2, r2, #2
 800842e:	9307      	strge	r3, [sp, #28]
 8008430:	9307      	strlt	r3, [sp, #28]
 8008432:	bfb8      	it	lt
 8008434:	9204      	strlt	r2, [sp, #16]
 8008436:	7823      	ldrb	r3, [r4, #0]
 8008438:	2b2e      	cmp	r3, #46	; 0x2e
 800843a:	d10c      	bne.n	8008456 <_vfiprintf_r+0x176>
 800843c:	7863      	ldrb	r3, [r4, #1]
 800843e:	2b2a      	cmp	r3, #42	; 0x2a
 8008440:	d135      	bne.n	80084ae <_vfiprintf_r+0x1ce>
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	1d1a      	adds	r2, r3, #4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	9203      	str	r2, [sp, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	bfb8      	it	lt
 800844e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008452:	3402      	adds	r4, #2
 8008454:	9305      	str	r3, [sp, #20]
 8008456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800853c <_vfiprintf_r+0x25c>
 800845a:	7821      	ldrb	r1, [r4, #0]
 800845c:	2203      	movs	r2, #3
 800845e:	4650      	mov	r0, sl
 8008460:	f7f7 fec6 	bl	80001f0 <memchr>
 8008464:	b140      	cbz	r0, 8008478 <_vfiprintf_r+0x198>
 8008466:	2340      	movs	r3, #64	; 0x40
 8008468:	eba0 000a 	sub.w	r0, r0, sl
 800846c:	fa03 f000 	lsl.w	r0, r3, r0
 8008470:	9b04      	ldr	r3, [sp, #16]
 8008472:	4303      	orrs	r3, r0
 8008474:	3401      	adds	r4, #1
 8008476:	9304      	str	r3, [sp, #16]
 8008478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800847c:	482c      	ldr	r0, [pc, #176]	; (8008530 <_vfiprintf_r+0x250>)
 800847e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008482:	2206      	movs	r2, #6
 8008484:	f7f7 feb4 	bl	80001f0 <memchr>
 8008488:	2800      	cmp	r0, #0
 800848a:	d03f      	beq.n	800850c <_vfiprintf_r+0x22c>
 800848c:	4b29      	ldr	r3, [pc, #164]	; (8008534 <_vfiprintf_r+0x254>)
 800848e:	bb1b      	cbnz	r3, 80084d8 <_vfiprintf_r+0x1f8>
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	3307      	adds	r3, #7
 8008494:	f023 0307 	bic.w	r3, r3, #7
 8008498:	3308      	adds	r3, #8
 800849a:	9303      	str	r3, [sp, #12]
 800849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849e:	443b      	add	r3, r7
 80084a0:	9309      	str	r3, [sp, #36]	; 0x24
 80084a2:	e767      	b.n	8008374 <_vfiprintf_r+0x94>
 80084a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a8:	460c      	mov	r4, r1
 80084aa:	2001      	movs	r0, #1
 80084ac:	e7a5      	b.n	80083fa <_vfiprintf_r+0x11a>
 80084ae:	2300      	movs	r3, #0
 80084b0:	3401      	adds	r4, #1
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	4619      	mov	r1, r3
 80084b6:	f04f 0c0a 	mov.w	ip, #10
 80084ba:	4620      	mov	r0, r4
 80084bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084c0:	3a30      	subs	r2, #48	; 0x30
 80084c2:	2a09      	cmp	r2, #9
 80084c4:	d903      	bls.n	80084ce <_vfiprintf_r+0x1ee>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0c5      	beq.n	8008456 <_vfiprintf_r+0x176>
 80084ca:	9105      	str	r1, [sp, #20]
 80084cc:	e7c3      	b.n	8008456 <_vfiprintf_r+0x176>
 80084ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80084d2:	4604      	mov	r4, r0
 80084d4:	2301      	movs	r3, #1
 80084d6:	e7f0      	b.n	80084ba <_vfiprintf_r+0x1da>
 80084d8:	ab03      	add	r3, sp, #12
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	462a      	mov	r2, r5
 80084de:	4b16      	ldr	r3, [pc, #88]	; (8008538 <_vfiprintf_r+0x258>)
 80084e0:	a904      	add	r1, sp, #16
 80084e2:	4630      	mov	r0, r6
 80084e4:	f7fd fe30 	bl	8006148 <_printf_float>
 80084e8:	4607      	mov	r7, r0
 80084ea:	1c78      	adds	r0, r7, #1
 80084ec:	d1d6      	bne.n	800849c <_vfiprintf_r+0x1bc>
 80084ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084f0:	07d9      	lsls	r1, r3, #31
 80084f2:	d405      	bmi.n	8008500 <_vfiprintf_r+0x220>
 80084f4:	89ab      	ldrh	r3, [r5, #12]
 80084f6:	059a      	lsls	r2, r3, #22
 80084f8:	d402      	bmi.n	8008500 <_vfiprintf_r+0x220>
 80084fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084fc:	f000 faaf 	bl	8008a5e <__retarget_lock_release_recursive>
 8008500:	89ab      	ldrh	r3, [r5, #12]
 8008502:	065b      	lsls	r3, r3, #25
 8008504:	f53f af12 	bmi.w	800832c <_vfiprintf_r+0x4c>
 8008508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800850a:	e711      	b.n	8008330 <_vfiprintf_r+0x50>
 800850c:	ab03      	add	r3, sp, #12
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	462a      	mov	r2, r5
 8008512:	4b09      	ldr	r3, [pc, #36]	; (8008538 <_vfiprintf_r+0x258>)
 8008514:	a904      	add	r1, sp, #16
 8008516:	4630      	mov	r0, r6
 8008518:	f7fe f8ba 	bl	8006690 <_printf_i>
 800851c:	e7e4      	b.n	80084e8 <_vfiprintf_r+0x208>
 800851e:	bf00      	nop
 8008520:	08009cf4 	.word	0x08009cf4
 8008524:	08009d14 	.word	0x08009d14
 8008528:	08009cd4 	.word	0x08009cd4
 800852c:	08009b7c 	.word	0x08009b7c
 8008530:	08009b86 	.word	0x08009b86
 8008534:	08006149 	.word	0x08006149
 8008538:	080082bb 	.word	0x080082bb
 800853c:	08009b82 	.word	0x08009b82

08008540 <__swbuf_r>:
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	460e      	mov	r6, r1
 8008544:	4614      	mov	r4, r2
 8008546:	4605      	mov	r5, r0
 8008548:	b118      	cbz	r0, 8008552 <__swbuf_r+0x12>
 800854a:	6983      	ldr	r3, [r0, #24]
 800854c:	b90b      	cbnz	r3, 8008552 <__swbuf_r+0x12>
 800854e:	f000 f9e7 	bl	8008920 <__sinit>
 8008552:	4b21      	ldr	r3, [pc, #132]	; (80085d8 <__swbuf_r+0x98>)
 8008554:	429c      	cmp	r4, r3
 8008556:	d12b      	bne.n	80085b0 <__swbuf_r+0x70>
 8008558:	686c      	ldr	r4, [r5, #4]
 800855a:	69a3      	ldr	r3, [r4, #24]
 800855c:	60a3      	str	r3, [r4, #8]
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	071a      	lsls	r2, r3, #28
 8008562:	d52f      	bpl.n	80085c4 <__swbuf_r+0x84>
 8008564:	6923      	ldr	r3, [r4, #16]
 8008566:	b36b      	cbz	r3, 80085c4 <__swbuf_r+0x84>
 8008568:	6923      	ldr	r3, [r4, #16]
 800856a:	6820      	ldr	r0, [r4, #0]
 800856c:	1ac0      	subs	r0, r0, r3
 800856e:	6963      	ldr	r3, [r4, #20]
 8008570:	b2f6      	uxtb	r6, r6
 8008572:	4283      	cmp	r3, r0
 8008574:	4637      	mov	r7, r6
 8008576:	dc04      	bgt.n	8008582 <__swbuf_r+0x42>
 8008578:	4621      	mov	r1, r4
 800857a:	4628      	mov	r0, r5
 800857c:	f000 f93c 	bl	80087f8 <_fflush_r>
 8008580:	bb30      	cbnz	r0, 80085d0 <__swbuf_r+0x90>
 8008582:	68a3      	ldr	r3, [r4, #8]
 8008584:	3b01      	subs	r3, #1
 8008586:	60a3      	str	r3, [r4, #8]
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	6022      	str	r2, [r4, #0]
 800858e:	701e      	strb	r6, [r3, #0]
 8008590:	6963      	ldr	r3, [r4, #20]
 8008592:	3001      	adds	r0, #1
 8008594:	4283      	cmp	r3, r0
 8008596:	d004      	beq.n	80085a2 <__swbuf_r+0x62>
 8008598:	89a3      	ldrh	r3, [r4, #12]
 800859a:	07db      	lsls	r3, r3, #31
 800859c:	d506      	bpl.n	80085ac <__swbuf_r+0x6c>
 800859e:	2e0a      	cmp	r6, #10
 80085a0:	d104      	bne.n	80085ac <__swbuf_r+0x6c>
 80085a2:	4621      	mov	r1, r4
 80085a4:	4628      	mov	r0, r5
 80085a6:	f000 f927 	bl	80087f8 <_fflush_r>
 80085aa:	b988      	cbnz	r0, 80085d0 <__swbuf_r+0x90>
 80085ac:	4638      	mov	r0, r7
 80085ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b0:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <__swbuf_r+0x9c>)
 80085b2:	429c      	cmp	r4, r3
 80085b4:	d101      	bne.n	80085ba <__swbuf_r+0x7a>
 80085b6:	68ac      	ldr	r4, [r5, #8]
 80085b8:	e7cf      	b.n	800855a <__swbuf_r+0x1a>
 80085ba:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <__swbuf_r+0xa0>)
 80085bc:	429c      	cmp	r4, r3
 80085be:	bf08      	it	eq
 80085c0:	68ec      	ldreq	r4, [r5, #12]
 80085c2:	e7ca      	b.n	800855a <__swbuf_r+0x1a>
 80085c4:	4621      	mov	r1, r4
 80085c6:	4628      	mov	r0, r5
 80085c8:	f000 f81a 	bl	8008600 <__swsetup_r>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d0cb      	beq.n	8008568 <__swbuf_r+0x28>
 80085d0:	f04f 37ff 	mov.w	r7, #4294967295
 80085d4:	e7ea      	b.n	80085ac <__swbuf_r+0x6c>
 80085d6:	bf00      	nop
 80085d8:	08009cf4 	.word	0x08009cf4
 80085dc:	08009d14 	.word	0x08009d14
 80085e0:	08009cd4 	.word	0x08009cd4

080085e4 <__ascii_wctomb>:
 80085e4:	b149      	cbz	r1, 80085fa <__ascii_wctomb+0x16>
 80085e6:	2aff      	cmp	r2, #255	; 0xff
 80085e8:	bf85      	ittet	hi
 80085ea:	238a      	movhi	r3, #138	; 0x8a
 80085ec:	6003      	strhi	r3, [r0, #0]
 80085ee:	700a      	strbls	r2, [r1, #0]
 80085f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80085f4:	bf98      	it	ls
 80085f6:	2001      	movls	r0, #1
 80085f8:	4770      	bx	lr
 80085fa:	4608      	mov	r0, r1
 80085fc:	4770      	bx	lr
	...

08008600 <__swsetup_r>:
 8008600:	4b32      	ldr	r3, [pc, #200]	; (80086cc <__swsetup_r+0xcc>)
 8008602:	b570      	push	{r4, r5, r6, lr}
 8008604:	681d      	ldr	r5, [r3, #0]
 8008606:	4606      	mov	r6, r0
 8008608:	460c      	mov	r4, r1
 800860a:	b125      	cbz	r5, 8008616 <__swsetup_r+0x16>
 800860c:	69ab      	ldr	r3, [r5, #24]
 800860e:	b913      	cbnz	r3, 8008616 <__swsetup_r+0x16>
 8008610:	4628      	mov	r0, r5
 8008612:	f000 f985 	bl	8008920 <__sinit>
 8008616:	4b2e      	ldr	r3, [pc, #184]	; (80086d0 <__swsetup_r+0xd0>)
 8008618:	429c      	cmp	r4, r3
 800861a:	d10f      	bne.n	800863c <__swsetup_r+0x3c>
 800861c:	686c      	ldr	r4, [r5, #4]
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008624:	0719      	lsls	r1, r3, #28
 8008626:	d42c      	bmi.n	8008682 <__swsetup_r+0x82>
 8008628:	06dd      	lsls	r5, r3, #27
 800862a:	d411      	bmi.n	8008650 <__swsetup_r+0x50>
 800862c:	2309      	movs	r3, #9
 800862e:	6033      	str	r3, [r6, #0]
 8008630:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	f04f 30ff 	mov.w	r0, #4294967295
 800863a:	e03e      	b.n	80086ba <__swsetup_r+0xba>
 800863c:	4b25      	ldr	r3, [pc, #148]	; (80086d4 <__swsetup_r+0xd4>)
 800863e:	429c      	cmp	r4, r3
 8008640:	d101      	bne.n	8008646 <__swsetup_r+0x46>
 8008642:	68ac      	ldr	r4, [r5, #8]
 8008644:	e7eb      	b.n	800861e <__swsetup_r+0x1e>
 8008646:	4b24      	ldr	r3, [pc, #144]	; (80086d8 <__swsetup_r+0xd8>)
 8008648:	429c      	cmp	r4, r3
 800864a:	bf08      	it	eq
 800864c:	68ec      	ldreq	r4, [r5, #12]
 800864e:	e7e6      	b.n	800861e <__swsetup_r+0x1e>
 8008650:	0758      	lsls	r0, r3, #29
 8008652:	d512      	bpl.n	800867a <__swsetup_r+0x7a>
 8008654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008656:	b141      	cbz	r1, 800866a <__swsetup_r+0x6a>
 8008658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800865c:	4299      	cmp	r1, r3
 800865e:	d002      	beq.n	8008666 <__swsetup_r+0x66>
 8008660:	4630      	mov	r0, r6
 8008662:	f7ff fb6f 	bl	8007d44 <_free_r>
 8008666:	2300      	movs	r3, #0
 8008668:	6363      	str	r3, [r4, #52]	; 0x34
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	2300      	movs	r3, #0
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	6923      	ldr	r3, [r4, #16]
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f043 0308 	orr.w	r3, r3, #8
 8008680:	81a3      	strh	r3, [r4, #12]
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	b94b      	cbnz	r3, 800869a <__swsetup_r+0x9a>
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800868c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008690:	d003      	beq.n	800869a <__swsetup_r+0x9a>
 8008692:	4621      	mov	r1, r4
 8008694:	4630      	mov	r0, r6
 8008696:	f000 fa07 	bl	8008aa8 <__smakebuf_r>
 800869a:	89a0      	ldrh	r0, [r4, #12]
 800869c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086a0:	f010 0301 	ands.w	r3, r0, #1
 80086a4:	d00a      	beq.n	80086bc <__swsetup_r+0xbc>
 80086a6:	2300      	movs	r3, #0
 80086a8:	60a3      	str	r3, [r4, #8]
 80086aa:	6963      	ldr	r3, [r4, #20]
 80086ac:	425b      	negs	r3, r3
 80086ae:	61a3      	str	r3, [r4, #24]
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	b943      	cbnz	r3, 80086c6 <__swsetup_r+0xc6>
 80086b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086b8:	d1ba      	bne.n	8008630 <__swsetup_r+0x30>
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
 80086bc:	0781      	lsls	r1, r0, #30
 80086be:	bf58      	it	pl
 80086c0:	6963      	ldrpl	r3, [r4, #20]
 80086c2:	60a3      	str	r3, [r4, #8]
 80086c4:	e7f4      	b.n	80086b0 <__swsetup_r+0xb0>
 80086c6:	2000      	movs	r0, #0
 80086c8:	e7f7      	b.n	80086ba <__swsetup_r+0xba>
 80086ca:	bf00      	nop
 80086cc:	20000014 	.word	0x20000014
 80086d0:	08009cf4 	.word	0x08009cf4
 80086d4:	08009d14 	.word	0x08009d14
 80086d8:	08009cd4 	.word	0x08009cd4

080086dc <abort>:
 80086dc:	b508      	push	{r3, lr}
 80086de:	2006      	movs	r0, #6
 80086e0:	f000 fa52 	bl	8008b88 <raise>
 80086e4:	2001      	movs	r0, #1
 80086e6:	f7fa fb23 	bl	8002d30 <_exit>
	...

080086ec <__sflush_r>:
 80086ec:	898a      	ldrh	r2, [r1, #12]
 80086ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f2:	4605      	mov	r5, r0
 80086f4:	0710      	lsls	r0, r2, #28
 80086f6:	460c      	mov	r4, r1
 80086f8:	d458      	bmi.n	80087ac <__sflush_r+0xc0>
 80086fa:	684b      	ldr	r3, [r1, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	dc05      	bgt.n	800870c <__sflush_r+0x20>
 8008700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	dc02      	bgt.n	800870c <__sflush_r+0x20>
 8008706:	2000      	movs	r0, #0
 8008708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800870c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800870e:	2e00      	cmp	r6, #0
 8008710:	d0f9      	beq.n	8008706 <__sflush_r+0x1a>
 8008712:	2300      	movs	r3, #0
 8008714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008718:	682f      	ldr	r7, [r5, #0]
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	d032      	beq.n	8008784 <__sflush_r+0x98>
 800871e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	075a      	lsls	r2, r3, #29
 8008724:	d505      	bpl.n	8008732 <__sflush_r+0x46>
 8008726:	6863      	ldr	r3, [r4, #4]
 8008728:	1ac0      	subs	r0, r0, r3
 800872a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800872c:	b10b      	cbz	r3, 8008732 <__sflush_r+0x46>
 800872e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008730:	1ac0      	subs	r0, r0, r3
 8008732:	2300      	movs	r3, #0
 8008734:	4602      	mov	r2, r0
 8008736:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008738:	6a21      	ldr	r1, [r4, #32]
 800873a:	4628      	mov	r0, r5
 800873c:	47b0      	blx	r6
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	d106      	bne.n	8008752 <__sflush_r+0x66>
 8008744:	6829      	ldr	r1, [r5, #0]
 8008746:	291d      	cmp	r1, #29
 8008748:	d82c      	bhi.n	80087a4 <__sflush_r+0xb8>
 800874a:	4a2a      	ldr	r2, [pc, #168]	; (80087f4 <__sflush_r+0x108>)
 800874c:	40ca      	lsrs	r2, r1
 800874e:	07d6      	lsls	r6, r2, #31
 8008750:	d528      	bpl.n	80087a4 <__sflush_r+0xb8>
 8008752:	2200      	movs	r2, #0
 8008754:	6062      	str	r2, [r4, #4]
 8008756:	04d9      	lsls	r1, r3, #19
 8008758:	6922      	ldr	r2, [r4, #16]
 800875a:	6022      	str	r2, [r4, #0]
 800875c:	d504      	bpl.n	8008768 <__sflush_r+0x7c>
 800875e:	1c42      	adds	r2, r0, #1
 8008760:	d101      	bne.n	8008766 <__sflush_r+0x7a>
 8008762:	682b      	ldr	r3, [r5, #0]
 8008764:	b903      	cbnz	r3, 8008768 <__sflush_r+0x7c>
 8008766:	6560      	str	r0, [r4, #84]	; 0x54
 8008768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800876a:	602f      	str	r7, [r5, #0]
 800876c:	2900      	cmp	r1, #0
 800876e:	d0ca      	beq.n	8008706 <__sflush_r+0x1a>
 8008770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008774:	4299      	cmp	r1, r3
 8008776:	d002      	beq.n	800877e <__sflush_r+0x92>
 8008778:	4628      	mov	r0, r5
 800877a:	f7ff fae3 	bl	8007d44 <_free_r>
 800877e:	2000      	movs	r0, #0
 8008780:	6360      	str	r0, [r4, #52]	; 0x34
 8008782:	e7c1      	b.n	8008708 <__sflush_r+0x1c>
 8008784:	6a21      	ldr	r1, [r4, #32]
 8008786:	2301      	movs	r3, #1
 8008788:	4628      	mov	r0, r5
 800878a:	47b0      	blx	r6
 800878c:	1c41      	adds	r1, r0, #1
 800878e:	d1c7      	bne.n	8008720 <__sflush_r+0x34>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0c4      	beq.n	8008720 <__sflush_r+0x34>
 8008796:	2b1d      	cmp	r3, #29
 8008798:	d001      	beq.n	800879e <__sflush_r+0xb2>
 800879a:	2b16      	cmp	r3, #22
 800879c:	d101      	bne.n	80087a2 <__sflush_r+0xb6>
 800879e:	602f      	str	r7, [r5, #0]
 80087a0:	e7b1      	b.n	8008706 <__sflush_r+0x1a>
 80087a2:	89a3      	ldrh	r3, [r4, #12]
 80087a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a8:	81a3      	strh	r3, [r4, #12]
 80087aa:	e7ad      	b.n	8008708 <__sflush_r+0x1c>
 80087ac:	690f      	ldr	r7, [r1, #16]
 80087ae:	2f00      	cmp	r7, #0
 80087b0:	d0a9      	beq.n	8008706 <__sflush_r+0x1a>
 80087b2:	0793      	lsls	r3, r2, #30
 80087b4:	680e      	ldr	r6, [r1, #0]
 80087b6:	bf08      	it	eq
 80087b8:	694b      	ldreq	r3, [r1, #20]
 80087ba:	600f      	str	r7, [r1, #0]
 80087bc:	bf18      	it	ne
 80087be:	2300      	movne	r3, #0
 80087c0:	eba6 0807 	sub.w	r8, r6, r7
 80087c4:	608b      	str	r3, [r1, #8]
 80087c6:	f1b8 0f00 	cmp.w	r8, #0
 80087ca:	dd9c      	ble.n	8008706 <__sflush_r+0x1a>
 80087cc:	6a21      	ldr	r1, [r4, #32]
 80087ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087d0:	4643      	mov	r3, r8
 80087d2:	463a      	mov	r2, r7
 80087d4:	4628      	mov	r0, r5
 80087d6:	47b0      	blx	r6
 80087d8:	2800      	cmp	r0, #0
 80087da:	dc06      	bgt.n	80087ea <__sflush_r+0xfe>
 80087dc:	89a3      	ldrh	r3, [r4, #12]
 80087de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e2:	81a3      	strh	r3, [r4, #12]
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	e78e      	b.n	8008708 <__sflush_r+0x1c>
 80087ea:	4407      	add	r7, r0
 80087ec:	eba8 0800 	sub.w	r8, r8, r0
 80087f0:	e7e9      	b.n	80087c6 <__sflush_r+0xda>
 80087f2:	bf00      	nop
 80087f4:	20400001 	.word	0x20400001

080087f8 <_fflush_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	690b      	ldr	r3, [r1, #16]
 80087fc:	4605      	mov	r5, r0
 80087fe:	460c      	mov	r4, r1
 8008800:	b913      	cbnz	r3, 8008808 <_fflush_r+0x10>
 8008802:	2500      	movs	r5, #0
 8008804:	4628      	mov	r0, r5
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	b118      	cbz	r0, 8008812 <_fflush_r+0x1a>
 800880a:	6983      	ldr	r3, [r0, #24]
 800880c:	b90b      	cbnz	r3, 8008812 <_fflush_r+0x1a>
 800880e:	f000 f887 	bl	8008920 <__sinit>
 8008812:	4b14      	ldr	r3, [pc, #80]	; (8008864 <_fflush_r+0x6c>)
 8008814:	429c      	cmp	r4, r3
 8008816:	d11b      	bne.n	8008850 <_fflush_r+0x58>
 8008818:	686c      	ldr	r4, [r5, #4]
 800881a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d0ef      	beq.n	8008802 <_fflush_r+0xa>
 8008822:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008824:	07d0      	lsls	r0, r2, #31
 8008826:	d404      	bmi.n	8008832 <_fflush_r+0x3a>
 8008828:	0599      	lsls	r1, r3, #22
 800882a:	d402      	bmi.n	8008832 <_fflush_r+0x3a>
 800882c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800882e:	f000 f915 	bl	8008a5c <__retarget_lock_acquire_recursive>
 8008832:	4628      	mov	r0, r5
 8008834:	4621      	mov	r1, r4
 8008836:	f7ff ff59 	bl	80086ec <__sflush_r>
 800883a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800883c:	07da      	lsls	r2, r3, #31
 800883e:	4605      	mov	r5, r0
 8008840:	d4e0      	bmi.n	8008804 <_fflush_r+0xc>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	059b      	lsls	r3, r3, #22
 8008846:	d4dd      	bmi.n	8008804 <_fflush_r+0xc>
 8008848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800884a:	f000 f908 	bl	8008a5e <__retarget_lock_release_recursive>
 800884e:	e7d9      	b.n	8008804 <_fflush_r+0xc>
 8008850:	4b05      	ldr	r3, [pc, #20]	; (8008868 <_fflush_r+0x70>)
 8008852:	429c      	cmp	r4, r3
 8008854:	d101      	bne.n	800885a <_fflush_r+0x62>
 8008856:	68ac      	ldr	r4, [r5, #8]
 8008858:	e7df      	b.n	800881a <_fflush_r+0x22>
 800885a:	4b04      	ldr	r3, [pc, #16]	; (800886c <_fflush_r+0x74>)
 800885c:	429c      	cmp	r4, r3
 800885e:	bf08      	it	eq
 8008860:	68ec      	ldreq	r4, [r5, #12]
 8008862:	e7da      	b.n	800881a <_fflush_r+0x22>
 8008864:	08009cf4 	.word	0x08009cf4
 8008868:	08009d14 	.word	0x08009d14
 800886c:	08009cd4 	.word	0x08009cd4

08008870 <std>:
 8008870:	2300      	movs	r3, #0
 8008872:	b510      	push	{r4, lr}
 8008874:	4604      	mov	r4, r0
 8008876:	e9c0 3300 	strd	r3, r3, [r0]
 800887a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800887e:	6083      	str	r3, [r0, #8]
 8008880:	8181      	strh	r1, [r0, #12]
 8008882:	6643      	str	r3, [r0, #100]	; 0x64
 8008884:	81c2      	strh	r2, [r0, #14]
 8008886:	6183      	str	r3, [r0, #24]
 8008888:	4619      	mov	r1, r3
 800888a:	2208      	movs	r2, #8
 800888c:	305c      	adds	r0, #92	; 0x5c
 800888e:	f7fd fbb3 	bl	8005ff8 <memset>
 8008892:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <std+0x38>)
 8008894:	6263      	str	r3, [r4, #36]	; 0x24
 8008896:	4b05      	ldr	r3, [pc, #20]	; (80088ac <std+0x3c>)
 8008898:	62a3      	str	r3, [r4, #40]	; 0x28
 800889a:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <std+0x40>)
 800889c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <std+0x44>)
 80088a0:	6224      	str	r4, [r4, #32]
 80088a2:	6323      	str	r3, [r4, #48]	; 0x30
 80088a4:	bd10      	pop	{r4, pc}
 80088a6:	bf00      	nop
 80088a8:	08008bc1 	.word	0x08008bc1
 80088ac:	08008be3 	.word	0x08008be3
 80088b0:	08008c1b 	.word	0x08008c1b
 80088b4:	08008c3f 	.word	0x08008c3f

080088b8 <_cleanup_r>:
 80088b8:	4901      	ldr	r1, [pc, #4]	; (80088c0 <_cleanup_r+0x8>)
 80088ba:	f000 b8af 	b.w	8008a1c <_fwalk_reent>
 80088be:	bf00      	nop
 80088c0:	080087f9 	.word	0x080087f9

080088c4 <__sfmoreglue>:
 80088c4:	b570      	push	{r4, r5, r6, lr}
 80088c6:	1e4a      	subs	r2, r1, #1
 80088c8:	2568      	movs	r5, #104	; 0x68
 80088ca:	4355      	muls	r5, r2
 80088cc:	460e      	mov	r6, r1
 80088ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088d2:	f7ff fa87 	bl	8007de4 <_malloc_r>
 80088d6:	4604      	mov	r4, r0
 80088d8:	b140      	cbz	r0, 80088ec <__sfmoreglue+0x28>
 80088da:	2100      	movs	r1, #0
 80088dc:	e9c0 1600 	strd	r1, r6, [r0]
 80088e0:	300c      	adds	r0, #12
 80088e2:	60a0      	str	r0, [r4, #8]
 80088e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088e8:	f7fd fb86 	bl	8005ff8 <memset>
 80088ec:	4620      	mov	r0, r4
 80088ee:	bd70      	pop	{r4, r5, r6, pc}

080088f0 <__sfp_lock_acquire>:
 80088f0:	4801      	ldr	r0, [pc, #4]	; (80088f8 <__sfp_lock_acquire+0x8>)
 80088f2:	f000 b8b3 	b.w	8008a5c <__retarget_lock_acquire_recursive>
 80088f6:	bf00      	nop
 80088f8:	20000894 	.word	0x20000894

080088fc <__sfp_lock_release>:
 80088fc:	4801      	ldr	r0, [pc, #4]	; (8008904 <__sfp_lock_release+0x8>)
 80088fe:	f000 b8ae 	b.w	8008a5e <__retarget_lock_release_recursive>
 8008902:	bf00      	nop
 8008904:	20000894 	.word	0x20000894

08008908 <__sinit_lock_acquire>:
 8008908:	4801      	ldr	r0, [pc, #4]	; (8008910 <__sinit_lock_acquire+0x8>)
 800890a:	f000 b8a7 	b.w	8008a5c <__retarget_lock_acquire_recursive>
 800890e:	bf00      	nop
 8008910:	2000088f 	.word	0x2000088f

08008914 <__sinit_lock_release>:
 8008914:	4801      	ldr	r0, [pc, #4]	; (800891c <__sinit_lock_release+0x8>)
 8008916:	f000 b8a2 	b.w	8008a5e <__retarget_lock_release_recursive>
 800891a:	bf00      	nop
 800891c:	2000088f 	.word	0x2000088f

08008920 <__sinit>:
 8008920:	b510      	push	{r4, lr}
 8008922:	4604      	mov	r4, r0
 8008924:	f7ff fff0 	bl	8008908 <__sinit_lock_acquire>
 8008928:	69a3      	ldr	r3, [r4, #24]
 800892a:	b11b      	cbz	r3, 8008934 <__sinit+0x14>
 800892c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008930:	f7ff bff0 	b.w	8008914 <__sinit_lock_release>
 8008934:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008938:	6523      	str	r3, [r4, #80]	; 0x50
 800893a:	4b13      	ldr	r3, [pc, #76]	; (8008988 <__sinit+0x68>)
 800893c:	4a13      	ldr	r2, [pc, #76]	; (800898c <__sinit+0x6c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	62a2      	str	r2, [r4, #40]	; 0x28
 8008942:	42a3      	cmp	r3, r4
 8008944:	bf04      	itt	eq
 8008946:	2301      	moveq	r3, #1
 8008948:	61a3      	streq	r3, [r4, #24]
 800894a:	4620      	mov	r0, r4
 800894c:	f000 f820 	bl	8008990 <__sfp>
 8008950:	6060      	str	r0, [r4, #4]
 8008952:	4620      	mov	r0, r4
 8008954:	f000 f81c 	bl	8008990 <__sfp>
 8008958:	60a0      	str	r0, [r4, #8]
 800895a:	4620      	mov	r0, r4
 800895c:	f000 f818 	bl	8008990 <__sfp>
 8008960:	2200      	movs	r2, #0
 8008962:	60e0      	str	r0, [r4, #12]
 8008964:	2104      	movs	r1, #4
 8008966:	6860      	ldr	r0, [r4, #4]
 8008968:	f7ff ff82 	bl	8008870 <std>
 800896c:	68a0      	ldr	r0, [r4, #8]
 800896e:	2201      	movs	r2, #1
 8008970:	2109      	movs	r1, #9
 8008972:	f7ff ff7d 	bl	8008870 <std>
 8008976:	68e0      	ldr	r0, [r4, #12]
 8008978:	2202      	movs	r2, #2
 800897a:	2112      	movs	r1, #18
 800897c:	f7ff ff78 	bl	8008870 <std>
 8008980:	2301      	movs	r3, #1
 8008982:	61a3      	str	r3, [r4, #24]
 8008984:	e7d2      	b.n	800892c <__sinit+0xc>
 8008986:	bf00      	nop
 8008988:	08009954 	.word	0x08009954
 800898c:	080088b9 	.word	0x080088b9

08008990 <__sfp>:
 8008990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008992:	4607      	mov	r7, r0
 8008994:	f7ff ffac 	bl	80088f0 <__sfp_lock_acquire>
 8008998:	4b1e      	ldr	r3, [pc, #120]	; (8008a14 <__sfp+0x84>)
 800899a:	681e      	ldr	r6, [r3, #0]
 800899c:	69b3      	ldr	r3, [r6, #24]
 800899e:	b913      	cbnz	r3, 80089a6 <__sfp+0x16>
 80089a0:	4630      	mov	r0, r6
 80089a2:	f7ff ffbd 	bl	8008920 <__sinit>
 80089a6:	3648      	adds	r6, #72	; 0x48
 80089a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	d503      	bpl.n	80089b8 <__sfp+0x28>
 80089b0:	6833      	ldr	r3, [r6, #0]
 80089b2:	b30b      	cbz	r3, 80089f8 <__sfp+0x68>
 80089b4:	6836      	ldr	r6, [r6, #0]
 80089b6:	e7f7      	b.n	80089a8 <__sfp+0x18>
 80089b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089bc:	b9d5      	cbnz	r5, 80089f4 <__sfp+0x64>
 80089be:	4b16      	ldr	r3, [pc, #88]	; (8008a18 <__sfp+0x88>)
 80089c0:	60e3      	str	r3, [r4, #12]
 80089c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089c6:	6665      	str	r5, [r4, #100]	; 0x64
 80089c8:	f000 f847 	bl	8008a5a <__retarget_lock_init_recursive>
 80089cc:	f7ff ff96 	bl	80088fc <__sfp_lock_release>
 80089d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80089d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80089d8:	6025      	str	r5, [r4, #0]
 80089da:	61a5      	str	r5, [r4, #24]
 80089dc:	2208      	movs	r2, #8
 80089de:	4629      	mov	r1, r5
 80089e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089e4:	f7fd fb08 	bl	8005ff8 <memset>
 80089e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089f0:	4620      	mov	r0, r4
 80089f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f4:	3468      	adds	r4, #104	; 0x68
 80089f6:	e7d9      	b.n	80089ac <__sfp+0x1c>
 80089f8:	2104      	movs	r1, #4
 80089fa:	4638      	mov	r0, r7
 80089fc:	f7ff ff62 	bl	80088c4 <__sfmoreglue>
 8008a00:	4604      	mov	r4, r0
 8008a02:	6030      	str	r0, [r6, #0]
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d1d5      	bne.n	80089b4 <__sfp+0x24>
 8008a08:	f7ff ff78 	bl	80088fc <__sfp_lock_release>
 8008a0c:	230c      	movs	r3, #12
 8008a0e:	603b      	str	r3, [r7, #0]
 8008a10:	e7ee      	b.n	80089f0 <__sfp+0x60>
 8008a12:	bf00      	nop
 8008a14:	08009954 	.word	0x08009954
 8008a18:	ffff0001 	.word	0xffff0001

08008a1c <_fwalk_reent>:
 8008a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a20:	4606      	mov	r6, r0
 8008a22:	4688      	mov	r8, r1
 8008a24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a28:	2700      	movs	r7, #0
 8008a2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a2e:	f1b9 0901 	subs.w	r9, r9, #1
 8008a32:	d505      	bpl.n	8008a40 <_fwalk_reent+0x24>
 8008a34:	6824      	ldr	r4, [r4, #0]
 8008a36:	2c00      	cmp	r4, #0
 8008a38:	d1f7      	bne.n	8008a2a <_fwalk_reent+0xe>
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a40:	89ab      	ldrh	r3, [r5, #12]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d907      	bls.n	8008a56 <_fwalk_reent+0x3a>
 8008a46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	d003      	beq.n	8008a56 <_fwalk_reent+0x3a>
 8008a4e:	4629      	mov	r1, r5
 8008a50:	4630      	mov	r0, r6
 8008a52:	47c0      	blx	r8
 8008a54:	4307      	orrs	r7, r0
 8008a56:	3568      	adds	r5, #104	; 0x68
 8008a58:	e7e9      	b.n	8008a2e <_fwalk_reent+0x12>

08008a5a <__retarget_lock_init_recursive>:
 8008a5a:	4770      	bx	lr

08008a5c <__retarget_lock_acquire_recursive>:
 8008a5c:	4770      	bx	lr

08008a5e <__retarget_lock_release_recursive>:
 8008a5e:	4770      	bx	lr

08008a60 <__swhatbuf_r>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	460e      	mov	r6, r1
 8008a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a68:	2900      	cmp	r1, #0
 8008a6a:	b096      	sub	sp, #88	; 0x58
 8008a6c:	4614      	mov	r4, r2
 8008a6e:	461d      	mov	r5, r3
 8008a70:	da07      	bge.n	8008a82 <__swhatbuf_r+0x22>
 8008a72:	2300      	movs	r3, #0
 8008a74:	602b      	str	r3, [r5, #0]
 8008a76:	89b3      	ldrh	r3, [r6, #12]
 8008a78:	061a      	lsls	r2, r3, #24
 8008a7a:	d410      	bmi.n	8008a9e <__swhatbuf_r+0x3e>
 8008a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a80:	e00e      	b.n	8008aa0 <__swhatbuf_r+0x40>
 8008a82:	466a      	mov	r2, sp
 8008a84:	f000 f902 	bl	8008c8c <_fstat_r>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	dbf2      	blt.n	8008a72 <__swhatbuf_r+0x12>
 8008a8c:	9a01      	ldr	r2, [sp, #4]
 8008a8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a96:	425a      	negs	r2, r3
 8008a98:	415a      	adcs	r2, r3
 8008a9a:	602a      	str	r2, [r5, #0]
 8008a9c:	e7ee      	b.n	8008a7c <__swhatbuf_r+0x1c>
 8008a9e:	2340      	movs	r3, #64	; 0x40
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	b016      	add	sp, #88	; 0x58
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}

08008aa8 <__smakebuf_r>:
 8008aa8:	898b      	ldrh	r3, [r1, #12]
 8008aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008aac:	079d      	lsls	r5, r3, #30
 8008aae:	4606      	mov	r6, r0
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	d507      	bpl.n	8008ac4 <__smakebuf_r+0x1c>
 8008ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	6123      	str	r3, [r4, #16]
 8008abc:	2301      	movs	r3, #1
 8008abe:	6163      	str	r3, [r4, #20]
 8008ac0:	b002      	add	sp, #8
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	ab01      	add	r3, sp, #4
 8008ac6:	466a      	mov	r2, sp
 8008ac8:	f7ff ffca 	bl	8008a60 <__swhatbuf_r>
 8008acc:	9900      	ldr	r1, [sp, #0]
 8008ace:	4605      	mov	r5, r0
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f7ff f987 	bl	8007de4 <_malloc_r>
 8008ad6:	b948      	cbnz	r0, 8008aec <__smakebuf_r+0x44>
 8008ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008adc:	059a      	lsls	r2, r3, #22
 8008ade:	d4ef      	bmi.n	8008ac0 <__smakebuf_r+0x18>
 8008ae0:	f023 0303 	bic.w	r3, r3, #3
 8008ae4:	f043 0302 	orr.w	r3, r3, #2
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	e7e3      	b.n	8008ab4 <__smakebuf_r+0xc>
 8008aec:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <__smakebuf_r+0x7c>)
 8008aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	6020      	str	r0, [r4, #0]
 8008af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	6163      	str	r3, [r4, #20]
 8008afe:	9b01      	ldr	r3, [sp, #4]
 8008b00:	6120      	str	r0, [r4, #16]
 8008b02:	b15b      	cbz	r3, 8008b1c <__smakebuf_r+0x74>
 8008b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f000 f8d1 	bl	8008cb0 <_isatty_r>
 8008b0e:	b128      	cbz	r0, 8008b1c <__smakebuf_r+0x74>
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	f023 0303 	bic.w	r3, r3, #3
 8008b16:	f043 0301 	orr.w	r3, r3, #1
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	89a0      	ldrh	r0, [r4, #12]
 8008b1e:	4305      	orrs	r5, r0
 8008b20:	81a5      	strh	r5, [r4, #12]
 8008b22:	e7cd      	b.n	8008ac0 <__smakebuf_r+0x18>
 8008b24:	080088b9 	.word	0x080088b9

08008b28 <_malloc_usable_size_r>:
 8008b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b2c:	1f18      	subs	r0, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bfbc      	itt	lt
 8008b32:	580b      	ldrlt	r3, [r1, r0]
 8008b34:	18c0      	addlt	r0, r0, r3
 8008b36:	4770      	bx	lr

08008b38 <_raise_r>:
 8008b38:	291f      	cmp	r1, #31
 8008b3a:	b538      	push	{r3, r4, r5, lr}
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	460d      	mov	r5, r1
 8008b40:	d904      	bls.n	8008b4c <_raise_r+0x14>
 8008b42:	2316      	movs	r3, #22
 8008b44:	6003      	str	r3, [r0, #0]
 8008b46:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b4e:	b112      	cbz	r2, 8008b56 <_raise_r+0x1e>
 8008b50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b54:	b94b      	cbnz	r3, 8008b6a <_raise_r+0x32>
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 f830 	bl	8008bbc <_getpid_r>
 8008b5c:	462a      	mov	r2, r5
 8008b5e:	4601      	mov	r1, r0
 8008b60:	4620      	mov	r0, r4
 8008b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b66:	f000 b817 	b.w	8008b98 <_kill_r>
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d00a      	beq.n	8008b84 <_raise_r+0x4c>
 8008b6e:	1c59      	adds	r1, r3, #1
 8008b70:	d103      	bne.n	8008b7a <_raise_r+0x42>
 8008b72:	2316      	movs	r3, #22
 8008b74:	6003      	str	r3, [r0, #0]
 8008b76:	2001      	movs	r0, #1
 8008b78:	e7e7      	b.n	8008b4a <_raise_r+0x12>
 8008b7a:	2400      	movs	r4, #0
 8008b7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b80:	4628      	mov	r0, r5
 8008b82:	4798      	blx	r3
 8008b84:	2000      	movs	r0, #0
 8008b86:	e7e0      	b.n	8008b4a <_raise_r+0x12>

08008b88 <raise>:
 8008b88:	4b02      	ldr	r3, [pc, #8]	; (8008b94 <raise+0xc>)
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	6818      	ldr	r0, [r3, #0]
 8008b8e:	f7ff bfd3 	b.w	8008b38 <_raise_r>
 8008b92:	bf00      	nop
 8008b94:	20000014 	.word	0x20000014

08008b98 <_kill_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d07      	ldr	r5, [pc, #28]	; (8008bb8 <_kill_r+0x20>)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	602b      	str	r3, [r5, #0]
 8008ba6:	f7fa f8b3 	bl	8002d10 <_kill>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	d102      	bne.n	8008bb4 <_kill_r+0x1c>
 8008bae:	682b      	ldr	r3, [r5, #0]
 8008bb0:	b103      	cbz	r3, 8008bb4 <_kill_r+0x1c>
 8008bb2:	6023      	str	r3, [r4, #0]
 8008bb4:	bd38      	pop	{r3, r4, r5, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20000888 	.word	0x20000888

08008bbc <_getpid_r>:
 8008bbc:	f7fa b8a0 	b.w	8002d00 <_getpid>

08008bc0 <__sread>:
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc8:	f000 f894 	bl	8008cf4 <_read_r>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	bfab      	itete	ge
 8008bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8008bd4:	181b      	addge	r3, r3, r0
 8008bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bda:	bfac      	ite	ge
 8008bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bde:	81a3      	strhlt	r3, [r4, #12]
 8008be0:	bd10      	pop	{r4, pc}

08008be2 <__swrite>:
 8008be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be6:	461f      	mov	r7, r3
 8008be8:	898b      	ldrh	r3, [r1, #12]
 8008bea:	05db      	lsls	r3, r3, #23
 8008bec:	4605      	mov	r5, r0
 8008bee:	460c      	mov	r4, r1
 8008bf0:	4616      	mov	r6, r2
 8008bf2:	d505      	bpl.n	8008c00 <__swrite+0x1e>
 8008bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f000 f868 	bl	8008cd0 <_lseek_r>
 8008c00:	89a3      	ldrh	r3, [r4, #12]
 8008c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c0a:	81a3      	strh	r3, [r4, #12]
 8008c0c:	4632      	mov	r2, r6
 8008c0e:	463b      	mov	r3, r7
 8008c10:	4628      	mov	r0, r5
 8008c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c16:	f000 b817 	b.w	8008c48 <_write_r>

08008c1a <__sseek>:
 8008c1a:	b510      	push	{r4, lr}
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c22:	f000 f855 	bl	8008cd0 <_lseek_r>
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	bf15      	itete	ne
 8008c2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c36:	81a3      	strheq	r3, [r4, #12]
 8008c38:	bf18      	it	ne
 8008c3a:	81a3      	strhne	r3, [r4, #12]
 8008c3c:	bd10      	pop	{r4, pc}

08008c3e <__sclose>:
 8008c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c42:	f000 b813 	b.w	8008c6c <_close_r>
	...

08008c48 <_write_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d07      	ldr	r5, [pc, #28]	; (8008c68 <_write_r+0x20>)
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	4608      	mov	r0, r1
 8008c50:	4611      	mov	r1, r2
 8008c52:	2200      	movs	r2, #0
 8008c54:	602a      	str	r2, [r5, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	f7fa f891 	bl	8002d7e <_write>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_write_r+0x1e>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_write_r+0x1e>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	20000888 	.word	0x20000888

08008c6c <_close_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4d06      	ldr	r5, [pc, #24]	; (8008c88 <_close_r+0x1c>)
 8008c70:	2300      	movs	r3, #0
 8008c72:	4604      	mov	r4, r0
 8008c74:	4608      	mov	r0, r1
 8008c76:	602b      	str	r3, [r5, #0]
 8008c78:	f7fa f89d 	bl	8002db6 <_close>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_close_r+0x1a>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_close_r+0x1a>
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	20000888 	.word	0x20000888

08008c8c <_fstat_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d07      	ldr	r5, [pc, #28]	; (8008cac <_fstat_r+0x20>)
 8008c90:	2300      	movs	r3, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	602b      	str	r3, [r5, #0]
 8008c9a:	f7fa f898 	bl	8002dce <_fstat>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d102      	bne.n	8008ca8 <_fstat_r+0x1c>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	b103      	cbz	r3, 8008ca8 <_fstat_r+0x1c>
 8008ca6:	6023      	str	r3, [r4, #0]
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
 8008caa:	bf00      	nop
 8008cac:	20000888 	.word	0x20000888

08008cb0 <_isatty_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d06      	ldr	r5, [pc, #24]	; (8008ccc <_isatty_r+0x1c>)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	602b      	str	r3, [r5, #0]
 8008cbc:	f7fa f897 	bl	8002dee <_isatty>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_isatty_r+0x1a>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_isatty_r+0x1a>
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	20000888 	.word	0x20000888

08008cd0 <_lseek_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4d07      	ldr	r5, [pc, #28]	; (8008cf0 <_lseek_r+0x20>)
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	4608      	mov	r0, r1
 8008cd8:	4611      	mov	r1, r2
 8008cda:	2200      	movs	r2, #0
 8008cdc:	602a      	str	r2, [r5, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f7fa f890 	bl	8002e04 <_lseek>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d102      	bne.n	8008cee <_lseek_r+0x1e>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b103      	cbz	r3, 8008cee <_lseek_r+0x1e>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	20000888 	.word	0x20000888

08008cf4 <_read_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	4d07      	ldr	r5, [pc, #28]	; (8008d14 <_read_r+0x20>)
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	4608      	mov	r0, r1
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	2200      	movs	r2, #0
 8008d00:	602a      	str	r2, [r5, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	f7fa f81e 	bl	8002d44 <_read>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_read_r+0x1e>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_read_r+0x1e>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	20000888 	.word	0x20000888

08008d18 <atan>:
 8008d18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	ec55 4b10 	vmov	r4, r5, d0
 8008d20:	4bc3      	ldr	r3, [pc, #780]	; (8009030 <atan+0x318>)
 8008d22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d26:	429e      	cmp	r6, r3
 8008d28:	46ab      	mov	fp, r5
 8008d2a:	dd18      	ble.n	8008d5e <atan+0x46>
 8008d2c:	4bc1      	ldr	r3, [pc, #772]	; (8009034 <atan+0x31c>)
 8008d2e:	429e      	cmp	r6, r3
 8008d30:	dc01      	bgt.n	8008d36 <atan+0x1e>
 8008d32:	d109      	bne.n	8008d48 <atan+0x30>
 8008d34:	b144      	cbz	r4, 8008d48 <atan+0x30>
 8008d36:	4622      	mov	r2, r4
 8008d38:	462b      	mov	r3, r5
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	f7f7 faad 	bl	800029c <__adddf3>
 8008d42:	4604      	mov	r4, r0
 8008d44:	460d      	mov	r5, r1
 8008d46:	e006      	b.n	8008d56 <atan+0x3e>
 8008d48:	f1bb 0f00 	cmp.w	fp, #0
 8008d4c:	f300 8131 	bgt.w	8008fb2 <atan+0x29a>
 8008d50:	a59b      	add	r5, pc, #620	; (adr r5, 8008fc0 <atan+0x2a8>)
 8008d52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d56:	ec45 4b10 	vmov	d0, r4, r5
 8008d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	4bb6      	ldr	r3, [pc, #728]	; (8009038 <atan+0x320>)
 8008d60:	429e      	cmp	r6, r3
 8008d62:	dc14      	bgt.n	8008d8e <atan+0x76>
 8008d64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008d68:	429e      	cmp	r6, r3
 8008d6a:	dc0d      	bgt.n	8008d88 <atan+0x70>
 8008d6c:	a396      	add	r3, pc, #600	; (adr r3, 8008fc8 <atan+0x2b0>)
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	ee10 0a10 	vmov	r0, s0
 8008d76:	4629      	mov	r1, r5
 8008d78:	f7f7 fa90 	bl	800029c <__adddf3>
 8008d7c:	4baf      	ldr	r3, [pc, #700]	; (800903c <atan+0x324>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f7f7 fed2 	bl	8000b28 <__aeabi_dcmpgt>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d1e6      	bne.n	8008d56 <atan+0x3e>
 8008d88:	f04f 3aff 	mov.w	sl, #4294967295
 8008d8c:	e02b      	b.n	8008de6 <atan+0xce>
 8008d8e:	f000 f963 	bl	8009058 <fabs>
 8008d92:	4bab      	ldr	r3, [pc, #684]	; (8009040 <atan+0x328>)
 8008d94:	429e      	cmp	r6, r3
 8008d96:	ec55 4b10 	vmov	r4, r5, d0
 8008d9a:	f300 80bf 	bgt.w	8008f1c <atan+0x204>
 8008d9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008da2:	429e      	cmp	r6, r3
 8008da4:	f300 80a0 	bgt.w	8008ee8 <atan+0x1d0>
 8008da8:	ee10 2a10 	vmov	r2, s0
 8008dac:	ee10 0a10 	vmov	r0, s0
 8008db0:	462b      	mov	r3, r5
 8008db2:	4629      	mov	r1, r5
 8008db4:	f7f7 fa72 	bl	800029c <__adddf3>
 8008db8:	4ba0      	ldr	r3, [pc, #640]	; (800903c <atan+0x324>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f7f7 fa6c 	bl	8000298 <__aeabi_dsub>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	460f      	mov	r7, r1
 8008dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dca:	4620      	mov	r0, r4
 8008dcc:	4629      	mov	r1, r5
 8008dce:	f7f7 fa65 	bl	800029c <__adddf3>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	4639      	mov	r1, r7
 8008dda:	f7f7 fd3f 	bl	800085c <__aeabi_ddiv>
 8008dde:	f04f 0a00 	mov.w	sl, #0
 8008de2:	4604      	mov	r4, r0
 8008de4:	460d      	mov	r5, r1
 8008de6:	4622      	mov	r2, r4
 8008de8:	462b      	mov	r3, r5
 8008dea:	4620      	mov	r0, r4
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7f7 fc0b 	bl	8000608 <__aeabi_dmul>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4680      	mov	r8, r0
 8008df8:	4689      	mov	r9, r1
 8008dfa:	f7f7 fc05 	bl	8000608 <__aeabi_dmul>
 8008dfe:	a374      	add	r3, pc, #464	; (adr r3, 8008fd0 <atan+0x2b8>)
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	4606      	mov	r6, r0
 8008e06:	460f      	mov	r7, r1
 8008e08:	f7f7 fbfe 	bl	8000608 <__aeabi_dmul>
 8008e0c:	a372      	add	r3, pc, #456	; (adr r3, 8008fd8 <atan+0x2c0>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f7f7 fa43 	bl	800029c <__adddf3>
 8008e16:	4632      	mov	r2, r6
 8008e18:	463b      	mov	r3, r7
 8008e1a:	f7f7 fbf5 	bl	8000608 <__aeabi_dmul>
 8008e1e:	a370      	add	r3, pc, #448	; (adr r3, 8008fe0 <atan+0x2c8>)
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	f7f7 fa3a 	bl	800029c <__adddf3>
 8008e28:	4632      	mov	r2, r6
 8008e2a:	463b      	mov	r3, r7
 8008e2c:	f7f7 fbec 	bl	8000608 <__aeabi_dmul>
 8008e30:	a36d      	add	r3, pc, #436	; (adr r3, 8008fe8 <atan+0x2d0>)
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	f7f7 fa31 	bl	800029c <__adddf3>
 8008e3a:	4632      	mov	r2, r6
 8008e3c:	463b      	mov	r3, r7
 8008e3e:	f7f7 fbe3 	bl	8000608 <__aeabi_dmul>
 8008e42:	a36b      	add	r3, pc, #428	; (adr r3, 8008ff0 <atan+0x2d8>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fa28 	bl	800029c <__adddf3>
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	463b      	mov	r3, r7
 8008e50:	f7f7 fbda 	bl	8000608 <__aeabi_dmul>
 8008e54:	a368      	add	r3, pc, #416	; (adr r3, 8008ff8 <atan+0x2e0>)
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	f7f7 fa1f 	bl	800029c <__adddf3>
 8008e5e:	4642      	mov	r2, r8
 8008e60:	464b      	mov	r3, r9
 8008e62:	f7f7 fbd1 	bl	8000608 <__aeabi_dmul>
 8008e66:	a366      	add	r3, pc, #408	; (adr r3, 8009000 <atan+0x2e8>)
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	4680      	mov	r8, r0
 8008e6e:	4689      	mov	r9, r1
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 fbc8 	bl	8000608 <__aeabi_dmul>
 8008e78:	a363      	add	r3, pc, #396	; (adr r3, 8009008 <atan+0x2f0>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fa0b 	bl	8000298 <__aeabi_dsub>
 8008e82:	4632      	mov	r2, r6
 8008e84:	463b      	mov	r3, r7
 8008e86:	f7f7 fbbf 	bl	8000608 <__aeabi_dmul>
 8008e8a:	a361      	add	r3, pc, #388	; (adr r3, 8009010 <atan+0x2f8>)
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f7f7 fa02 	bl	8000298 <__aeabi_dsub>
 8008e94:	4632      	mov	r2, r6
 8008e96:	463b      	mov	r3, r7
 8008e98:	f7f7 fbb6 	bl	8000608 <__aeabi_dmul>
 8008e9c:	a35e      	add	r3, pc, #376	; (adr r3, 8009018 <atan+0x300>)
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f7f7 f9f9 	bl	8000298 <__aeabi_dsub>
 8008ea6:	4632      	mov	r2, r6
 8008ea8:	463b      	mov	r3, r7
 8008eaa:	f7f7 fbad 	bl	8000608 <__aeabi_dmul>
 8008eae:	a35c      	add	r3, pc, #368	; (adr r3, 8009020 <atan+0x308>)
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f7f7 f9f0 	bl	8000298 <__aeabi_dsub>
 8008eb8:	4632      	mov	r2, r6
 8008eba:	463b      	mov	r3, r7
 8008ebc:	f7f7 fba4 	bl	8000608 <__aeabi_dmul>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4640      	mov	r0, r8
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	f7f7 f9e8 	bl	800029c <__adddf3>
 8008ecc:	4622      	mov	r2, r4
 8008ece:	462b      	mov	r3, r5
 8008ed0:	f7f7 fb9a 	bl	8000608 <__aeabi_dmul>
 8008ed4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	d14b      	bne.n	8008f76 <atan+0x25e>
 8008ede:	4620      	mov	r0, r4
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f7f7 f9d9 	bl	8000298 <__aeabi_dsub>
 8008ee6:	e72c      	b.n	8008d42 <atan+0x2a>
 8008ee8:	ee10 0a10 	vmov	r0, s0
 8008eec:	4b53      	ldr	r3, [pc, #332]	; (800903c <atan+0x324>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7f7 f9d1 	bl	8000298 <__aeabi_dsub>
 8008ef6:	4b51      	ldr	r3, [pc, #324]	; (800903c <atan+0x324>)
 8008ef8:	4606      	mov	r6, r0
 8008efa:	460f      	mov	r7, r1
 8008efc:	2200      	movs	r2, #0
 8008efe:	4620      	mov	r0, r4
 8008f00:	4629      	mov	r1, r5
 8008f02:	f7f7 f9cb 	bl	800029c <__adddf3>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	4639      	mov	r1, r7
 8008f0e:	f7f7 fca5 	bl	800085c <__aeabi_ddiv>
 8008f12:	f04f 0a01 	mov.w	sl, #1
 8008f16:	4604      	mov	r4, r0
 8008f18:	460d      	mov	r5, r1
 8008f1a:	e764      	b.n	8008de6 <atan+0xce>
 8008f1c:	4b49      	ldr	r3, [pc, #292]	; (8009044 <atan+0x32c>)
 8008f1e:	429e      	cmp	r6, r3
 8008f20:	da1d      	bge.n	8008f5e <atan+0x246>
 8008f22:	ee10 0a10 	vmov	r0, s0
 8008f26:	4b48      	ldr	r3, [pc, #288]	; (8009048 <atan+0x330>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f7f7 f9b4 	bl	8000298 <__aeabi_dsub>
 8008f30:	4b45      	ldr	r3, [pc, #276]	; (8009048 <atan+0x330>)
 8008f32:	4606      	mov	r6, r0
 8008f34:	460f      	mov	r7, r1
 8008f36:	2200      	movs	r2, #0
 8008f38:	4620      	mov	r0, r4
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	f7f7 fb64 	bl	8000608 <__aeabi_dmul>
 8008f40:	4b3e      	ldr	r3, [pc, #248]	; (800903c <atan+0x324>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	f7f7 f9aa 	bl	800029c <__adddf3>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f7f7 fc84 	bl	800085c <__aeabi_ddiv>
 8008f54:	f04f 0a02 	mov.w	sl, #2
 8008f58:	4604      	mov	r4, r0
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	e743      	b.n	8008de6 <atan+0xce>
 8008f5e:	462b      	mov	r3, r5
 8008f60:	ee10 2a10 	vmov	r2, s0
 8008f64:	4939      	ldr	r1, [pc, #228]	; (800904c <atan+0x334>)
 8008f66:	2000      	movs	r0, #0
 8008f68:	f7f7 fc78 	bl	800085c <__aeabi_ddiv>
 8008f6c:	f04f 0a03 	mov.w	sl, #3
 8008f70:	4604      	mov	r4, r0
 8008f72:	460d      	mov	r5, r1
 8008f74:	e737      	b.n	8008de6 <atan+0xce>
 8008f76:	4b36      	ldr	r3, [pc, #216]	; (8009050 <atan+0x338>)
 8008f78:	4e36      	ldr	r6, [pc, #216]	; (8009054 <atan+0x33c>)
 8008f7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008f7e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008f82:	e9da 2300 	ldrd	r2, r3, [sl]
 8008f86:	f7f7 f987 	bl	8000298 <__aeabi_dsub>
 8008f8a:	4622      	mov	r2, r4
 8008f8c:	462b      	mov	r3, r5
 8008f8e:	f7f7 f983 	bl	8000298 <__aeabi_dsub>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008f9a:	f7f7 f97d 	bl	8000298 <__aeabi_dsub>
 8008f9e:	f1bb 0f00 	cmp.w	fp, #0
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	f6bf aed6 	bge.w	8008d56 <atan+0x3e>
 8008faa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fae:	461d      	mov	r5, r3
 8008fb0:	e6d1      	b.n	8008d56 <atan+0x3e>
 8008fb2:	a51d      	add	r5, pc, #116	; (adr r5, 8009028 <atan+0x310>)
 8008fb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008fb8:	e6cd      	b.n	8008d56 <atan+0x3e>
 8008fba:	bf00      	nop
 8008fbc:	f3af 8000 	nop.w
 8008fc0:	54442d18 	.word	0x54442d18
 8008fc4:	bff921fb 	.word	0xbff921fb
 8008fc8:	8800759c 	.word	0x8800759c
 8008fcc:	7e37e43c 	.word	0x7e37e43c
 8008fd0:	e322da11 	.word	0xe322da11
 8008fd4:	3f90ad3a 	.word	0x3f90ad3a
 8008fd8:	24760deb 	.word	0x24760deb
 8008fdc:	3fa97b4b 	.word	0x3fa97b4b
 8008fe0:	a0d03d51 	.word	0xa0d03d51
 8008fe4:	3fb10d66 	.word	0x3fb10d66
 8008fe8:	c54c206e 	.word	0xc54c206e
 8008fec:	3fb745cd 	.word	0x3fb745cd
 8008ff0:	920083ff 	.word	0x920083ff
 8008ff4:	3fc24924 	.word	0x3fc24924
 8008ff8:	5555550d 	.word	0x5555550d
 8008ffc:	3fd55555 	.word	0x3fd55555
 8009000:	2c6a6c2f 	.word	0x2c6a6c2f
 8009004:	bfa2b444 	.word	0xbfa2b444
 8009008:	52defd9a 	.word	0x52defd9a
 800900c:	3fadde2d 	.word	0x3fadde2d
 8009010:	af749a6d 	.word	0xaf749a6d
 8009014:	3fb3b0f2 	.word	0x3fb3b0f2
 8009018:	fe231671 	.word	0xfe231671
 800901c:	3fbc71c6 	.word	0x3fbc71c6
 8009020:	9998ebc4 	.word	0x9998ebc4
 8009024:	3fc99999 	.word	0x3fc99999
 8009028:	54442d18 	.word	0x54442d18
 800902c:	3ff921fb 	.word	0x3ff921fb
 8009030:	440fffff 	.word	0x440fffff
 8009034:	7ff00000 	.word	0x7ff00000
 8009038:	3fdbffff 	.word	0x3fdbffff
 800903c:	3ff00000 	.word	0x3ff00000
 8009040:	3ff2ffff 	.word	0x3ff2ffff
 8009044:	40038000 	.word	0x40038000
 8009048:	3ff80000 	.word	0x3ff80000
 800904c:	bff00000 	.word	0xbff00000
 8009050:	08009d58 	.word	0x08009d58
 8009054:	08009d38 	.word	0x08009d38

08009058 <fabs>:
 8009058:	ec51 0b10 	vmov	r0, r1, d0
 800905c:	ee10 2a10 	vmov	r2, s0
 8009060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009064:	ec43 2b10 	vmov	d0, r2, r3
 8009068:	4770      	bx	lr

0800906a <atan2>:
 800906a:	f000 b835 	b.w	80090d8 <__ieee754_atan2>
	...

08009070 <sqrt>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	ed2d 8b02 	vpush	{d8}
 8009076:	ec55 4b10 	vmov	r4, r5, d0
 800907a:	f000 f8f7 	bl	800926c <__ieee754_sqrt>
 800907e:	4b15      	ldr	r3, [pc, #84]	; (80090d4 <sqrt+0x64>)
 8009080:	eeb0 8a40 	vmov.f32	s16, s0
 8009084:	eef0 8a60 	vmov.f32	s17, s1
 8009088:	f993 3000 	ldrsb.w	r3, [r3]
 800908c:	3301      	adds	r3, #1
 800908e:	d019      	beq.n	80090c4 <sqrt+0x54>
 8009090:	4622      	mov	r2, r4
 8009092:	462b      	mov	r3, r5
 8009094:	4620      	mov	r0, r4
 8009096:	4629      	mov	r1, r5
 8009098:	f7f7 fd50 	bl	8000b3c <__aeabi_dcmpun>
 800909c:	b990      	cbnz	r0, 80090c4 <sqrt+0x54>
 800909e:	2200      	movs	r2, #0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4620      	mov	r0, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7f7 fd21 	bl	8000aec <__aeabi_dcmplt>
 80090aa:	b158      	cbz	r0, 80090c4 <sqrt+0x54>
 80090ac:	f7fc ff6c 	bl	8005f88 <__errno>
 80090b0:	2321      	movs	r3, #33	; 0x21
 80090b2:	6003      	str	r3, [r0, #0]
 80090b4:	2200      	movs	r2, #0
 80090b6:	2300      	movs	r3, #0
 80090b8:	4610      	mov	r0, r2
 80090ba:	4619      	mov	r1, r3
 80090bc:	f7f7 fbce 	bl	800085c <__aeabi_ddiv>
 80090c0:	ec41 0b18 	vmov	d8, r0, r1
 80090c4:	eeb0 0a48 	vmov.f32	s0, s16
 80090c8:	eef0 0a68 	vmov.f32	s1, s17
 80090cc:	ecbd 8b02 	vpop	{d8}
 80090d0:	bd38      	pop	{r3, r4, r5, pc}
 80090d2:	bf00      	nop
 80090d4:	200001e4 	.word	0x200001e4

080090d8 <__ieee754_atan2>:
 80090d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090dc:	ec57 6b11 	vmov	r6, r7, d1
 80090e0:	4273      	negs	r3, r6
 80090e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009268 <__ieee754_atan2+0x190>
 80090e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80090ea:	4333      	orrs	r3, r6
 80090ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80090f0:	4573      	cmp	r3, lr
 80090f2:	ec51 0b10 	vmov	r0, r1, d0
 80090f6:	ee11 8a10 	vmov	r8, s2
 80090fa:	d80a      	bhi.n	8009112 <__ieee754_atan2+0x3a>
 80090fc:	4244      	negs	r4, r0
 80090fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009102:	4304      	orrs	r4, r0
 8009104:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009108:	4574      	cmp	r4, lr
 800910a:	ee10 9a10 	vmov	r9, s0
 800910e:	468c      	mov	ip, r1
 8009110:	d907      	bls.n	8009122 <__ieee754_atan2+0x4a>
 8009112:	4632      	mov	r2, r6
 8009114:	463b      	mov	r3, r7
 8009116:	f7f7 f8c1 	bl	800029c <__adddf3>
 800911a:	ec41 0b10 	vmov	d0, r0, r1
 800911e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009122:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009126:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800912a:	4334      	orrs	r4, r6
 800912c:	d103      	bne.n	8009136 <__ieee754_atan2+0x5e>
 800912e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009132:	f7ff bdf1 	b.w	8008d18 <atan>
 8009136:	17bc      	asrs	r4, r7, #30
 8009138:	f004 0402 	and.w	r4, r4, #2
 800913c:	ea53 0909 	orrs.w	r9, r3, r9
 8009140:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009144:	d107      	bne.n	8009156 <__ieee754_atan2+0x7e>
 8009146:	2c02      	cmp	r4, #2
 8009148:	d060      	beq.n	800920c <__ieee754_atan2+0x134>
 800914a:	2c03      	cmp	r4, #3
 800914c:	d1e5      	bne.n	800911a <__ieee754_atan2+0x42>
 800914e:	a142      	add	r1, pc, #264	; (adr r1, 8009258 <__ieee754_atan2+0x180>)
 8009150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009154:	e7e1      	b.n	800911a <__ieee754_atan2+0x42>
 8009156:	ea52 0808 	orrs.w	r8, r2, r8
 800915a:	d106      	bne.n	800916a <__ieee754_atan2+0x92>
 800915c:	f1bc 0f00 	cmp.w	ip, #0
 8009160:	da5f      	bge.n	8009222 <__ieee754_atan2+0x14a>
 8009162:	a13f      	add	r1, pc, #252	; (adr r1, 8009260 <__ieee754_atan2+0x188>)
 8009164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009168:	e7d7      	b.n	800911a <__ieee754_atan2+0x42>
 800916a:	4572      	cmp	r2, lr
 800916c:	d10f      	bne.n	800918e <__ieee754_atan2+0xb6>
 800916e:	4293      	cmp	r3, r2
 8009170:	f104 34ff 	add.w	r4, r4, #4294967295
 8009174:	d107      	bne.n	8009186 <__ieee754_atan2+0xae>
 8009176:	2c02      	cmp	r4, #2
 8009178:	d84c      	bhi.n	8009214 <__ieee754_atan2+0x13c>
 800917a:	4b35      	ldr	r3, [pc, #212]	; (8009250 <__ieee754_atan2+0x178>)
 800917c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009180:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009184:	e7c9      	b.n	800911a <__ieee754_atan2+0x42>
 8009186:	2c02      	cmp	r4, #2
 8009188:	d848      	bhi.n	800921c <__ieee754_atan2+0x144>
 800918a:	4b32      	ldr	r3, [pc, #200]	; (8009254 <__ieee754_atan2+0x17c>)
 800918c:	e7f6      	b.n	800917c <__ieee754_atan2+0xa4>
 800918e:	4573      	cmp	r3, lr
 8009190:	d0e4      	beq.n	800915c <__ieee754_atan2+0x84>
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009198:	ea4f 5223 	mov.w	r2, r3, asr #20
 800919c:	da1e      	bge.n	80091dc <__ieee754_atan2+0x104>
 800919e:	2f00      	cmp	r7, #0
 80091a0:	da01      	bge.n	80091a6 <__ieee754_atan2+0xce>
 80091a2:	323c      	adds	r2, #60	; 0x3c
 80091a4:	db1e      	blt.n	80091e4 <__ieee754_atan2+0x10c>
 80091a6:	4632      	mov	r2, r6
 80091a8:	463b      	mov	r3, r7
 80091aa:	f7f7 fb57 	bl	800085c <__aeabi_ddiv>
 80091ae:	ec41 0b10 	vmov	d0, r0, r1
 80091b2:	f7ff ff51 	bl	8009058 <fabs>
 80091b6:	f7ff fdaf 	bl	8008d18 <atan>
 80091ba:	ec51 0b10 	vmov	r0, r1, d0
 80091be:	2c01      	cmp	r4, #1
 80091c0:	d013      	beq.n	80091ea <__ieee754_atan2+0x112>
 80091c2:	2c02      	cmp	r4, #2
 80091c4:	d015      	beq.n	80091f2 <__ieee754_atan2+0x11a>
 80091c6:	2c00      	cmp	r4, #0
 80091c8:	d0a7      	beq.n	800911a <__ieee754_atan2+0x42>
 80091ca:	a319      	add	r3, pc, #100	; (adr r3, 8009230 <__ieee754_atan2+0x158>)
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f7f7 f862 	bl	8000298 <__aeabi_dsub>
 80091d4:	a318      	add	r3, pc, #96	; (adr r3, 8009238 <__ieee754_atan2+0x160>)
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	e014      	b.n	8009206 <__ieee754_atan2+0x12e>
 80091dc:	a118      	add	r1, pc, #96	; (adr r1, 8009240 <__ieee754_atan2+0x168>)
 80091de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091e2:	e7ec      	b.n	80091be <__ieee754_atan2+0xe6>
 80091e4:	2000      	movs	r0, #0
 80091e6:	2100      	movs	r1, #0
 80091e8:	e7e9      	b.n	80091be <__ieee754_atan2+0xe6>
 80091ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091ee:	4619      	mov	r1, r3
 80091f0:	e793      	b.n	800911a <__ieee754_atan2+0x42>
 80091f2:	a30f      	add	r3, pc, #60	; (adr r3, 8009230 <__ieee754_atan2+0x158>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 f84e 	bl	8000298 <__aeabi_dsub>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	a10d      	add	r1, pc, #52	; (adr r1, 8009238 <__ieee754_atan2+0x160>)
 8009202:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009206:	f7f7 f847 	bl	8000298 <__aeabi_dsub>
 800920a:	e786      	b.n	800911a <__ieee754_atan2+0x42>
 800920c:	a10a      	add	r1, pc, #40	; (adr r1, 8009238 <__ieee754_atan2+0x160>)
 800920e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009212:	e782      	b.n	800911a <__ieee754_atan2+0x42>
 8009214:	a10c      	add	r1, pc, #48	; (adr r1, 8009248 <__ieee754_atan2+0x170>)
 8009216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800921a:	e77e      	b.n	800911a <__ieee754_atan2+0x42>
 800921c:	2000      	movs	r0, #0
 800921e:	2100      	movs	r1, #0
 8009220:	e77b      	b.n	800911a <__ieee754_atan2+0x42>
 8009222:	a107      	add	r1, pc, #28	; (adr r1, 8009240 <__ieee754_atan2+0x168>)
 8009224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009228:	e777      	b.n	800911a <__ieee754_atan2+0x42>
 800922a:	bf00      	nop
 800922c:	f3af 8000 	nop.w
 8009230:	33145c07 	.word	0x33145c07
 8009234:	3ca1a626 	.word	0x3ca1a626
 8009238:	54442d18 	.word	0x54442d18
 800923c:	400921fb 	.word	0x400921fb
 8009240:	54442d18 	.word	0x54442d18
 8009244:	3ff921fb 	.word	0x3ff921fb
 8009248:	54442d18 	.word	0x54442d18
 800924c:	3fe921fb 	.word	0x3fe921fb
 8009250:	08009d78 	.word	0x08009d78
 8009254:	08009d90 	.word	0x08009d90
 8009258:	54442d18 	.word	0x54442d18
 800925c:	c00921fb 	.word	0xc00921fb
 8009260:	54442d18 	.word	0x54442d18
 8009264:	bff921fb 	.word	0xbff921fb
 8009268:	7ff00000 	.word	0x7ff00000

0800926c <__ieee754_sqrt>:
 800926c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009270:	ec55 4b10 	vmov	r4, r5, d0
 8009274:	4e56      	ldr	r6, [pc, #344]	; (80093d0 <__ieee754_sqrt+0x164>)
 8009276:	43ae      	bics	r6, r5
 8009278:	ee10 0a10 	vmov	r0, s0
 800927c:	ee10 3a10 	vmov	r3, s0
 8009280:	4629      	mov	r1, r5
 8009282:	462a      	mov	r2, r5
 8009284:	d110      	bne.n	80092a8 <__ieee754_sqrt+0x3c>
 8009286:	ee10 2a10 	vmov	r2, s0
 800928a:	462b      	mov	r3, r5
 800928c:	f7f7 f9bc 	bl	8000608 <__aeabi_dmul>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4620      	mov	r0, r4
 8009296:	4629      	mov	r1, r5
 8009298:	f7f7 f800 	bl	800029c <__adddf3>
 800929c:	4604      	mov	r4, r0
 800929e:	460d      	mov	r5, r1
 80092a0:	ec45 4b10 	vmov	d0, r4, r5
 80092a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a8:	2d00      	cmp	r5, #0
 80092aa:	dc10      	bgt.n	80092ce <__ieee754_sqrt+0x62>
 80092ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80092b0:	4330      	orrs	r0, r6
 80092b2:	d0f5      	beq.n	80092a0 <__ieee754_sqrt+0x34>
 80092b4:	b15d      	cbz	r5, 80092ce <__ieee754_sqrt+0x62>
 80092b6:	ee10 2a10 	vmov	r2, s0
 80092ba:	462b      	mov	r3, r5
 80092bc:	ee10 0a10 	vmov	r0, s0
 80092c0:	f7f6 ffea 	bl	8000298 <__aeabi_dsub>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	f7f7 fac8 	bl	800085c <__aeabi_ddiv>
 80092cc:	e7e6      	b.n	800929c <__ieee754_sqrt+0x30>
 80092ce:	1509      	asrs	r1, r1, #20
 80092d0:	d076      	beq.n	80093c0 <__ieee754_sqrt+0x154>
 80092d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80092d6:	07ce      	lsls	r6, r1, #31
 80092d8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80092dc:	bf5e      	ittt	pl
 80092de:	0fda      	lsrpl	r2, r3, #31
 80092e0:	005b      	lslpl	r3, r3, #1
 80092e2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80092e6:	0fda      	lsrs	r2, r3, #31
 80092e8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80092ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80092f0:	2000      	movs	r0, #0
 80092f2:	106d      	asrs	r5, r5, #1
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	f04f 0e16 	mov.w	lr, #22
 80092fa:	4684      	mov	ip, r0
 80092fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009300:	eb0c 0401 	add.w	r4, ip, r1
 8009304:	4294      	cmp	r4, r2
 8009306:	bfde      	ittt	le
 8009308:	1b12      	suble	r2, r2, r4
 800930a:	eb04 0c01 	addle.w	ip, r4, r1
 800930e:	1840      	addle	r0, r0, r1
 8009310:	0052      	lsls	r2, r2, #1
 8009312:	f1be 0e01 	subs.w	lr, lr, #1
 8009316:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800931a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800931e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009322:	d1ed      	bne.n	8009300 <__ieee754_sqrt+0x94>
 8009324:	4671      	mov	r1, lr
 8009326:	2720      	movs	r7, #32
 8009328:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800932c:	4562      	cmp	r2, ip
 800932e:	eb04 060e 	add.w	r6, r4, lr
 8009332:	dc02      	bgt.n	800933a <__ieee754_sqrt+0xce>
 8009334:	d113      	bne.n	800935e <__ieee754_sqrt+0xf2>
 8009336:	429e      	cmp	r6, r3
 8009338:	d811      	bhi.n	800935e <__ieee754_sqrt+0xf2>
 800933a:	2e00      	cmp	r6, #0
 800933c:	eb06 0e04 	add.w	lr, r6, r4
 8009340:	da43      	bge.n	80093ca <__ieee754_sqrt+0x15e>
 8009342:	f1be 0f00 	cmp.w	lr, #0
 8009346:	db40      	blt.n	80093ca <__ieee754_sqrt+0x15e>
 8009348:	f10c 0801 	add.w	r8, ip, #1
 800934c:	eba2 020c 	sub.w	r2, r2, ip
 8009350:	429e      	cmp	r6, r3
 8009352:	bf88      	it	hi
 8009354:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009358:	1b9b      	subs	r3, r3, r6
 800935a:	4421      	add	r1, r4
 800935c:	46c4      	mov	ip, r8
 800935e:	0052      	lsls	r2, r2, #1
 8009360:	3f01      	subs	r7, #1
 8009362:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009366:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800936a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800936e:	d1dd      	bne.n	800932c <__ieee754_sqrt+0xc0>
 8009370:	4313      	orrs	r3, r2
 8009372:	d006      	beq.n	8009382 <__ieee754_sqrt+0x116>
 8009374:	1c4c      	adds	r4, r1, #1
 8009376:	bf13      	iteet	ne
 8009378:	3101      	addne	r1, #1
 800937a:	3001      	addeq	r0, #1
 800937c:	4639      	moveq	r1, r7
 800937e:	f021 0101 	bicne.w	r1, r1, #1
 8009382:	1043      	asrs	r3, r0, #1
 8009384:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009388:	0849      	lsrs	r1, r1, #1
 800938a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800938e:	07c2      	lsls	r2, r0, #31
 8009390:	bf48      	it	mi
 8009392:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009396:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800939a:	460c      	mov	r4, r1
 800939c:	463d      	mov	r5, r7
 800939e:	e77f      	b.n	80092a0 <__ieee754_sqrt+0x34>
 80093a0:	0ada      	lsrs	r2, r3, #11
 80093a2:	3815      	subs	r0, #21
 80093a4:	055b      	lsls	r3, r3, #21
 80093a6:	2a00      	cmp	r2, #0
 80093a8:	d0fa      	beq.n	80093a0 <__ieee754_sqrt+0x134>
 80093aa:	02d7      	lsls	r7, r2, #11
 80093ac:	d50a      	bpl.n	80093c4 <__ieee754_sqrt+0x158>
 80093ae:	f1c1 0420 	rsb	r4, r1, #32
 80093b2:	fa23 f404 	lsr.w	r4, r3, r4
 80093b6:	1e4d      	subs	r5, r1, #1
 80093b8:	408b      	lsls	r3, r1
 80093ba:	4322      	orrs	r2, r4
 80093bc:	1b41      	subs	r1, r0, r5
 80093be:	e788      	b.n	80092d2 <__ieee754_sqrt+0x66>
 80093c0:	4608      	mov	r0, r1
 80093c2:	e7f0      	b.n	80093a6 <__ieee754_sqrt+0x13a>
 80093c4:	0052      	lsls	r2, r2, #1
 80093c6:	3101      	adds	r1, #1
 80093c8:	e7ef      	b.n	80093aa <__ieee754_sqrt+0x13e>
 80093ca:	46e0      	mov	r8, ip
 80093cc:	e7be      	b.n	800934c <__ieee754_sqrt+0xe0>
 80093ce:	bf00      	nop
 80093d0:	7ff00000 	.word	0x7ff00000

080093d4 <_init>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr

080093e0 <_fini>:
 80093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e2:	bf00      	nop
 80093e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093e6:	bc08      	pop	{r3}
 80093e8:	469e      	mov	lr, r3
 80093ea:	4770      	bx	lr
